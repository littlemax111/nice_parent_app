/*!
 * Beyondbit Mobile Front-end Framework v1.0.0
 changeset 171207 *
 * http://bsdn.beyondbit.com
 *
 * Copyright (c)  xakoy
 * Released under the  license
 */
try {
    if (window.webkit.messageHandlers && window.webkit.messageHandlers._belvolyNative) {
        window._belvolyNative = {
            exec: function (service, action, callbackId, arguments) {
                window.webkit.messageHandlers._belvolyNative.postMessage({ functionName: "exec", service: service, action: action, callbackId: callbackId, arguments: arguments });
            }
        };
    }
} catch (e) { }

/**
 * This is module BM
 * @module BM
 * @main BM
 * @class BM
 * @static
 * @example
 *
 *     // BM 命名空间<br />
 *     var b = BM;
 *
 */
var belvolyMobile = (function () {
    var that = {};
    // Hello,ll

    /**
      * 注册命名空间到Beyondbit命令空间下，可注册多层
      * @method registerNameSpace
      * @static
      * @param  {string} nameSpace 命名空间字符串，多层使用.隔开
      * @return {object} 返回创建的命令空间对象
      * @example
      *
      *     var web = Beyondbit.registerNameSpace("Web");
      *     var window = Beyondbit.registerNameSpace("Web.Window");
      *
      */
    that.registerNameSpace = function (nameSpace) {
        var result = that;
        var path = nameSpace.split(".");
        var length = path.length;
        for (var i = 0; i < length; i++) {
            var name = path[i];
            if (result[name] === undefined) {
                result[name] = {};
            }
            result = result[name];
        }
        return result;
    };


    /**
    * 注册一个命名空间对象至Beyondbit中
    * @method register
    * @static
    * @param {String} nameSpace 命名空间字符串，多层使用.隔开
    * @param {function} maker 一个方法委托，执行后，返回一个Json对象 () => {};
    * @example
    *
    *     // 注册
    *     Beyondbit.register("Web",function(){
    *        return {
    *           alert:function(){
    *               alert(1);
    *           }
    *        }
    *     });
    *
    *     // 调用
    *     Beyondbit.Web.alert();
    */
    that.register = function (nameSpace, maker) {
        var path = nameSpace.split(".");
        var curr = that;
        for (var i = 0, len = path.length; i < len; i += 1) {
            if (i == len - 1) {
                if (curr[path[i]] !== undefined) {
                    curr[path[i]] = $.extend({}, curr[path[i]], maker(that));
                    return true;
                }
                curr[path[i]] = maker(that);
                return true;
            }
            if (curr[path[i]] === undefined) {
                curr[path[i]] = {};
            }
            curr = curr[path[i]];
        }
    };

    that.regShort = function (ns, maker) {
        if (that[ns] !== undefined) throw "[" + ns + "] : short : 已经注册";
        that[ns] = maker;
    };

    /**
    * 检测对象是否存在
    * @method isObjectExists
    * @static
    * @param {String} objectString 对象的string字符串
    * @example
    *
    *     Beyondbit.isObjectExists("Beyondbit.Portal.toLocationMenu")
    */
    that.isObjectExists = function (objectString) {
        try {
            eval("var tempObjetExists = " + objectString);
            return true;
        } catch (e) { }
        return false;
    };

    /* 代号 */
    that.DESIGNATION = "belvolyMobile";

    var _identity = 1;

    /**
      * 获取自增长标识字段
      * @method getIdentity
      * @returns {Number}
      *
      */
    that.getIdentity = function () {
        return _identity++;
    };

    that.log = function (obj) {
        //alert(obj);
        console.log(obj);
        //$("#log").append("<p>" + obj + "</p>");
    }

    that.ready = function (existsMobile, notExistsMobile) {
        if (that.isMobileEnvironment()) {
            existsMobile && existsMobile();
        } else {
            notExistsMobile && notExistsMobile();
        }
    }

    /**
      * 是否是移动的环境
      * @method isMobileEnvironment
      */
    that.isMobileEnvironment = function () {
        return window._belvolyNative != null;
    };

    return that;
})();

var BM = window.BM = window.belvolyMobile = belvolyMobile;
(function () {
    BM.Config = {
        webRootUrl: "/",
        sharedServiceRootUrl: "",
        position: {
            url: "/Position/Select"
        },
        iam: {
            clientId: "",
            clientSecret: "",
            token: "",
            refreshToken: "",
            refreshTokenUrl: "",
            enabled: true
        }
    };

    BM.getAbsoluteUrl = function (url) {
        var a = document.createElement('a');
        a.href = url;

        return a.href;

        var origin = window.location.origin;
        if (!origin) {
            origin = window.location.protocol + "//" + window.location.host;
        }

        return origin + url;
    }

    BM.getEntireUrl = function (url) {
        if (BM.Config.webRootUrl && BM.Config.webRootUrl.length <= 1) {
            return url;
        }

        return BM.Config.webRootUrl + url;
    };

    BM.config = function (config) {
        if (!config) {
            return BM.Config;
        }

        BM.Config = $.extend(true, {}, BM.Config, config);
    };

    if (window.BM_config) {
        BM.config(window.BM_config);
    }

    function getRelative(url) {

    }
})();

(function () {
    BM.getBottomWindow = function () {
        var currentWindow = window;
        while (currentWindow.parent != currentWindow.self) {
            currentWindow = currentWindow.parent;
        }
        return currentWindow;
    }
})();
(function () {

    /**
    * 调用APP 外壳交互API 相关
    * @module BM.appointment
    * @submodule appointment
    *
    */

    var appointment = {
        getCommonCallback: function (callback) {
            return function (data) {
                if (callback) {
                    callback(data);
                }
            }
        }
    };

    BM.appointment = appointment;



})();



(function () {
    var appointment = BM.appointment;
    var serviceName = "driver";

    /**
      * 设备信息类操作集合
      * @class driver
      *
      */


    function Driver() {

        /**
         * 获取设备信息
         * @method get
         * @param {Function} callback 完成后的回调事件
         * @param {JSON} callback.data callback事件的第一个数据
         * @param {string} callback.data.name 设备名称
         * @param {string} callback.data.platform 平台以下几个值[android、ios、web、wechat]
         * @param {string} callback.data.version 系统版本
         * @param {string} callback.data.version 框架版本
         *
         * @example
         *
         *      BM.appointment.driver.get(function(data){
         *          alert("当前的设备是:" + data.name)
         *      })
         *
         */
        this.get = function (callback) {
            BM.webBridge.native.execute(serviceName, "get", {}, function (data) {
                if (callback) {
                    callback(data);
                }
            });
        };

        var _lasterInfo = null;

        /**
         * Overwritten method see {{#crossLink "appointment.driver/get"}}{{/crossLink}}
         *
         *
         * 获取最近一次设备信息，此方法是对 [get] 方法做了缓存包装. 参数参考[get]
         *
         * @method getLaster
         */
        this.getLaster = function (callback) {
            if (_lasterInfo != null) {
                appointment.getCommonCallback(callback)(_lasterInfo);
            }
            else {
                this.get(function (data) {
                    _lasterInfo = data;
                    appointment.getCommonCallback(callback)(_lasterInfo);
                });
            }
        }

        /**
         * 获取系统指纹相关信息
         * @method getFingerprintInfo
         * @param {Function} callback 完成后的回调事件
         * @param {JSON} callback.data callback事件的第一个数据
         * @param {Boolean} callback.data.isSupport 系统是否支持指纹
         * @param {Boolean} callback.data.isSet 系统是否设置过指纹
         */
        this.getFingerprintInfo = function (callback) {
            BM.webBridge.native.execute(serviceName, "getFingerprintInfo", {}, function (data) {
                if (callback) {
                    callback(data);
                }
            });
        }
    }


    appointment.driver = new Driver();
})();


(function () {


    var appointment = BM.appointment;


    var serviceName = "location";

    /**
     * 地理位置
     * @class location
     * @module BM.appointment
     */

    appointment.location = new function () {

        /**
         * 获取定位
         * @method get
         * @param {Function} callback 获取到后通知的事件
         * @param {JSON} callback.data 获取到的数据
         * @param {JSON} callback.data.point 定位的坐标
         * @param {Number} callback.data.point.longitude 经度
         * @param {Number} callback.data.point.longitude 纬度
         *
         * @return {
         *    point: {
         *          longitude: 100.00,
         *          latitude: 100.00
         *       }
         *   }
         */
        this.get = function (callback) {
            BM.webBridge.native.execute(serviceName, "get", {}, function (data) {
                if (callback) {
                    callback(data);
                }
            });
        }
    };

})();

(function () {
    var appointment = BM.appointment;

    /**
      * 图像查看器
      * @class imageView
      * @module BM.appointment
      */
    var serviceName = "imageView";
    appointment.imageView = new function () {
        /**
         * 显示
         * @method show
         * @param {Array} images 要显示的图片列表
         * @param {String} images.url 图片的下载URL
         * @param {String} images.title 图片的标题
         * @param {int} currentIndex 当前的图片索引
         */
        this.show = function (imageList, currentIndex, callback) {
            BM.webBridge.native.execute(serviceName, "show",
                { imageList: imageList, currentIndex: currentIndex },
                function (data) {
                    if (callback) {
                        callback(data);
                    }
                });
        }
    }
})();



(function () {
    var appointment = BM.appointment;

    /**
      * 照相机
      * @class camera
      * @module BM.appointment
      */
    var serviceName = "camera";

    appointment.camera = new function () {
        /**
         * 获取一张图片
         * @method getPictrue
         * @param {Function} callback 获取成功后的回调函数
         * @param {JSON} callback.data 获取的数据
         * @param {string} callback.data.imgURI 图片的磁盘物理地址
         * @param {string} callback.data.fileSize 图片的文件字节大小
         */
        this.getPicture = function (callback) {
            BM.webBridge.native.execute(serviceName, "getPicture", {}, function (data) {
                if (callback) {
                    callback(data);
                }
            });
        };

        /**
          * 上传一张图片
          * @method uploadPicture
          * @param {String} imgURI 图片的磁盘物理地址
          * @param {String} uploadURL 上传服务器地址
          * @param {Function} callback 获取成功后的回调函数
          * @param {JSON} callback.data 获取的数据
          * @param {Number} callback.data.state 上传的状态 0 准备, 1 上传中, 2 成功, 3 失败， 4 超时  , 6 文件在本地缓存已存在
          * @param {double} callback.data.progressPercentage 上传进度 1为100%
          * @param {string} callback.data.code 上传的code
          * @param {string} callback.data.message 上传的完成后返回的文本
          * @param {string} callback.data.result 上传的完成后服务端返回的数据
          */
        this.uploadPicture = function (imgURI, uploadURL, callback) {
            BM.webBridge.native.execute(serviceName, "uploadPicture", { imgURI: imgURI, uploadURL: uploadURL },
            function (data) {
                if (callback) {
                    callback(data);
                }
            });
        };
        /**
         * 扫码
         * @method scanQR
         * @param {Function} callback 扫码成功后通知的事件
         * @param {String} callback.data 获取到的文本结果
         */
        this.scanQR = function (callback) {
            BM.webBridge.native.execute(serviceName, "scanQR", {}, function (data) {
                if (callback) {
                    callback(data);
                }
            });
        }
    };
})();


(function () {
    var appointment = BM.appointment;

    /**
      * 社交服务
      * @class sns
      * @module BM.appointment
      */
    var serviceName = "sns";


    appointment.sns = new function () {

        /**
         * 分享
         * @method share
         * @param {JSON} options 参数配置
         * @param {string} options.title 标题 为null是获取当期网页的标题
         * @param {string} options.description 简介
         * @param {string} [options.imgUrl] 图片URL
         * @param {Boolean} [options.isScreenshot=false] 是否屏幕截图
         * @param {string} [url=当前URL] 分享的Url如果是为空，则默认为当前的url地址
         */
        this.share = function (options) {
            var config = $.extend(true, {},
                {
                    title: "",
                    subtitle: "",
                    description: "",
                    imgUrl: "",
                    isScreenShot: false,
                    url: ""
                }, options);

            BM.webBridge.native.execute(serviceName, "share", config,
                function (data) {
                    if (callback) {
                        callback(data);
                    }
                }
            );
        };
    }
})();


(function () {
    var appointment = BM.appointment;

    /**
     * 数据服务
     * @class data
     * @module BM.appointment
     */
    var serviceName = "data";

    function Data() {
        /**
          * 设置数据
          * @method set
          * @param {string} key 存储的数据名
          * @param {string} value 存储的值
          * @param {Function} callback 回调函数
          */
        this.set = function (key, value, callback) {
            BM.webBridge.native.execute(serviceName, "set",
                {
                    domain: getCurrentDomain(),
                    key: key,
                    value: value
                },
                BM.appointment.getCommonCallback(callback)
            );
        };

        /**
          * 获取数据
          * @method get
          * @param {string} key 存储的数据名
          * @param {Function} callback 回调函数
          * @param {string} callback.value 获取的值，如果 key 不存在。返回空
          */
        this.get = function (key, callback) {
            this.containKey(key, function (result) {
                if (!result) {
                    if (callback) {
                        callback(null);
                    }
                    return;
                }

                BM.webBridge.native.execute(serviceName, "get",
                    {
                        domain: getCurrentDomain(),
                        key: key
                    },
                    BM.appointment.getCommonCallback(callback)
                );
            });
        };
        /**
          * 移除数据
          * @method remove
          * @param {string} key 存储的数据名
          * @param {Function} callback 回调函数
          */
        this.remove = function (key, callback) {
            BM.webBridge.native.execute(serviceName, "remove",
                {
                    domain: getCurrentDomain(),
                    key: key
                },
                BM.appointment.getCommonCallback(callback)
            );
        };
        /**
          * 清空所有数据
          * @method clear
          * @param {Function} callback 回调函数
          */
        this.clear = function (callback) {
            BM.webBridge.native.execute(serviceName, "clear",
                {
                    domain: getCurrentDomain()
                },
                BM.appointment.getCommonCallback(callback)
            );
        };

        this.containKey = function (key, callback) {
            BM.webBridge.native.execute(serviceName, "containKey",
                {
                    domain: getCurrentDomain(),
                    key: key
                },
                BM.appointment.getCommonCallback(callback)
            );
        };
    }

    appointment.data = new Data();

    function getCurrentDomain() {
        return window.location.host;
    };
})();

(function () {
    var appointment = BM.appointment;

    var serviceName = "plugin";

    /**
     * 插件服务
     * @class plugin
     * @module BM.appointment
     */
    function Plugin() {
        this.show = function (code, functionCode, params, callback) {
            BM.webBridge.native.execute(serviceName, "show",
                {
                    code: code,
                    functionCode: functionCode,
                    params: JSON.stringify(params || {})
                }, BM.appointment.getCommonCallback(callback));
        };

        /**
         * 调用执行插件
         * @method exec
         * @param {String} code 插件服务的标识
         * @param {String} functionCode 插件的功能标识
         * @param {String} params 插件功能需要提供的参数
         * @param {Function} callback 插件执行完成后，返回调用的回调函数
         * @param {Object} callback.data 执行完成后，返回的数据
         */
        this.exec = function (code, functionCode, params, callback) {
            this.show(code, functionCode, params, callback);
        };
    }

    appointment.plugin = new Plugin();

})();

(function () {
    // Init
    $(function () {
        BM.ready(function () {
            if (window.BM_setAutoConvertLinkToPageEnabled && window.BM_setAutoConvertLinkToPageEnabled == true) {
                $("a").click(function () {
                    var mode = $(this).attr("data-mode");
                    if (mode !== "none") {
                        var href = $(this).attr("href");

                        if (!href || href == "#") {
                            return false;
                        }

                        BM.appointment.webview.open(href);

                        return false;
                    }
                });
            }
        });
    });
})();

(function () {

    var appointment = BM.appointment;

    var serviceName = "contacts";

    /**
     * 联系人服务
     * @class contacts
     * @module BM.appointment
     */
    function Contacts() {

        /**
         * 添加联系人
         * @method add
         * @param {contact} contact 通讯录对象
         * @param {String} [type=phone] 通讯录类型 phone=手机通讯录，sim=sim卡通讯录
         * @param {Function} [callback] 添加成功后的事件
         * @param {JSON} [callback.data] 成功后的数据
         * @param {String} [callback.data.id] 手机联系人ID
         */
        this.add = function (contact, type, callback) {
            BM.webBridge.native.execute(serviceName, "add", { type: type, contact: JSON.stringify(contact)}, appointment.getCommonCallback(callback));

        };
    };


    appointment.contacts = new Contacts();

})();




(function () {

    var appointment = BM.appointment;

    /**
      * 当前DOM类操作集合
      * @class document
      * @module BM.appointment
      */

    function Document() {

        var events = {};

        this.on = function (eventName, fn) {
            var ev = getEvent(eventName);

            if (!$.isFunction(fn)) {
                return;
            }

            var index = $.inArray(fn, ev);
            if (index > -1) {
                return;
            }

            if (ev.length == 0) {
                BM.appointment.event.add(eventName, function (data) {
                    var name = data.eventName;
                    var evs = getEvent(name);

                    $.each(evs, function (_, ev) {
                        ev();
                    });
                });
            }

            ev.push(fn);
        }

        this.off = function (eventName, fn) {
            var ev = getEvent(eventName);

            if (!$.isFunction(fn)) {
                return;
            }

            var index = $.inArray(fn, ev);
            if (index == -1) {
                return;
            }

            ev.splice(index, 1);

            if (ev.length == 0) {
                BM.appointment.event.remove(eventName);
            }
        }

        /**
         * 触发自定义事件
         * @method fire
         * @param {string} eventName 要触发事件的名称.
         * @param {JSON} [data] 触发事件的参数 JSONString.
         * @param {string} [context=openview] 触发事件的范围, 可选值. current = 当前view, openview = 打开的view
         */
        this.fire = function (eventName, data, context) {
            BM.appointment.event.fire(eventName, data, context);
        }

        function getEvent(name) {
            var event = events[name];

            if (event) {
                return event;
            }

            events[name] = [];

            return getEvent(name);
        }
    }

    var document = new Document();

    appointment.document = document;

})();

(function () {

    var appointment = BM.appointment;

    var serviceName = "event";

    function Event() {
        this.add = function (eventName, callback) {
            BM.webBridge.native.execute(serviceName, "add", { eventName: eventName }, function (data) {
                if (callback) {
                    callback(data);
                }
            });
        };

        this.remove = function (eventName, callback) {
            BM.webBridge.native.execute(serviceName, "remove", { eventName: eventName }, function (data) {
                if (callback) {
                    callback(data);
                }
            });
        };

        /**
         * 触发自定义事件
         * @method fire
         * @param {string} eventName 要触发事件的名称.
         * @param {JSON} [data] 触发事件的参数 JSONString.
         * @param {string} [context=openview] 触发事件的范围, 可选值. current = 当前view, openview = 打开的view
         */
        this.fire = function (eventName, data, context) {
            var dataString = data ? JSON.stringify(data) : "";
            context = context || "openview";

            BM.webBridge.native.execute(serviceName, "fire", { eventName: eventName, data: dataString, context: context }, function (data) {
                if (callback) {
                    callback(data);
                }
            });
        }
    }

    appointment.event = new Event();


})();

(function () {
    var appointment = BM.appointment;

    /**
      * 文件
      * @class file
      * @module BM.appointment
      */
    var serviceName = "file";

    function File() {

        var that = this;

        /**
         * 获取文件
         * @method getFiles
         * @param {Number} [maxTotal=0] 选择的最大数量（0为不限制）
         * @param {Function} callback 获取成功后的回调函数
         * @param {Array} callback.data 获取的数据
         * @param {string} callback.data.fileURI 文件的磁盘物理地址
         * @param {string} callback.data.fileSize 文件的文件字节大小
         */
        this.getFiles = function (maxTotal, callback) {
            BM.webBridge.native.execute(serviceName, "getFiles", { maxTotal: maxTotal }, function (data) {
                if (callback) {
                    callback(data);
                }
            });
        }

        /**
          * 上传一个文件
          * @method uploadFile
          * @param {String} fileURI 文件的磁盘物理地址
          * @param {String} uploadURL 上传服务器地址
          * @param {Function} callback 获取成功后的回调函数
          * @param {JSON} callback.data 获取的数据
          * @param {Number} callback.data.state 上传的状态 0 准备, 1 上传中, 2 成功, 3 失败， 4 超时
          * @param {double} callback.data.progressPercentage 上传进度 1为100%
          * @param {string} callback.data.code 上传的code
          * @param {string} callback.data.message 上传的完成后返回的文本
          * @param {string} callback.data.result 上传的完成后服务端返回的数据
          */
        this.uploadFile = function (fileURI, uploadURL, callback) {
            BM.webBridge.native.execute(serviceName, "uploadFile", { fileURI: fileURI, uploadURL: uploadURL },
            function (data) {
                if (callback) {
                    callback(data);
                }
            });
        }

        /**
          * 下载文件
          * 将文件下载到当前用户的指定目录中，并打开文件
          * @method download
          * @param {JSON} options 文件下载参数
          * @param {String} options.downloadURL 文件下载地址
          * @param {String} options.fileName 文件名（包含扩展名）
          * @param {String} [options.categoryCode] 文件的分类Code
          * @param {Object} [options.extendData] 文件关联的扩展数据（特殊需求使用）
          * @param {String} [options.id] 文件的唯一ID
          * @param {Boolean} [options.isFinishedOpen=true] 下载完成后是否打开文件
          * @param {Function} callback 下载的回调函数
          * @param {JSON} callback.data 下载的回调的数据
          * @param {Number} callback.data.state 下载的状态 0 准备, 1 上传中, 2 成功, 3 失败， 4 超时
          * @param {double} callback.data.progressPercentage 下载进度 1为100%
          * @param {string} callback.data.code 下载的code
          * @param {string} callback.data.message 下载的完成后返回的文本
          * @param {string} callback.data.result 下载的完成后服务端返回的数据
          */

        /**
          * 下载文件
          * 将文件下载到当前用户的指定目录中，并打开文件
          * @method download
          * @param {String} downloadURL 文件下载地址
          * @param {String} fileName 文件名（包含扩展名）
          * @param {String} [categoryCode] 文件的分类Code
          * @param {Object} [extendData] 文件关联的扩展数据（特殊需求使用）
          * @param {Function} callback 下载的回调函数
          * @param {JSON} callback.data 下载的回调的数据
          * @param {Number} callback.data.state 下载的状态 0 准备, 1 上传中, 2 成功, 3 失败， 4 超时
          * @param {double} callback.data.progressPercentage 下载进度 1为100%
          * @param {string} callback.data.code 下载的code
          * @param {string} callback.data.message 下载的完成后返回的文本
          * @param {string} callback.data.result 下载的完成后服务端返回的数据
          */
        this.download = function (downloadURL, fileName, categoryCode, extendData, callback) {
            if (!downloadURL) {
                return;
            }

            var config = {
                id: null,
                downloadURL: null,
                fileName: null,
                categoryCode: null,
                extendData: null,
                isFinishedOpen: true
            };

            var cb;

            if ($.type(arguments[0]) !== "string") {
                config = $.extend(true, {}, config, arguments[0]);
                if (arguments.length > 1) {
                    cb = arguments[1];
                }
            } else {
                config.downloadURL = downloadURL;
                config.fileName = fileName;
                config.categoryCode = categoryCode;
                config.extendData = extendData;
                cb = callback;
            }

            if (config.id) {
                that.exists(config.id, function (isExists) {
                    if (isExists) {
                        if (config.isFinishedOpen) {
                            that.open(config.id);
                        } else {
                            cb({ state: 6 });
                        }
                    } else {
                        downloadFile(config, cb);
                    }
                });
            } else {
                downloadFile(config, cb);
            }
        }

        function downloadFile(config, callback) {
            BM.webBridge.native.execute(serviceName, "download", config,
                function (data) {
                    if (callback) {
                        callback(data);
                    }
                });
        }

        /**
         * 查询文件是否存在
         * @method exists
         * @param {String} id 文件的ID
         * @param {Function} callback 查询后的回调函数
         * @param {Boolean} callback.result 查询的结果
         */
        this.exists = function (id, callback) {
            BM.webBridge.native.execute(serviceName, "exists", { id: id }, appointment.getCommonCallback(callback));
        };
        /**
         * 根据文件ID打开文件
         * @method open
         * @param {String} id 文件的ID
         */
        this.open = function (id) {
            BM.webBridge.native.execute(serviceName, "open", { id: id });
        };


        this.query = function (categoryCode, callback) {
            BM.webBridge.native.execute(serviceName, "query", { categoryCode: categoryCode },
            function (data) {
                if (callback) {
                    callback(data);

                }
            });
        }

        /**
         * 根据文件本地路径打开文件
         * @method show
         * @param {String} localPath 文件的路径
         */
        this.show = function (localPath, callback) {
            BM.webBridge.native.execute(serviceName, "show", { localPath: localPath },
            function (data) {
                if (callback) {
                    callback(data);
                }
            });
        }

        /**
          * 删除本地文件
          * @method remove
          * @param {String} id 文件id
          * @param {Function} callback 删除后的回调函数
          */
        this.remove = function (id, callback) {
            BM.webBridge.native.execute(serviceName, "remove", { id: id },
            function (data) {
                if (callback) {
                    callback(data);
                }
            });
        }
    }

    appointment.file = new File();
})();

(function () {

    var appointment = BM.appointment;


    var serviceName = "screen";

    /**
      * 屏幕类操作集合
      * @class screen
      * @module BM.appointment
      */

    function Screen() {

        /**
		 * 设置屏幕方向
		 * @method setOrientation
		 * @param {string} orientation 屏幕方向, 值可选。
		 *							    default=恢复全局配置的值；
		 *							    unspecified=由系统来判断显示方向.判定的策略是和设备相关的，所以不同的设备会有不同的显示方向；
		 *							    portrait=竖屏正方向或反方向，根据设备重力感应器自动调整；
		 *								portrait-primary = 竖屏正方向；
		 *								portrait-secondary = 竖屏反方向，屏幕正方向按顺时针旋转180°；
		 *								landscape = 横屏正方向或反方向，根据设备重力感应器自动调整；
		 *								landscape-primary =  横屏正方向，屏幕正方向按顺时针旋转90°；
		 *								landscape-secondary = 横屏反方向，屏幕正方向按顺时针旋转270°；
		 * @param {boolean} [isEffectApp=false] 是否影响整个APP，false只影响当前页面
		 */
        this.setOrientation = function (orientation, isEffectApp) {
            BM.webBridge.native.execute(serviceName, "setOrientation", { orientation: orientation, isEffectApp: isEffectApp });
        }


    };


    appointment.screen = new Screen();


})();

(function () {

    var appointment = BM.appointment;

    var serviceName = "selectView";

    /**
     * 选择视图
     * @class selectedView
     * @module BM.appointment
     */
    function SelectView() {
        /**
         * 显示选择视图
         * @method show
         * @param {JSON} options 选项
         * @param {Number} options.totalCount 总共能选择的数量
         * @param {String} [options.direction=left]  方向,可选的值有left,right. 默认为left
         */
        this.show = function (options) {
            var options = $.extend(true, {}, {
                direction: "left",
                totalCount: 0
            }, options);

            BM.webBridge.native.execute(serviceName, "show",
                {
                    totalCount: options.totalCount,
                    direction: options.direction
                },
                function (data) {

           });
        }

        /**
         * 注册执行事件处理器，一直执行，知道遇到unRegisterEventHandler才注销事件
         * @method registerEventHandler
         * @param {Function} callback 事件的回调函数
         */
        this.registerEventHandler = function (callback) {
            BM.webBridge.native.execute(serviceName, "registerEventHandler", {}, appointment.getCommonCallback(callback));
        };
        /**
         * 注销执行事件的处理器
         * @method unRegisterEventHandler
         */
        this.unRegisterEventHandler = function () {
            BM.webBridge.native.execute(serviceName, "unRegisterEventHandler", {});
        };
        /*
         * 设置已选择的数量. 当selectedCount == totalCount 的值，"全选"按钮会变成"取消全选"按钮，当selectedCount < totalCount "取消全选"按钮会变成"全选"按钮
         * @method setSelectedCount
         * @param {Number} count 数量
         */
        this.setSelectedCount = function (count) {
            BM.webBridge.native.execute(serviceName, "setSelectedCount", { count: count });
        }
        /**
         * 设置总共能选择的数量，当变更数量时，当selectedCount == totalCount 的值，"全选"按钮会变成"取消全选"按钮，当selectedCount < totalCount "取消全选"按钮会变成"全选"按钮
         * @method setTotalCount
         * @param {Number} count 总数量
         */
        this.setTotalCount = function (count) {
            BM.webBridge.native.execute(serviceName, "setTotalCount", { count: count });
        }

        /**
         * 关闭选择视图
         * @method close
         * @param {String} code 关闭的动作，两个值ok=确认关闭,cancel=取消关闭
         * @param {JSON} data 关闭的数据
         */
        this.close = function (code, data) {
            var dataStr = JSON.stringify(data);
            BM.webBridge.native.execute(serviceName, "close", { code: code, data: dataStr });
        }
    };


    appointment.selectView = new SelectView();

})();



(function () {

    var appointment = BM.appointment;


    var serviceName = "system";

    /**
      * 系统类操作集合
      * @class system
      * @module BM.appointment
      */

    function System() {

        /**
          * 登录
          * @method signOn
          * @param {String} account 用户名
          * @param {JSON} data 登录存储的附加数据
          */
        this.signOn = function (account, data, callback) {
            var dataString = data ? JSON.stringify(data) : "";
            BM.webBridge.native.execute(serviceName, "signOn",
                    {
                        account: account,
                        data: dataString
                    },
                    BM.appointment.getCommonCallback(callback)
                );
        };

        /*
         * 注销
         * @method signOut
         * @param {Boolean} [isClearData=false] 是否清除用户数据
         */
        this.signOut = function (isClearData) {
            BM.webBridge.native.execute(serviceName, "signOut", { isClearData: isClearData || false }, function (data) {

            });
        };

        /**
          * 登录
          * @method login
          * @param {String} account 用户名
          * @param {JSON} data 登录存储的附加数据
          * @param {JSON} keepStateData 保持登录状态的数据
          * @param {Function} callback 回调函数
          */
        this.login = function (account, data, keepStateData, callback) {
            var dataString = data ? JSON.stringify(data) : "";
            var keepStateDataString = keepStateData ? JSON.stringify(keepStateData) : "";

            BM.webBridge.native.execute(serviceName, "login",
                    {
                        account: account,
                        data: dataString,
                        keepStateData: keepStateDataString
                    },
                    BM.appointment.getCommonCallback(callback)
                );
        };

        /**
         * 注销
         * @method logout
         * @param {Boolean} [isClearData=false] 是否清除用户数据
         * @param {Function} callback 回调函数
         */
        this.logout = function (isClearData, callback) {
            BM.webBridge.native.execute(serviceName, "logout", { isClearData: isClearData || false }, BM.appointment.getCommonCallback(callback));
        };



        /**
          * 获取当前用户
          * @method getUser
          * @param {Function} callback 完成后的回调事件
          * @param {JSON} callback.data callback事件的第一个数据
          * @param {string} callback.data.account 当前用户名
          * @param {JSON} callback.data.data 登录存储的附加数据
          */
        this.getUser = function (callback) {
            BM.webBridge.native.execute(serviceName, "getUser",
                    {
                    },
                    function (data) {
                        if (!callback) {
                            return;
                        }
                        var userData = (data.data ? JSON.parse(data.data) : null)
                        var result = {
                            account: data.account,
                            data: userData
                        };


                        callback(result);
                    }
                );
        };

        /**
         * 获取启动锁
         * @method getStartuplock
         * @param {Function} callback 完成后的回调事件
         * @param {JSON} callback.data callback事件的第一个数据
         * @param {boolean} callback.data.enabled 是否启用
         * @param {int} callback.data.timeout 超时时间（单位为秒
         * @example
         *
         *      BM.appointment.system.getStartuplock(function(data){
         *          if(data.enabled){
         *              alert("当前已开启手势锁")
         *          }else{
         *              alert("当前没有开启手势锁")
         *          }
         *      });
         */
        this.getStartuplock = function (callback) {
            BM.webBridge.native.execute(serviceName, "getStartuplock", {}, function (data) {
                if (callback) {
                    callback(data);
                }
            });
        };

        /**
         * 是否启用启动锁
         * @method enabledStartupLock
         * @param {boolean} enabled
         * @param {int} timeout 超时时间（单位为秒）
         * @param {Function} callback 完成后的回调事件
         * @param {JSON} callback.data callback事件的第一个数据
         * @param {string} callback.data.isSuccess 操作是否成功
         * @example
         *
         *      BM.appointment.system.enabledStartupLock(true, 3000, function(data){
         *          if(data.isSuccess){
         *              alert("设置成功");
         *          }else{
         *              alert("设置失败");
         *          }
         *      });
         */
        this.enabledStartupLock = function (enabled, timeout, callback) {
            BM.webBridge.native.execute(serviceName, "enabledStartupLock", { enabled: enabled, timeout: timeout }, function (data) {
                if (callback) {
                    callback(data);
                }
            });
        };

       /**
        * 使用浏览器打开外部链接
        * @method openUrl
        * @param {string} url 外部链接地址
        */
        this.openUrl = function (url) {
            BM.webBridge.native.execute(serviceName, "openUrl", {
                url: url
            });
        };

        /**
         * 退出应用
         * @method quit
         */
        this.quit = function () {
            BM.webBridge.native.execute(serviceName, "quit", {});
        };

        /**
         * 系统提示
         * @method toast
         * @param {string} text 提示才文本
         * @param {int} displayTime 显示的时间（单位毫秒）
         */
        this.toast = function (text, displayTime) {
            BM.webBridge.native.execute(serviceName, "toast", { text: text, displayTime: displayTime });
        }

    };


    appointment.system = new System();


})();


(function () {

    var appointment = BM.appointment;


    /**
      * 系统类操作集合
      * @class webview
      * @module BM.appointment
      *
      */
    var serviceName = "webview";

    var toAbsURL = function (url) {
        var a = document.createElement('a');
        a.href = url;
        return a.href;
    };

    function WebView() {
        if (!BM._popupWindowStack) {
            BM._popupWindowStack = [];
        }

        /**
         * 打开一个新的view，此方法和navigate方法效果一样
         * @method open
         * @param {String} url view中的URL地址为
         * @param {String} [direction] 打开Url的窗口的动画. 此参数暂时设置无效果
         * @param {Boolean} [true] isNeedProgressBar 是否需要显示进度条
         * @param {Boolean} [true] isNeedTitle 是否需要标题
         */
        this.open = function (url, direction, isNeedProgressBar, isNeedTitle) {
            this.navigate(url, direction, isNeedProgressBar, isNeedTitle);
        };

        /**
         * 打开一个新的view
         * @method navigate
         * @param {String} url view中的URL地址为
         * @param {String} [direction] 打开Url的窗口的动画. 此参数暂时设置无效果
         * @param {Boolean} [true] isNeedProgressBar 是否需要显示进度条
         * @param {Boolean} [true] isNeedTitle 是否需要标题
         */
        this.navigate = function (url, direction, isNeedProgressBar, isNeedTitle) {
            url = toAbsURL(url);
            if (!url) {
                alert("url 为null");
            }
            BM.webBridge.native.execute(serviceName, "open", { url: url, direction: direction, isNeedProgressBar: isNeedProgressBar, isNeedTitle: isNeedTitle });
        }

        var popups = {};

        this.findPopup = function (id) {
            var popup = popups[id];
            if (popup) {
                return popup;
            }
        };

        /**
         * 弹出一个页，并能够在关闭的时候接受回调函数
         * @method popup
         * @param {JSON} options 选项
         * @param {JSON} options.url 打开的url
         * @param {String} [options.id] 窗口ID
         * @param {Boolean} [options.isNeedProgressBar] 是否需要显示进度条url
         * @param {JSON} [options.data] 传递给打开页面的数据，此数据可以用getRequestData方法获取到
         * @param {Function} [options.onClose] 关闭的回调事件
         */
        this.popup = function (options) {
            var config = $.extend(true, {
                id: "",
                url: "",
                title: "",
                isNeedProgressBar: true,
                onClose: function () {

                },
                data: {},
                isNeedProgressBar: true
            }, options, {});

            config.url = toAbsURL(options.url);

            BM.webBridge.native.execute(serviceName, "popup", { url: config.url, title: config.title, data: JSON.stringify(config.data), isNeedProgressBar: config.isNeedProgressBar }, function (data) {
                if (config.onClose) {
                    config.onClose(data);
                }
            });
        };

        /**
         * 页面后退
         * @param {boolean} [isImmediate = false] 是否立即后退，如果是，则不触发viewBeforeBack事件
         */
        this.back =  function (isImmediate) {
            BM.webBridge.native.execute(serviceName, "back", { isImmediate: isImmediate === true });
        }

        /**
         * 关闭一个页, 对于open方法
         * @method close
         */
        this.close = function () {
            BM.webBridge.native.execute(serviceName, "close");
        }

        /**
         * 关闭 Propup 页，对应popup方法
         * @method closePopup
         * @param {object} data 传递给打开Popup的方法
         */
        this.closePopup = function (data) {
            BM.webBridge.native.execute(serviceName, "closePopup", { data: data });
        }

        /**
         * 设置当前窗口的按钮
         * @method setViewButton
         * @param {string} buttonCode 按钮代号    [默认三种: back => 后退 点击为后退.  home => 点击为跳到首页 . none => 去掉图标. 并且点击返回键也不能有任何响应]
         */
        this.setViewButton = function (buttonCode) {
            BM.webBridge.native.execute(serviceName, "setViewButton", { buttonCode: buttonCode });
        };

        /**
         * 跳转到登录主界面
         * @method goHome
         */
        this.goHome = function () {
            BM.webBridge.native.execute(serviceName, "goHome");
        };

        /**
         * 跳转到登录界面
         * @method goLoginView
         */
        this.goLoginView = function () {
            BM.webBridge.native.execute(serviceName, "goLoginView");
        };

        /**
         * 设置当前页面的标题
         * @method setTitle
         * @param {String} title 标题
         */
        this.setTitle = function (title) {
            BM.webBridge.native.execute(serviceName, "setTitle", { title: title });
        }

        /**
         * 禁用刷新选项
         * @method disabledRefresh
         * @param {Boolean} disabled 是否禁用
         */
        this.disabledRefresh = function (disabled) {
            BM.webBridge.native.execute(serviceName, "disabledRefresh", { disabled: disabled });
        }


        /**
         * 添加字体Toolbar
         * @method addFontToolbar
         * @param {String} id 按钮的ID，唯一
         * @param {String} fontFamily 哪种字体
         * @param {String} fontName 字的名称
         * @param {Function} callback 按钮被点击后响应的事件
         */
        this.addFontToolbar = function (id, fontFamily, fontName, callback) {
            BM.webBridge.native.execute(serviceName, "addFontToolbar",
                { id: id, fontFamily: fontFamily, fontName: fontName }, function (data) {
                    if (callback) {
                        callback(data);
                    }
                });
        }

        /**
         * 删除Toolbar
         * @method deleteToolbar
         * @param {String} id 按钮的ID，唯一
         */
        this.deleteToolbar = function (id) {
            BM.webBridge.native.execute(serviceName, "deleteToolbar", { id: id });
        }

        /**
         * 禁用Toolbar
         * @method disabledToolbar
         * @param {String} id 按钮的ID，唯一
         * @param {Boolean} disabled 是否禁用
         */
        this.disabledToolbar = function (id, disabled) {
            BM.webBridge.native.execute(serviceName, "disabledToolbar", { id: id, disabled: disabled });
        }

        /**
         * 添加文本Toolbar
         * @method addTextToolbar
         * @param {String} id 按钮的ID，唯一
         * @param {String} text 按钮的文字
         * @param {Function} callback 按钮被点击后响应的事件
         */
        this.addTextToolbar = function (id, text, callback) {
            BM.webBridge.native.execute(serviceName, "addTextToolbar", { id: id, text: text }, function (data) {
                if (callback) {
                    callback(data);
                }
            });
        }

        /**
         * 更改文本Toolbar的文字
         * @method changeTextToolbar
         * @param {String} id 按钮的ID，唯一
         * @param {String} text 按钮的文字
         */
        this.changeTextToolbar = function (id, text) {
            BM.webBridge.native.execute(serviceName, "changeTextToolbar", { id: id, text: text });
        }

        /**
         * 获取请求的数据
         * @method getRequestData
         * @param {Function} callback 获取到后通知的事件
         * @param {JSON} callback.data 获取到的数据
         */
        this.getRequestData = function (callback) {
            BM.webBridge.native.execute(serviceName, "getRequestData", {}, function (data) {
                if (callback) {
                    callback(JSON.parse(data.data));
                }
            });
        }

        /**
         * 设置是否启用WebView的历史功能，可以后退WebView里面的页面
         * @method setHistroyEnabled
         * @param {Boolean} [false] enabled 是否开启
         */
        this.setHistroyEnabled = function (enabled, callback) {
            BM.webBridge.native.execute(serviceName, "setHistroyEnabled", { enabled: enabled }, function (data) {
                if (callback) {
                    callback(data);
                }
            });
        }

        /**
         * 设置是否禁用WebView的后退功能
         * @method setHistroyBackDisabled
         * @param {Boolean} [false] disabled 是否禁用
         */
        this.setHistroyBackDisabled = function (disabled, callback) {
            BM.webBridge.native.execute(serviceName, "setHistroyBackDisabled", { disabled: disabled }, function (data) {
                if (callback) {
                    callback(data);
                }
            });
        }

        this.addTextViewButton = function (id, text, callback) {
            BM.webBridge.native.execute(serviceName, "addTextViewButton", { id: id, text: text }, function (data) {
                if (callback) {
                    callback(data);
                }
            });
        }

        this.deleteViewButton = function (id) {
            BM.webBridge.native.execute(serviceName, "deleteViewButton", { id: id });
        }

        /**
         * 设置当前标题栏是否可见
         * @method setTitleBarVisible
         * @param {Boolean} isVisible 是否可见
         */
        this.setTitleBarVisible = function (isVisible) {
            BM.webBridge.native.execute(serviceName, "setTitleBarVisible", { isVisible: isVisible });
        };

        /**
         * 设置当前是否启用沉浸式状态栏
         * @method enabledImmersiveStatusBar
         * @param {Boolean} enabled 是否启用
         */
        this.enabledImmersiveStatusBar = function (enabled) {
            BM.webBridge.native.execute(serviceName, "enabledImmersiveStatusBar", { enabled: enabled });
        };

        /**
         * 设置当前页面是否启用油滑关闭功能
         * @method enabledSwipeBack
         * @param {boolean} enabled 是否启用
         */
        this.enabledSwipeBack = function (enabled) {
            BM.webBridge.native.execute(serviceName, "enabledSwipeBack", { enabled: enabled });
        }
    }


    function PopupView(options) {
        var that = this;
        this.remoteID = "";
        this.url = options.url;
        this.title = options.title;
        this.options = options;
        this.onDestroy = null;

        this.show = function () {
            BM.webBridge.native.execute(serviceName, "popup", { url: this.url, title: this.title }, function (data) {
                that.remoteID = data.id;
            });
        }

        this.ok = function (data) {
            if (that.options.onOk) {
                that.options.onOk(data);
            }

            this.close();
        }

        this.close = function () {
            BM.webBridge.native.execute(serviceName, "close", { id: this.remoteID }, function (data) {
                if (that.options.onClose) {
                    that.options.onClose();
                }

                that.destroy();
            });
        };

        this.destroy = function () {
            if (this.onDestroy) {
                this.onDestroy();
            }
        };
    }


    appointment.webview = new WebView();
})();

(function () {
    var ERRORS = {
        1: "系统异常",
        100: "定位异常",
        101: "获取定位失败",
        102: "没有开启定位功能",
        9990: "不支持该功能",
        9999: "系统异常"
    };

    function errorHandle(args) {
        var error_message = ERRORS[args.code] || args.message;
        if (error_message) {
            alert(error_message);
        }
    }

    function beforeHandle(args) {
        var flag = (args.Flag || args.flag);
        if (!flag || flag == 0) {
            errorHandle(args);
            return false;
        }

        return true;
    }

    var webBridge = new function () {

        var identity = 1;

        var handles = {};

        /**
         * IOS和android 回调方法
         * @method callback
         * @param {String} id 回调方法的id
         * @param {String} args参数，为json字符串
         * @param {Boolean} destroyCallback为是否释放该callback，不传时默认为true
         */
        this.callback = function (id, args, destroyCallback) {
            try {

                BM.log("callbackID:" + id + ", args:" + args);
                var arg = args;

                if (typeof (args) === "string") {
                    arg = JSON.parse(args);
                }

                if (beforeHandle(arg)) {
                    if (!id) {
                        return;
                    }
                    BM.log("CallBackID:" + id);

                    var handle = handles[id];


                    if (!handle) {
                        BM.log("回调函数不存在:" + id)
                        return;
                    }

                    handle(arg.data);
                }
                destroyCallback = (typeof destroyCallback === "undefined") ? true : destroyCallback;
                if (destroyCallback) {
                    this.destroyCallback(id);
                }
            } catch (e) {
                alert(e);
            }
        };

        /*
         * 注册回调事件
         * @method registerCallback
         * @returns {String} ID
         */
        this.registerCallback = function (handle) {
            if (!handle) {
                return;
            }
            var id = "webBridgeCallback" + (identity++);
            BM.log("注册回调函数:" + id)
            handles[id] = handle;

            return id;
        };

        /*
         * 释放回调事件
         */
        this.destroyCallback = function (callbackId) {
            delete handles[callbackId];
        }

        /*
         * 将普通数据转换为协议数据
         * @data {Object} 返回数据
         * @flag {Boolean} 是否成功
         * @code {int} 响应编号
         * @message {String} 消息
         */
        this.interfaceData = function (data, flag, code, message) {
            flag = (flag === undefined) ? true : flag;
            var response = {
                flag: flag ? 1 : 0,
                message: message || "",
                code: code || 0,
                data: data || {}
            };
            return JSON.stringify(response);
        };

        this.exception = {
            systemExcetpion: this.interfaceData({}, 0, 9999),
            positionExcetpion: this.interfaceData({}, 0, 100),
            positionFailed: this.interfaceData({}, 0, 101),
            positionTurnOff: this.interfaceData({}, 0, 102),
            unsupportException: this.interfaceData({}, 0, 9990)
        }
    };


    BM.webBridge = webBridge;

})();



(function () {

    var webBridge = BM.webBridge;

    var native = function () {

        this.execute = function (service, action, args, handle) {




            var callbackID = webBridge.registerCallback(handle);

            var arg = JSON.stringify(args);

            BM.log("service:" + service + ", action:" + action + ", args:" + arg + ", callbackID: " + callbackID);
            window._belvolyNative.exec(service, action, callbackID, arg);
        };


    };

    webBridge.native = new native();

})();
(function () {
    /**
     * This is module Beyondbit
     * @module BM
     * @main BM
     * @class BM
     *
     */

    var ajax = BM.registerNameSpace("jQueryEx.Ajax");

    ajax.regional = [];

    ajax.regional[""] = ajax.regional["zh-CN"] = {
        message: {
            title: "系统提示",
            actionName: "操作"
        },
        close: "关闭",
        ok: "确定",
        success: "{0} 成功！",
        loading: "正在{0}中..."
    }

    function getRegional() {
        return ajax.regional[BM.CultureInfo.Current.get()];
    }


    /**
      * 包装jQuery.post 方法
      * @method post
      * @param {String} url 参考jQuery文档
      * @param {Json|String} data 参考jQuery文档
      * @param {Fun} callback 参考jQuery文档
      * @param {String} [dataType]
      * @example
      *
      *     BM.post("/Homt/Delete/1",{},function(result){
      *         alert(result.Flag);
      *     });
      *
      */
    BM.post = function (url, data, success, dataType) {
        return BM.ajax({
            type: "POST",
            url: url,
            data: data,
            success: success,
            dataType: dataType
        });
    }

    /**
      * 包装jQuery.ajax 方法，增加自动Loading和错误效果。
      * @method ajax
      * @param {Json} options 参考jQuery文档
      * @param {JSON} options.loading loading配置
      * @param {Boolean} [options.loading.enabled=true] 是否启用loading
      * @param {Function} [options.loading.onShowing] 显示loading调用的方法
      * @param {Function} [options.loading.onClosing] 关闭loading调用的方法
      * @param {String} options.oAuth OAuth配置
      * @param {String} options.oAuth.enabled 是否开启OAuth功能
      * @param {String} options.message Ajax时提示对象
      * @param {String} options.message.title Loading和Alert时的标题
      * @param {String} options.message.actionName Loading和Alert时的操作的动作名称，用作提示用
      * @param {Fun} options.success 回调函数,返回Boolean值，返回为True,则提示操作成功提示，其它则无动作.success(result)
      * @param {Fun} options.success.result 回调函数的数据结果，此值和JsonResultMessage对应，即拥有Flag,Message,Data属性。
      * @returns JQR
      * @example
      *
      *      BM.ajax({
      *          url: "/Homt/Delete/1",
      *          data: {},
      *          success: function(result){
      *              alert(result.Flag);
      *              return true;
      *          }
      *      });
      *
      */
    BM.ajax = function (options) {

        var message = $.extend(true, getRegional().message, options.message);

        var loading = $.extend(true, {
            enabled: true,
            onShowing: function () {
                BM.Web.MessageBox.loading(title, getRegional().loading.bformat(message.actionName));
            },
            onClosing: function () {
                BM.Web.MessageBox.loading(false);
            }
        }, {}, options.loading);

        var title = message.title;
        var regulate = options.regulate;

        var beforeSendHandler = options.beforeSend;
        if (beforeSendHandler) {
            options.beforeSend = function (XMLHttpRequest) {
                var flag = beforeSendHandler();
                if (flag == false) {
                    loading.enabled && loading.onClosing();
                }
                return flag;
            }
        }


        var successHandler = options.success;
        options.success = function (result) {
            loading.enabled && loading.onClosing();

            if (result.Flag == 0 || result.flag == 0) {
                BM.Web.MessageBox.alert(title, result.Message, getRegional().close, "error");

                if (regulate != null) {
                    regulate.disabled(false).show();
                }
            } else {
                var flag = true;
                if ($.isFunction(successHandler)) {
                    flag = successHandler(result);
                }
                if (flag == true) {
                    BM.Web.MessageBox.alert(title, getRegional().success.bformat(message.actionName), getRegional().ok, "success");
                }
            }
        };

        loading.enabled && loading.onShowing();

        return ajaxForOAuth(options).fail(function (response) {
            BM.Web.MessageBox.loading(false);
            var content = "";
            switch (response.status) {
                case 401:
                    content = "请登录后重试";
                    break;
                case 404:
                    content = "未找到访问的页面";
                    break;
                case 500:
                    content = response.responseText;
                    break;
                default:
                    return;
            }
            BM.Web.MessageBox.alert(title, content, getRegional().close, "error");
        });
    }

    /**
      * 包装jQuery.ajax 方法，增加自动Loading和错误效果。
      * @method load
      * @param {Json} options 参考jQuery文档
      * @param {String} options.oAuth OAuth配置
      * @param {String} options.oAuth.enabled 是否开启OAuth功能
      * @param {String} options.message Ajax时提示对象
      * @param {String} options.message.title Loading和Alert时的标题
      * @param {String} options.message.actionName Loading和Alert时的操作的动作名称，用作提示用
      * @param {String} options.loadMode 数据加载的模式，Replace：覆盖当前目标内的内容  Append：在当前元素的内容后面追加
      * @param {Fun} options.success 回调函数,返回Boolean值，返回为True,则提示操作成功提示，其它则无动作.success(result)
      * @param {Fun} options.success.result 回调函数的数据结果，此值和JsonResultMessage对应，即拥有Flag,Message,Data属性。
      * @returns JQR
      * @example
      *
      *      BM.load($("#target"),{
      *          url: "/Homt/Delete/1",
      *          data: {},
      *          success: function(result){
      *              alert(result.Flag);
      *              return true;
      *          }
      *      });
      *
      */
    BM.load = function (target, options) {
        if (!target) {
            throw "argument target is null";
        }
        var _target = $(target);

        options = $.extend(true, {}, {
            loadMode: "Replace",
            onResponseData: null
        }, options);

        var message = $.extend(true, getRegional().message, options.message);
        var title = message.title;
        var regulate = options.regulate;
        var beforeSendHandler = options.beforeSend;
        if (beforeSendHandler) {
            options.beforeSend = function (XMLHttpRequest) {
                return beforeSendHandler();
            }
        }
        var insertHtml = function (html) {
            switch (options.loadMode) {
                case "Append":
                    _target.append(html);
                    break;
                case "Replace":
                default:
                    _target.html(html);
                    break;
            }
        };
        var celearContainer = function () {
            _target.find(".loading-partial").remove();
            _target.find(".loading-partial-container").remove();
        }
        celearContainer();
        var successHandler = options.success;
        options.success = function (result) {
            if (result.Flag == 0) {
                BM.Web.MessageBox.alert(title, result.Message, getRegional().close, "error");
                if (regulate != null) {
                    regulate.disabled(false).show();
                }
            } else {
                if (options.loadMode == "Append") {
                    celearContainer();
                }
                if ($.isFunction(options.onResponseData)) {
                    var data = options.onResponseData(result);
                    if (data === false) {
                        return;
                    }
                    else if (data) {
                        result = data;
                    }
                }
                insertHtml(result)
                if ($.isFunction(successHandler)) {
                    flag = successHandler(result);
                }
            }
        };

        var zindex = BM.Web.get_zIndex();

        var html = '<div class="loading-partial" style="z-index:{0}" ><div class="loading-partial-container"></div></div>'.bformat(zindex);

        var isTable = _target.is("table");
        var isTbody = _target.is("tbody");
        if (isTable || isTbody) {
            var columnCount = 0;
            if (isTable) { columnCount = _target.children("thead").children("tr").last().children("th,td").length; }
            else if (isTbody) { columnCount = _target.prev("thead").children().last("tr").children("th,td").length; }

            if (columnCount <= 0) {
                columnCount = 1;
            }
            html = '<tr class="loading-partial"><td colspan="{0}">{1}</td></tr>'.bformat(columnCount, html);
        }
        insertHtml(html)

        return ajaxForOAuth(options)
            .fail(function (response) {
                var $frame = $('<iframe src="javascript:\'\'" style="width: 100%; height: 100%;" frameborder="0" scrolling="auto" />');
                _target.find(".loading-partial").html($frame);
                var editor = $frame[0].contentWindow;
                editor.document.open();
                editor.document.write(response.responseText);
                editor.document.close();
            }).complete(function () {
                if ($.isFunction(options.complete)) {
                    options.complete();
                }
            });
    }

    /**
      * 包装调用RESTFul API 方法，并完成API授权，象调用ajax一样调用api。
      * @method ajaxForOAuth
      * @param {Json} options 参考jQuery文档
      * @param {String} options.message Ajax时提示对象
      * @param {String} options.message.title Loading和Alert时的标题
      * @param {String} options.message.actionName Loading和Alert时的操作的动作名称，用作提示用
      * @param {Fun} options.success 回调函数,返回Boolean值，返回为True,则提示操作成功提示，其它则无动作.success(result)
      * @param {Fun} options.success.result 回调函数的数据结果，此值和JsonResultMessage对应，即拥有Flag,Message,Data属性。
      * @returns JQR
      * @example
      *
      *      BM.callWebApi({
      *          url: "/Homt/Delete/1",
      *          data: {},
      *          success: function(result){
      *              alert(result.Flag);
      *              return true;
      *          }
      *      });
      *
      */
    BM.ajaxForOAuth = function (options) {

        options = $.extend(true, {}, {
            oAuth: {
                enabled: true
            },
            type: "GET"
        }, options);

        return BM.ajax(options);
    }

    function ajaxForOAuth(options) {
        var oAuth = options.oAuth;

        if (oAuth && oAuth.enabled === true) {
            options.data = options.data || {};

            var type = (options.type || "get").toUpperCase();

            if (type == "POST") {
                var rawUrl = options.url;
                options.url = BM.getEntireUrl("/AjaxCrossDomain/Post");
                options.data = options.data || {};

                options.data["rawUrl"] = rawUrl;
            }


            var bmConfig = BM.config();

            options.data["client_id"] = bmConfig.iam.clientId;
            options.data["client_secret"] = bmConfig.iam.clientSecret;
            options.data["access_token"] = bmConfig.iam.token;


            var rawSuccess = options.success;

            options.success = function (result) {
                if (result.Flag == 0 || result.flag == 0) {
                    if (result.Message == "expired_token" || result.message == "expired_token"
                        || result.Message == "invalid_token" || result.message == "invalid_token") {
                        $.ajax({
                            type: "POST",
                            url: bmConfig.iam.refreshTokenUrl,
                            data: {
                                grant_type: "refresh_token",
                                client_id: bmConfig.iam.clientId,
                                client_secret: bmConfig.iam.clientSecret,
                                refresh_token: bmConfig.iam.refreshToken
                            },
                            success: function (result) {
                                if (!result.error_code) {
                                    BM.config({
                                        iam: {
                                            token: result.access_token,
                                            refreshToken: result.refresh_token
                                        }
                                    });
                                    ajaxForOAuth(options);
                                } else {
                                    alert("获取 Token 异常" + result.error_message);
                                }


                            }
                        });
                    } else {
                        rawSuccess(result);
                    }
                } else {
                    rawSuccess(result);
                }
            }
        }

        return $.ajax(options);
    }
})();

/**
 * NavBar
 */
(function () {
    var Bar = BM.registerNameSpace("Web.Bar");

    var defaultShowPanl = function (targets, currentClassName, event, options) {
        var current = targets.filter("." + currentClassName);
        var that = $(this);
        if (current.attr("for") == that.attr("for")) {
            return;
        }
        var currentPanel = $("#" + targets.filter("." + currentClassName).attr("for"));
        var targetPanel = $("#" + that.attr("for"));

        if (currentPanel.length <= 0) {
            targetPanel.show();

            targets.removeClass(currentClassName);
            that.addClass(currentClassName);
        }
        else {

            var width = currentPanel.width();
            var speed = 200;
            if (!event) {
                var targetIndex = -1, currentIndex = -1;
                for (var i = 0; i < targets.length; i++) {
                    if (targets.eq(i).is("[for='" + that.attr("for") + "']")) {
                        targetIndex = i;
                    }
                    else if (targets.eq(i).is("[for='" + current.attr("for") + "']")) {
                        currentIndex = i;
                    }
                    if (targetIndex >= 0 && currentIndex >= 0) {
                        break;
                    }
                }
                if (targetIndex > currentIndex) {
                    event = "swipeleft";
                }
                else {
                    event = "swiperight";
                }
            }
            if (event === "swipeleft") {
                targetPanel.css("position", "absolute")
                      .css("top", "0")
                      .css("left", width).show();
                currentPanel.css("position", "absolute")
                      .css("top", "0").show();
                currentPanel.animate({ left: "-" + width + "px" }, speed, function () {
                    currentPanel.hide();
                });
                targetPanel.animate({ left: 0 }, speed);
            }
            else {
                targetPanel.css("position", "absolute")
                      .css("top", "0")
                      .css("left", "-" + width + "px").show();
                currentPanel.css("position", "absolute")
                      .css("top", "0").show();
                currentPanel.animate({ left: width }, speed, function () {
                    currentPanel.hide();
                });
                targetPanel.animate({ left: 0 }, speed);
            }

            targets.removeClass(currentClassName);
            that.addClass(currentClassName);
        }
        if ($.isFunction(options.onShowedPanel)) {
            options.onShowedPanel(that);
        }
    }
    var getDefaultOption = function () {
        return {
            showPanel: defaultShowPanl,
            onShowedPanel: null,
            currentClassName: "current"
        };
    }

    Bar.navbar = function (targets, option) {
        targets = targets.filter("[for]");
        if (targets.length <= 0) {
            return
        }
        var _option = $.extend(getDefaultOption(), option);
        var first = targets.eq(0);
        var firstPanelId = first.attr("for");

        targets.click(function () {
            if ($.isFunction(_option.showPanel)) {
                _option.showPanel.call(this, targets, _option.currentClassName, null, _option);
            }
        });

        targets.each(function (index) {
            var panel = $("#" + $(this).attr("for"));
            if (panel.length <= 0) {
                return;
            }
            if (index > 0 && panel.attr("id") != firstPanelId) {
                panel.hide();
            }

            new Hammer(panel[0], { domEvents: true });
            panel.on("swipeleft", function (e) {
                for (var i = 0; i < targets.length; i++) {
                    if ($(targets[i]).is("[for='" + this.id + "']") && i < targets.length - 1) {
                        _option.showPanel.call(targets[i + 1], targets, _option.currentClassName, "swipeleft", _option);
                    }
                }
            });
            panel.on("swiperight", function (e) {
                for (var i = 0; i < targets.length; i++) {
                    if ($(targets[i]).is("[for='" + this.id + "']") && i > 0) {
                        _option.showPanel.call(targets[i - 1], targets, _option.currentClassName, "swiperight", _option);
                    }
                }
            });
        });
        if ($.isFunction(_option.showPanel)) {
            _option.showPanel.call(first, targets, _option.currentClassName, null, _option);
        }
    }

    BM.Bar = Bar;
})();

/**
 * actionSheet
 */
(function () {
    var Bar = BM.registerNameSpace("Web.Bar");

    var actionSheetShadowID = "actionSheet-shadow";

    Bar.actionSheet = function (element, options) {
        options = options || {};

        var $element = $(element);
        options.target = $element;

        var sheet = $element.data("actionsheet");

        if (sheet) {
            return sheet;
        }


        sheet = new ActionSheet(options);

        $element.data("actionsheet", sheet);

        return sheet;
    }

    function ActionSheet(options) {
        var options = $.extend(true, {}, {
            target: null,
            onItemClicked: null
        }, options);
        this.$element = options.target;

        actionSheetInit.call(this, options);
    }

    function actionSheetInit(options) {
        var that = this;
        this.$element.css({ "margin-bottom": "-9999px" }).removeClass("hidden").removeClass("hide").show();
        var height = getSheetHeight(that.$element)+300;
        that.$element.css({ 'margin-bottom': -height + 'px' }, function () {
            this.show();
        });

        $(".actionsheet-cancel", that.$element).on("click", function () {
            that.hide();
            return false;
        });

        $(".actionsheet-item", that.$element).on("click", function () {
            var handled = false;

            if (options.onItemClicked) {
                handled = options.onItemClicked.call(that, this);
            }

            if (handled !== false) {
                that.hide();
            }
        });
    }

    ActionSheet.prototype.show = function () {
        this.$element.show().animate({ 'margin-bottom': '0' });
        getSheetShadow().show();
    };

    ActionSheet.prototype.hide = function () {
        var height = getSheetHeight(this.$element);
        this.$element.animate({ 'margin-bottom': -height + 'px' });
        getSheetShadow().hide();
    }

    function getSheetHeight(box) {
        var boxHeight = box.find(".actionsheet-menu").outerHeight();
        return boxHeight;
    }

    function getSheetShadow() {
        var $shadow = $("#" + actionSheetShadowID);
        if ($shadow.length == 0) {
            shadow = BM.Shadow.renderJElement();
            shadow.attr("id", actionSheetShadowID);
            $("body").append(shadow);
        };
        return $shadow;
    }

    $.fn.actionSheet = function () {
        var that = this;
        BM.Bar.actionSheet(that, box);
    }

    BM.Bar = Bar;
})();

/**
 * BottomToolBar
 * TODO:需要改进动画效果和触发灵敏度
 */
(function () {
    var Bar = BM.registerNameSpace("Web.Bar");

    Bar.bottomToolBar = function (container, box) {
        container.css("position", "fixed")
           .css("bottom", 0);
        if (!box) {
            box = document;
        }
        if (box instanceof jQuery) {
            box = box[0];
        }
        new Hammer(box, { domEvents: true });
        $(box).on("pan", function (e) {
            console.log(e.originalEvent.gesture.deltaY);
            if (e.originalEvent.gesture.deltaY < 0) {
                container.stop().animate({
                    bottom: -(container.height())
                }, 300);
            }
            else if (e.originalEvent.gesture.deltaY > 0) {
                container.stop().animate({
                    bottom: 0
                }, 300);
            }
        });
    }

    $.fn.bottomToolBar = function (box) {
        var that = this;
        BM.Bar.bottomToolBar(that, box);
    }

    BM.Bar = Bar;
})();
(function () {

	var g_Handles = {};

	function getHandleCallbacks(code) {
		var callbacks = g_Handles[code];

		if (!callbacks) {
			callbacks = $.Callbacks();
			g_Handles[code] = callbacks;
		}

		return callbacks;
	}





	/**
      * 行为对象
      * @class Behavior
      * @module BM
      * @constructor
      * @param {String} [behaviorCode] 行业代号,不填，则绑定所有行为
      * @param {jQuery|HTMLElement} [content=body] 查找搜索框的上下文范围
      *
      */
	function Behavior(behaviorCode, content) {
		var self = this;
		var behaviorControls = [];
		setControls(getBehaviorControls(behaviorCode, content));

		this.code = behaviorCode;

		function getControls(isDel) {
			if (isDel && isLastBroken && behaviorControls.length > 1) {
				behaviorControls.pop();
			}
			return behaviorControls[behaviorControls.length - 1];
		}

		function setControls(controls) {
			behaviorControls.push(controls);
		}

		/**
         * 过滤控件
         * @method filter
         * @param {String} code 行为代号
         * @chainable
         */
		this.filter = function (code) {
			setControls(getControls().filter("[belvoly-behavior={0}]".bformat(behaviorCode)));
			return this;
		}

		/**
         * 绑定行为
         * @method bind
         * @chainable
         */
		this.bind = function () {
			var controls = getControls().filter(function () {
				var isBehavior = $(this).attr("belvoly-isbehavior");
				return isBehavior == "true" || !isBehavior;
			});
			behaviorsBind(controls);
			return this;
		}

		/**
         * 返回上一个破坏操作前的动作
         * @method end
         * @chainable
         */
		this.end = function () {
			getControls(true);
			return this;
		}

		function behaviorsBind(controls) {
			controls.each(function () {
				var control = $(this);
				behaviorBind(control, control.attr("belvoly-behavior"));
			})
		}

		function behaviorBind(controls, code) {
			var delegate = null;
			switch (code) {
				case "back":
					delegate = behaviorBack;
					break;
				case "close":
					delegate = behaviorClose;
					break;
				case "close-window":
					delegate = behaviorCloseWindow;
					break;
				case "open-url":
					delegate = behaviorOpenUrl;
					break;
				default:
					var callbacks = getHandleCallbacks(code);
					callbacks.fire(controls);
					controls.attr("belvoly-isbehavior", "true");
					break;
			}

			if (delegate) {
				delegate(controls);
			}
		}
	}

	Behavior.registerHandle = function (code, fun) {
		var callbacks = getHandleCallbacks(code);
		callbacks.add(fun);
	}

	// 获取行为控件
	function getBehaviorControls(behaviorCode, content) {
		if (behaviorCode) {
			return $behaviors = $("[belvoly-behavior={0}]".bformat(behaviorCode), content);
		}
		return $("[belvoly-behavior]", content);
	}

	// == 各种形为绑定

	// 回退
	function behaviorBack(controls) {
		controls.click(function () {
			BM.appointment.webview.back();
			return;
		});
		controls.attr("belvoly-isbehavior", "true");
	}

	// 关闭
	function behaviorClose(controls) {
		controls.click(function () {
			BM.appointment.webview.close();

			return;
		});
		controls.attr("belvoly-isbehavior", "true");
	}

	// 关闭窗口
	function behaviorCloseWindow(controls) {
		controls.click(function () {
			BM.appointment.webview.closePopup();
		});
		controls.attr("belvoly-isbehavior", "true");
	}

	function behaviorOpenUrl(controls) {
		controls.click(function () {
			var url = $(this).attr("belvoly-behavior-data-url");
			if (url) {
				BM.appointment.webview.open(url);
			}
			else {
				BM.log("belvoly-behavior-data-url 没有值");
			}

		});
		controls.attr("belvoly-isbehavior", "true");
	}

	BM.Behavior = Behavior;


	$(function () {
		// 页面初始化绑定所有行为控件
		new BM.Behavior().bind();
	});

})();





(function ($) {

    BM.regional = [];

    BM.regional[""] = BM.regional["zh-CN"] = {
        prompt: "提示",
        del: "删除",
        data: "数据",
        someThingSaving: "{0}保存中..",
        confirmToDoSomeThing: "确定要{0}吗？"
    }

    var culture = BM.registerNameSpace("CultureInfo");

    culture.Current = new function () {
        var _name = "zh-CN";

        /**
          * 获取当前的语言文化名称
          * @method get
          */
        this.get = function () {
            return _name;
        }

        /**
          * 设置当前的语言文化
          * @method set
          * @param {String} name 语言文化名称
          */
        this.set = function (name) {
            _name = name;
        };

        /**
          * 获取公共的本地资源
          * @method getCommonRegional
          */
        this.getCommonRegional = function () {
            return this.getRegional(BM.regional);
        }

        /**
         * 获取当前本地化资源
         * @method getRegional
         * @param {json} regional 所有的语言资源
         */
        this.getRegional = function (regional) {
            return regional[this.get()] || regional[""];
        }
    }



})(jQuery);
(function () {


    /**
     * 相关Menu菜单类集合
     * @module Menu
     * @module BM
     */
	var menu = BM.registerNameSpace("Menu");


    /**
     * 弹出菜单
     * @method actionMenu
     * @param {jQElement} target
     * @param {JSON} options
     * @param {JSON} [options.left] 箭头离左边距离
     * @param {JSON} [options.right] 箭头离右边距离
     *
     */
	var actionMenu = function (target, options) {
		if (!target || target.length < 0) {
			alert("BM.menu.actionMenu参数不能为空");
			return;
		}

		var options = $.extend(true, {
            /**
             * 箭头离左边的距离
             */
		    left: null,
		    /**
             * 箭头离右边的距离
             */
            right: null
		}, options);

		var html = $('<div class="popmenu" style="display:none;z-index:9000;">\
                                    <span class="popmenu-arrow"></span>\
									<div class="popmenu-items"></div>\
									<div class="shadow"></div>\
								</div>');
		var $root = html;
		$("body").append($root);
		var $popmenArrow = $(".popmenu-arrow", $root);


		if (options.right) {
		    $popmenArrow.css("right", options.right);
		} else if (options.left) {
		    $popmenArrow.css("left", options.left);
        }


		$(".popmenu-items", html).append(target);

		$(".shadow", html).click(function () {
			html.hide();
		});

        /**
         * 隐藏菜单
         * @method hide
         */
		this.hide = function () {
			html.hide();
		};

        /**
         * 显示菜单
         * @method show
         */
		this.show = function () {
			html.show();
		};

        /**
         * 显示隐藏菜单，如果隐藏是可见的，切换为隐藏的；如果隐藏是隐藏的，切换为可见的。
         * @method toggle
         */
		this.toggle = function () {
			html.toggle();
		};

		return this;
	}

	menu.actionMenu = function (target, options) {
		return new actionMenu(target, options);
	}

	BM.menu = menu;
})();
(function () {

    /**
     * 相关 Web 界面的类集合
     * @module Beyondbit.Web
     * @submodule Web
     */
    var Web = BM.registerNameSpace("Web");

    /**
     * Web 各种弹出框效果
     * @class MessageBox
     * @static
     */
    var MessageBox = BM.registerNameSpace("Web.MessageBox");

    var CUE_ICONS = {
        WARNING: "fa-exclamation-circle",
        SUCCESS: "fa-check-circle",
        ERROR: "fa-times-circle"
    };

    function getMessageBoxID(suffix) {
        return "messagebox_" + suffix;
    }


    function Cue() {
        var that = this;
        var id = getMessageBoxID("cue"),
            $cue;

        var interval = null;
        this.show = function (message, icon) {
            init();
            icon = icon || "WARNING";
            $cue.attr("class", "messagebox-cue messagebox-cue-{0}".bformat(icon.toLowerCase()));
            $cue.find(">div>div>span").html("<i class='fa {0}'></i>".bformat(CUE_ICONS[icon])).end()
                .find(">div>div>div").html(message);

            $cue.show();

            if (interval) {
                clearTimeout(interval);
            }
            interval = setTimeout(function () {
                that.hide();
            }, 2000);
        };

        this.hide = function () {
            $cue.slideUp();
        };

        function init() {
            var $messageBoxCue = $("#" + id);

            if ($messageBoxCue.length == 0) {
                $messageBoxCue = render();
            }

            $cue = $messageBoxCue;
        }

        function render() {
            var $messageBoxCue = $('<div id="' + id + '" class="messagebox-cue" style="display: none;"></div>');
            $("body").append($messageBoxCue);
            $messageBoxCue.append("<div class='messagebox-cue-body'><div><span></span><div></div></div></div>");

            bindEvent($messageBoxCue);

            return $messageBoxCue;
        }

        function bindEvent($cue) {
        }
    };

    var cue = new Cue();

    /**
      * 提示框，在页面头部显示的提示框
      * @method cue
      * @static
      * @param {String} [message] 提示内容
      * @param {String} [state] 提示的状态 三种选择, "WARNING" 警告、"ERROR" 错误、"SUCCESS" 成功. @default WARNING
      * @example
      *
      *     Beyondbit.Web.MessageBox.cue("消息");
      *
      *     Beyondbit.Web.MessageBox.cue("陈功","SUCCESS");
      */
    MessageBox.cue = function (message, icon) {
        cue.show(message, icon);
    };


    BM.MessageBox = MessageBox;

})();



(function () {

    var MESSAGE_TEXT = {
        messages: {
            ok: "确定",
            cancel: "取消",
            yes: "是",
            no: "否",
            close: "关闭"
        },
        sysTips: {
            title: "系统提示",
            loadingContent: "正在加载.."
        }
    };

    var MESSAGE_ICON = {
        SUCCESS: "fa-check",
        ERROR: "fa-times",
        INFO: "fa-info",
        QUESTION: "fa-question",
        WARNING: "fa-warning",
        LOADING: "fa-spinner fa-spin"
    };

    var MESSAGE_STYLE = {
        SUCCESS: "success",
        ERROR: "error",
        INFO: "info",
        QUESTION: "question",
        WARNING: "warning",
        LOADING: "loading"
    };

    function MessageDialog(options) {

        var options = $.extend({
            id: "gloabid",
            title: "",          // 标题
            content: null,      // 内容，如果此不为空，则为文本内容显示，否则为Ifame方式显示
            btns: null,         // 按钮集合，可系统按钮，或者自定义一个按钮集合，自定方格式为["确定","取消"]
            icon: null,         // 图标，可系统图标，或者自定义一个图片地址,
            closeBtn: { show: true, callback: null, defindValue: null },    // 是否显示关闭按钮
            width: 400,
            maxHeight: 500,
            shadow: true,      //是否阴影
            draggable: false,     //是否拖动
            className: null
        }, options);

        var that = this;
        var element = renderHtml(options);

        var initData = { root: element.root, rootShadow: element.rootShadow, options: options };
        // 初始化封装

        this.init(initData);

        this.hide = function () {
            element.root.hide();
            element.rootShadow.hide();

            return that;
        };

        this.show = function () {
            element.root.show();
            // 是否需要遮挡层
            if (options.shadow) {
                element.rootShadow.show();
            } else {
                element.rootShadow.hide();
            }

            return that;
        };

        this.de

        that.show();

        return that;
    };

    MessageDialog.prototype.init = function (initdata) {
        var sender = this;
        var options = initdata.options;
        var root = initdata.root;
        var rootShadow = initdata.rootShadow;
        root.attr("class", "messagebox" + (" " + (options.className || "")));

        var _zindex = BM.Web.get_zIndex();
        rootShadow.css("z-index", _zindex);
        root.css("z-index", _zindex);

        // 是否需要关闭按钮
        if (options.closeBtn.show) {
            root.find(" > .close").off("click").click(function () {
                var closeReturn = true;
                if (options.closeBtn.callback) { closeReturn = options.closeBtn.callback.call(sender, options.closeBtn.defindValue); }
                if (!(closeReturn == false)) {
                    sender.hide();
                }
                return false;
            });
        } else {
            root.find(" > .close").hide();
        }

        // 是否可拖动
        if (options.draggable && root.draggable && sender.draggableDone != true) {
            $(" > .shead > h4", root).css({ cursor: "move" });
            root.draggable({ cursor: "move", handle: "> .shead > h4", containment: "window" });
            sender.draggableDone = true;
        }

        root.find(" > .shead > h4").html(options.title || "&nbsp;");



        $(".scontent", root).html(options.content);

        // load buttons
        var $foot = $(".sfoot", root).html("");
        if (options.btns && options.btns.length > 0) {
            $foot.show();
            $.each(options.btns, function (i, v) {
                var $btn = $('<a href="#" class="btn {className}"><i class="fa {icon}"></i>{text}</a>'
                        .bformat({
                            text: v.text,
                            icon: v.iconclass || v.icon,
                            className: v.isDefault == true ? "btn-default" : ""
                        })
                    ).click(function () {
                        var closeReturn = true;
                        if (v.callback) { closeReturn = v.callback.call(sender, v.defindValue); }
                        if (!(closeReturn == false)) {
                            sender.hide();
                        }
                        return false;
                    });
                $foot.append($btn);
            });
        } else {
            $foot.hide();
        };

    };


    function renderHtml(options) {
        var id = "messagebox_" + options.id;
        var idShadow = id + "_shadow";

        // 初始化HTML
        var root = $("#" + id);
        if (root.length == 0) {
            var $shadow = BM.Shadow.renderJElement();
            $shadow.attr("id", idShadow).css("z-index", BM.Web.get_zIndex());

            $("body").append($shadow);
            $("body").append(
                    ' <div class="messagebox" id="' + id + '" style="z-index:' + BM.Web.get_zIndex() + '">'
                    + '     <section class="shead"><h4>&nbsp;</h4></section>'
                    + '     <a href="" class="close" title="关闭"><i class="fa fa-close"></i></a>'
                    + '     <section class="sbody">'
                    + '         <div class="scontent"></div>'
                    + '     </section>'
                    + '    <section class="sfoot"></section>'
                    + '</div>')
            root = $("#" + id);
        }

        var rootShadow = $("#" + idShadow);


        return {
            root: root,
            rootShadow: rootShadow
        };
    }


    var MessageBox = BM.registerNameSpace("MessageBox");


    /**
      * 弹出消息框，等同alert效果
      * @method alert
      * @static
      * @param {String} [title] 标题
      * @param {String} [message] 消息内容
      * @param {String} [btnText] 按钮文字 @default "确定"
      * @param {String} [icon] 提示的Icon图标 @default "info"
      * @param {Fun} [onSuccess] 点击确定后的回调事件
      * @example
      *
      *     Beyondbit.Web.MessageBox.alert("消息");
      *
      *     Beyondbit.Web.MessageBox.alert("消息标题","消息内容");
      *
      *     Beyondbit.Web.MessageBox.alert("消息标题","消息内容","按钮文字");
      *
      *     // 显示不同的图标
      *     Beyondbit.Web.MessageBox.alert("消息标题","消息内容","按钮文字","fa-warning");
      *
      *     // 最后一个参数是Fun，则都为回调函数
      *     Beyondbit.Web.MessageBox.alert("消息标题","消息内容","按钮文字","fa-warning",function(){
      *         alert("点击确定了");
      *     });
      *
      *     Beyondbit.Web.MessageBox.alert("消息标题","消息内容","按钮文字",function(){
      *         alert("点击确定了");
      *     });
      *
      *     Beyondbit.Web.MessageBox.alert("消息标题","消息内容",function(){
      *         alert("点击确定了");
      *     });
      */
    MessageBox.alert = function (title, message, text, style, onsuccess) {
        var unqueid = "alert";
        var _title, _message, _style, _text;
        var callback;
        var length = arguments.length;
        if (length > 1) {
            if (arguments[length - 1] && $.isFunction(arguments[length - 1])) {
                callback = arguments[length - 1];
                switch (length) {
                    case 2:
                        _message = title;
                        break;
                    case 3:
                        _title = title;
                        _message = message;
                        break;
                    case 4:
                        _title = title;
                        _message = message;
                        _text = text;
                        break;
                    default:
                        _title = title;
                        _message = message;
                        _text = text;
                        _style = style;
                        break;
                }
            }
            else {
                _title = title;
                _message = message;
                _style = style
                _text = text;
            }
        }
        else {
            _message = title;
        }
        _title = _title || MESSAGE_TEXT.sysTips.title;
        _text = _text || MESSAGE_TEXT.messages.ok;
        _style = _style || MESSAGE_ICON.INFO;

        var className = "";
        $.each(MESSAGE_STYLE, function (key, value) {
            if (key == _style) {
                _style = value;
                className = "messagebox-" + key.toLowerCase();
            }
        });

        var alertCallback = function () {
            if (callback) {
                callback();
            }
        };

        return new MessageDialog({
            id: unqueid,
            content: _message,
            title: _title,
            btns: [{
                isDefault: true,
                text: _text,
                callback: alertCallback
            }],
            draggable: true,
            closeBtn: { show: false, callback: alertCallback, defindValue: null },
            className: className
        });
    };

    /**
      * 是、否选择框，返回True/False结果，等同confirm效果
      * @method confirm
      * @static
      * @param {String} [title] 标题
      * @param {String} [message] 消息内容
      * @param {Array} [btnText] 按钮文字 @default " ["确定","取消"]  "
      * @param {String} [icon] 提示的Icon图标 @default " question "
      * @param {Fun} [onSuccess] 点击按钮后的回调事件
      * @example
      *
      *     Beyondbit.Web.MessageBox.confirm("消息");
      *
      *     Beyondbit.Web.MessageBox.confirm("消息标题","消息内容");
      *
      *     Beyondbit.Web.MessageBox.confirm("消息标题","消息内容",["是","否"]);
      *
      *     // 显示不同的图标
      *     Beyondbit.Web.MessageBox.confirm("消息标题","消息内容",["确定","取消"],"warning");
      *
      *     // 最后一个参数是Fun，则都为回调函数
      *     Beyondbit.Web.MessageBox.confirm("消息标题","消息内容",["是","否"],"warning",function(result){
      *         if(result==true){
      *            alert("点击了确定");
      *         }else{
      *            alert("点击了取消");
      *         }
      *     });
      *
      *     Beyondbit.Web.MessageBox.confirm("消息标题","消息内容",["是","否"],function(){
      *         alert("点击了");
      *     });
      *
      *     Beyondbit.Web.MessageBox.confirm("消息标题","消息内容",function(){
      *         alert("点击了");
      *     });
      */
    MessageBox.confirm = function (title, message, text, style, onsuccess) {
        var unqueid = "confirm";

        var _title, _message, _text, _style;
        var callback;
        var length = arguments.length;
        if (length > 1) {
            if (arguments[length - 1] && $.isFunction(arguments[length - 1])) {
                callback = arguments[length - 1];
                switch (length) {
                    case 2:
                        _message = title;
                        break;
                    case 3:
                        _title = title;
                        _message = message;
                        break;
                    case 4:
                        _title = title;
                        _message = message;
                        _text = text;
                        break;
                    default:
                        _title = title;
                        _message = message;
                        _text = text;
                        _style = style;
                        break;
                }
            }
            else {
                _title = title;
                _message = message;
                _text = text;
                _style = style;
            }
        }
        else {
            _message = title;
        }
        _text = _text || [MESSAGE_TEXT.messages.ok, MESSAGE_TEXT.messages.cancel];
        _style = _style || MESSAGE_STYLE.QUESTION


        var confirmCallback = function (flag) {
            if (callback) {
                callback(flag);
            }
        }

        return new MessageDialog({
            id: unqueid,
            content: _message,
            title: _title,
            draggable: true,
            btns: [
                {
                    text: _text[1],
                    callback: confirmCallback,
                    defindValue: false
                },
                {
                    text: _text[0],
                    callback: confirmCallback,
                    defindValue: true,
                    isDefault: true
                }
            ],
            closeBtn: { show: false, callback: confirmCallback, defindValue: false }
        });
    };

    MessageBox.customize = function (title, message, buttons, style, onsuccess) {
        var unqueid = "customize";

        var _title, _message, _buttons, _style;
        var callback;
        var length = arguments.length;
        if (length > 1) {
            if (arguments[length - 1] && $.isFunction(arguments[length - 1])) {
                callback = arguments[length - 1];
                switch (length) {
                    case 2:
                        _message = title;
                        break;
                    case 3:
                        _title = title;
                        _message = message;
                        break;
                    case 4:
                        _title = title;
                        _message = message;
                        _buttons = buttons;
                        break;
                    default:
                        _title = title;
                        _message = message;
                        _buttons = buttons;
                        _style = style;
                        break;
                }
            }
            else {
                _title = title;
                _message = message;
                _buttons = buttons;
                _style = style;
            }
        }
        else {
            _message = title;
        }
        _buttons = _buttons || [];
        _style = _style || MESSAGE_STYLE.QUESTION;




        var customizeCallback = function (flag) {
            if (callback) {
                callback(flag);
            }
        }

        _buttons = $.map(_buttons, function (buttton) {
            return {
                text: buttton.text,
                callback: customizeCallback,
                defindValue: buttton.value,
                isDefault: buttton.isDefault == true
            }
        });

        return new MessageDialog({
            id: unqueid,
            content: _message,
            title: _title,
            draggable: true,
            btns: _buttons,
            closeBtn: { show: false, callback: customizeCallback, defindValue: false }
        });
    }

    MessageBox.toast = function (title, icon, message, closeSpeed, closeFn) {
        var unqueid = "toast";
        var _closeSpeed, _closeFn, _title, _message;
        if ($.isNumeric(title)) {
            // 如果第一个参数为数字，则为关闭时间
            _closeSpeed = title;
            _closeFn = message;
        } else {
            if (title == false) {
                // 关闭Loading窗口
                $("#" + unqueid).hide();
                return true;
            }
            _title = title;
            _message = message || "";
            _closeSpeed = closeSpeed; _closeFn = closeFn;
        }

        // 显示Loading窗口
        if (_closeSpeed) {
            setTimeout(function () {
                var closeReturn = true;
                if (_closeFn) {
                    closeReturn = _closeFn();
                }
                if (!(closeReturn == false)) {
                    BM.MessageBox.toast(false);
                }
            }, _closeSpeed);
        }
        var zindex = BM.Web.get_zIndex();
        var html = $("#" + unqueid);
        if (html.length == 0) {
            $("body").append('<div id="' + unqueid + '" class="mask xs-mask" >'
                            + '  <div class="icon-success"><i></i></div>'
                            + '  <p class="xs-mask-text"></p>'
                            + '</div>');
            html = $("#" + unqueid);
        }
        html.css("z-index", zindex);
        var iconStr = "";
        switch (icon) {
            case MESSAGE_STYLE.SUCCESS:
                iconStr = "fa fa-check";
                break;
            case MESSAGE_STYLE.ERROR:
                iconStr = "fa fa-times";
                break;
            case MESSAGE_STYLE.INFO:
                iconStr = "fa fa-info";
                break;
            case MESSAGE_STYLE.QUESTION:
                iconStr = "fa fa-question";
                break;
            case MESSAGE_STYLE.WARNING:
                iconStr = "fa fa-warning";
                break;
            case MESSAGE_STYLE.LOADING:
                iconStr = "fa fa-spinner fa-pulse fa-fw";
                break;
            default:
                iconStr = icon || "";
                break;
        }
        html.find(">div.icon-success>i").prop("class", iconStr);
        html.css("z-index", zindex).find(">p.xs-mask-text").html(_message);
        html.show();
    };

    /**
      * 显示加载效果
      * @method loading
      * @static
      * @param {String|Boolean} [title][isHide] 标题【此值如果为false，则隐藏loading效果】
      * @param {String} [message] 消息内容 @default " 加载中.. "
      * @param {Number} [closeSpeed] 自动关闭隐藏的时间，单位毫秒. 设置此值后，会在closeSpeed毫秒后自动闭关隐藏
      * @param {Fun} [closeFn] 关闭后的回调事件
      * @example
      *
      *     // 显示Loading效果
      *     BM.MessageBox.loading();
      *
      *     BM.MessageBox.loading("标题","加载中")
      *
      *     // 1S后自动隐藏
      *     BM.MessageBox.loading("标题","加载中",1000)
      *
      *     // 隐藏Loading效果
      *     BM.MessageBox.loading();
      *
      */
    MessageBox.loading = function (title, message, closeSpeed, closeFn) {
        var _message = message || MESSAGE_TEXT.sysTips.loadingContent;
        BM.MessageBox.toast(title, MESSAGE_STYLE.LOADING, _message, closeSpeed, closeFn);
    };

    MessageBox.loadingPartial = function (target, show) {
        var $target = $(target);
        if (show) {
            $target.wrap("<div class='loading-partial'></div>");
            $target.after("<div class='loading-partial-container'></div>")
        }
        else {
            $target.siblings(".loading-partial-container").remove();
            $target.unwrap();
        }
    };

})();

(function () {
    var MessageBox = BM.registerNameSpace("MessageBox");
    var loadingPageID = "belvoly_loadingPage";

    MessageBox.loadingPage = function (isShow) {
        var content = $("." + loadingPageID);
        if (content.length <= 0) {
            content = $('<div class="loading-page ' + loadingPageID + '"></div>');
            $("body").append(content);
        }
        if (isShow) {
            content.show();
        }
        else {
            content.hide();
        }
    }
})();
(function ($, B) {

    // 选中模式
    var g_SelectMode = {
        // 单选
        SINGLE: "single",
        // 多选
        MULTIPE: "multiple"
    };

    var g_FilterArgmentName = {
        // 用户过滤器
        excludedUsers: "excludedUsers",
        // 组织机构过滤器
        excludedOrgs: "excludedOrgs"
    };

    var platform = "";
    var useWebSolution = true;
    BM.ready(function () {
        BM.appointment.driver.getLaster(function (driver) {
            platform = driver.platform;
            useWebSolution = platform != "android" && platform != "ios";
        })
    });

    /**
      * 对象选择器命名空间
      * @module Beyondbit.OPicker
	  * @submodule OPicker
      *
      */
    var opicker = B.registerNameSpace("OPicker");

    opicker.regional = [];

    opicker.regional[""] = opicker.regional["zh-CN"] = {
        service: {
            notAllowRegisterCodeEmpty: "注册Code不能为空",
            repeatRegistered: "重复注册服务标识:{0}",
            useNotRegisteredCode: "使用无注册服务标识:{0}"
        },
        title: "对象选择器",
        notSetObjectCode: "没有填写选择对象Codes",
        defaultNamesLengthNotEqualValuesLength: "默认值的name和value的长度不一致!",
        buttons: {
            ok: "确定",
            clear: "清除",
            cancel: "取消"
        },
        search: {
            title: "搜索",
            placeholder: "输入关键字检索"
        },
        select: {
            selected: "已选择",
            up: "向上",
            down: "向下"
        }
    }

    var OPICKER_DATA_KEY = "Opicker_data";

    function getRegional() {
        return opicker.regional[B.CultureInfo.Current.get()];
    }

    /**
     * @class Opicker
     *
     */

    /**
	  * 选择
	  * @method select
	  * @param {json} options 选项请参考属性值
	  * @static
	  * @example
	  *
	  *     <html>
	  *          <div>
	  *               <button class="btn" type="button" id="btnSelectUser">
	  *                   <i class="fa fa-male"></i>
	  *                   选择用户
	  *               </button>
	  *
	  *               <input type="text" name="name" value="" id="txtName" />
	  *               <input type="text" name="name" value="" id="txtValue" />
	  *           </div>
	  *
	  *
	  *           <div>
	  *               <button class="btn" type="button" id="btnSelectUser2">
	  *                   <i class="fa fa-male"></i>
	  *                   选择用户2
	  *               </button>
	  *
	  *               <input type="text" name="name" value="" id="txtName2" />
	  *               <input type="text" name="name" value="" id="txtValue2" />
	  *           </div>
	  *     </html>
	  *
	  *     <script>
	  *          $(function () {
	  *               $("#btnSelectUser2").click(function () {
	  *                   B.OPicker.select({
	  *                       title: "<i class='fa fa-male'></i> 选择用户",
	  *                       objectCodes: ["orguser"],
	  *                       associatedNameControl: $("#txtName2"),
	  *                       associatedValueControl: $("#txtValue2")
	  *                   });
	  *               });
	  *
	  *
	  *               $("#btnSelectUser").click(function () {
	  *                   B.OPicker.select({
	  *                       title: "<i class='fa fa-male'></i> 选择用户",
	  *                       objectCodes: ["orguser", "roleuser"],
	  *                       defaultValue: {
	  *                           name: $("#txtName").val(),
	  *                           value: $("#txtValue").val()
	  *                       },
	  *                       onSelectedValue: function (data) {
	  *                           $("#txtName").val(data.name);
	  *                           $("#txtValue").val(data.value);
	  *                       }
	  *                   });
	  *               });
	  *           })
	  *     </script>
	  */
    opicker.select = function (options) {
        if (useWebSolution) {
            opicker.init(options);
        }
        else {
            openPopupOPicker(options);
        }
    };


    /*
     *
     */
    var OPICKER_CONFIG = {
        registerServiceUrls: []
    };

    /**
     * 对象选择器全局配置
     * @method config
     * @param {json} options 配置
     */
    opicker.config = function (options) {
        var options = $.extend(true, {}, {
            registerServiceUrls: []
        }, options);

        if (options.registerServiceUrls.length > 0) {
            OPICKER_CONFIG.registerServiceUrls = OPICKER_CONFIG.registerServiceUrls.concat(options.registerServiceUrls)
        }
    };

    opicker.init = function (options) {
        new OPicker(options);
    }

    function openPopupOPicker(options) {
        getDefaultSelect(options);

        var remoteOptions = getRemoteOptions(options);
        remoteOptions.registerServiceUrls = remoteOptions.registerServiceUrls || OPICKER_CONFIG.registerServiceUrls;

        var popupOptions = {
            url: BM.getEntireUrl("/Select/OPicker"),
            title: options.title,
            data: remoteOptions,
            isNeedProgressBar: false,
            onClose: function (result) {
                if (result) {
                    onOpickerOkHandle(options, result);
                }
            }
        };
        BM.appointment.webview.popup(popupOptions);
    }

    /**
     * 格式化字符串到选择数据数组
     */
    opicker.formatData = function (textString, valueString, splitChar) {
        splitChar = splitChar || ',';
        var result = new Array();
        if (textString && valueString) {
            var textArray = textString.split(splitChar);
            var valueArray = valueString.split(splitChar);
            for (var i = 0; i < textArray.length; i++) {
                result.push({
                    data: {
                        name: textArray[i],
                        value: valueArray[i]
                    }
                });
            }
        }
        return result;
    }

    // #region 服务

    // 保存所有注册的services
    var _services = {};

    /**
      * 注册服务
      * @method registerService
      * @static
      * @param {String} code 服务标识，不能注册重复标识，重复抛异常
      * @param {String} name 显示名称
      * @param {String} serviceUrl 服务地址
      * @param {Fun} [dataFilter ] 调用成功后，过滤数据
      * @example
      *
      *    B.OPicker.registerService("user", http://service.beyondbit.com/user/get");
      *
      */

    opicker.registerService = function (code, title, serviceUrl, dataFilter) {
        var serviceCode = code;
        if (!arguments[0]) {
            throw Error(getRegional().service.notAllowRegisterCodeEmpty);
        }
        var service;
        var firstArgumentType = $.type(arguments[0]);
        if (firstArgumentType === "string") {
            service = {
                code: serviceCode,
                title: title,
                url: serviceUrl
            };
        } else if ($.isFunction(arguments[0])) {
            //TODO: 延迟加载注册功能
        }
        else {
            service = arguments[0];
            serviceCode = service.code;
        }

        if (_services[serviceCode]) {
            throw Error(getRegional().service.repeatRegistered.bformat(serviceCode));
        }


        _services[serviceCode] = $.extend(true, {},
            {
                /*
                 * 数据过滤事件
                 * @event dataFilter
                 * @param {object} 过滤的数据项
                 */
                dataFilter: function (item) {
                    return item;
                },
                /*
                 * 获取静态数据数据源
                 * @event getStaticDataSource
                 */
                getStaticDataSource: function () { return null; },
                getSearchUrl: function (config) {
                    if (this.searchUrl) {
                        return this.getUrl(config, this.searchUrl);
                    }
                },
                /*
                 * 获取服务Url事件
                 * @event getUrl
                 * @param {json} config
                 * @param {string} url[default=this.url] 要包装的Url默认为当前url属性
                 */
                getUrl: function (config, url) {
                    return url || this.url;
                },
                /*
                 * 是否显示图标
                 * @event showIcon
                 * @param {object} 数据项
                 */
                showIcon: function (item) {
                    return true;
                },
                nodeDataConvert: function (data) {
                    return {
                        id: data.id,
                        text: data.name,
                        value: data.value,
                        opened: data.open || false,
                        canSelected: !data.nocheck,
                        hasChildren: data.isParent,
                        childrens: data.nodes,
                        data: data
                    };
                },
                convert: function (data) {
                    if ($.isArray(data)) {
                        var list = new Array();
                        for (var i = 0; i < data.length; i++) {
                            list.push(this.nodeDataConvert(data[i]));
                        }
                        return list;
                    }
                    else {
                        return [this.nodeDataConvert(data)];
                    }
                },
                setParam: function (data, container) {
                    container.code = data.value;
                }
            },
            service
         );
    };

    /**
      * 获取一个服务
      * @static
      * @private
      * @method getService
      * @param {String} code 服务标识，标识未注册抛异常
      * @example
      *
      *    B.OPicker.getService("user");
      *
      */

    opicker.getService = function (code) {
        var service = _services[code];
        if (!service) {
            throw Error(getRegional().service.useNotRegisteredCode.bformat(code));
        }
        return service;
    }

    // #endregion

    var getDefaultOptions = function () {
        return {
            id: "opicker",
            /**
              * 选择器标题
              * @property title
              * @type String
              * @default "对象选择器"
              */
            title: getRegional().title,
            /**
             * 选择对象Code集合, 目前只注册orguser,roleuser
             * @property objectCodes
             * @type Array(String)
             * @default [];
             * @requires
             */
            objectCodes: [],

            objects: [],
            /**
              * 多选值的分隔符
              * @property splitChar
              * @type {String}
              * @default ","
              */
            splitChar: ",",
            /**
              * 选择模式，单选还是多选. 0为多选, 1为单选
              * @property selectMode
              * @type Number
              * @default 0
              */
            selectMode: 0,
            /**
             * 默认值 .格式{name:"dd,dd1", value:"22,33"};
             * @property defaultValue
             * @type {json}
             */
            defaultValue: null,
            /**
             * 联动名称控件,提供默认选中文本和选中完成后放置文本的控件
             * @property associatedNameControl
             * @type jQuery
             */
            associatedNameControl: null,
            /**
             * 联动值控件，提供默认选中值和选中完成后放置值的控件
             * @property associatedValueControl
             * @type jQuery
             */
            associatedValueControl: null,
            /**
              * 选择完成事件
              * @event onSelectedValue
              * @param {Json} datas 返回选择的数据对象
              * @param {String} datas.name 名称
              * @param {String} datas.value 值
              * @param {Array[String]} datas.names 名称数组
              * @param {Array[String]} datas.values 值数组
              * @param {Array[json]} datas.nodes 完整数据对象数组
              */
            onSelectedValue: null,
            /**
			  * 关闭选择事件
			  * @event onClose
			  */
            onClose: null,
            /**
			  * 用户过滤器
			  * @param String 需要过滤的UserUID字符串（以,分割）
			  */
            excludedUsers: null,
            /**
			  * 组织机构过滤器
			  * @param String 需要过滤的OrgCode字符串（以,分割）
			  */
            excludedOrgs: null
        }
    }

    var getRemoteOptions = function (options) {
        var remoteOptions = jQuery.extend(true, {}, options);
        remoteOptions.associatedNameControl = null;
        remoteOptions.associatedValueControl = null;
        return remoteOptions;
    }

    var getDefaultSelect = function (options) {
        if (!options.defaultSelect) {
            var defaultName, defaultValue;
            if (options.defaultValue) {
                defaultName = options.defaultValue.name,
                defaultValue = options.defaultValue.value
            }
            else {
                if (options.associatedValueControl) {
                    defaultValue = options.associatedValueControl.val();
                }
                if (options.associatedNameControl) {
                    defaultName = options.associatedNameControl.val();
                }
            }

            options.defaultSelect = convertSelectedDataToInnerData(opicker.formatData(defaultName, defaultValue, options.splitChar));
        }
        return options.defaultSelect;
    }

    function OPicker(options) {
        options = $.extend(true, getDefaultOptions(), options);

        var renderHtml = function (options) {
            var titleHTML = "";
            var bodyClass = "";
            if (useWebSolution) {
                titleHTML = '<div class="TreeList-head">\
                            <div class="TreeList-btn-close"><i class="fc fc-close"></i></div>\
                            <h2 class="TreeList-title"></h2>\
                            <div class="TreeList-btn-ok">\
                                <span class="TreeList-btn-ok-text">确定</span>\
                                (<span class="TreeList-btn-ok-total">0</span>)\
                            </div>\
                        </div>';
            }
            else {
                bodyClass = "TreeList-nohead";
            }
            return $('<div id="{0}" style="z-index:{2};position:relative">\
                    <div class="TreeList-container">\
                        {3}\
                        <div class="TreeList-body {1}"></div>\
                        <div class="TreeList-selected">\
                            <div class="pull-top">\
                                <i class="fc fc-direction-up"></i>\
                            </div>\
                            <div class="TreeList-selected-container">\
                                <ul></ul>\
                            </div>\
                        </div>\
                     </div>\
                  </div>'.bformat(options.id, bodyClass, BM.Web.get_zIndex(), titleHTML));
        }

        var setTitle = function (title) {
            if (useWebSolution) {
                $(".TreeList-title", container).html(title);
            }
            else {
                BM.appointment.webview.setTitle(title);
            }
        }

        var addSelected = function (data, single) {
            var selectedContainer = $(".TreeList-selected-container > ul", container);
            if (single) {
                selectedContainer.children().each(function () {
                    var li = $(this);
                    var itemData = { text: li.attr("text"), value: li.attr("value") };
                    removeSelected(itemData);
                });
            }
            var html = $('<li text="{0}" value={1}>{0}</li>'.bformat(data.text, data.value));
            html.click(function () {
                var item = $(this);
                var data = { text: item.attr("text"), value: item.attr("value") };
                removeSelected(data);
            });
            html.data("node", data);
            selectedContainer.append(html);
            updateSelectedTotal();

            if ($(".TreeList-selected", container).is(".show-all")) {
                selectedContainer.scrollTop(selectedContainer[0].scrollHeight);
            }
            else {
                selectedContainer.scrollLeft(selectedContainer[0].scrollWidth);
            }
        }

        var removeSelected = function (data) {
            var checkbox = $(".node-check[text='{0}'][value='{1}']".bformat(data.text, data.value), container);
            toggleCheckbox(checkbox, false);
            $('.TreeList-selected-container > ul > li[text="{0}"][value="{1}"]'.bformat(data.text, data.value), container).remove();
            updateSelectedTotal();
        }

        var updateSelectedTotal = function () {
            var selectedList = $(".TreeList-selected-container > ul > li", container);
            if (useWebSolution) {
                $(".TreeList-btn-ok-total", container).html(selectedList.length);
            }
            else {
                BM.appointment.webview.changeTextToolbar("TreeList-btn-ok", "确定({0})".bformat(selectedList.length));
            }
        }

        var bindShowAllResult = function () {
            var selectedContainer = $(".TreeList-selected", container);
            var hammer = new Hammer(selectedContainer[0]);
            hammer.get('swipe').set({ direction: Hammer.DIRECTION_ALL });
            hammer.on("swipeup swipedown", function (ev) {
                if (ev.type == "swipeup") {
                    showSelectedInFullSreen.call(selectedContainer);
                }
                else {
                    showSelectedInNormal.call(selectedContainer);
                }
            });
            $(".TreeList-selected > .pull-top", container).click(function () {
                var that = $(this);
                var TreeListSelected = that.parent();
                if ($("> i ", that).is(".fc-direction-up")) {
                    showSelectedInFullSreen.call(TreeListSelected);
                }
                else {
                    showSelectedInNormal.call(TreeListSelected);
                }
            });

            function showSelectedInFullSreen() {
                var that = $(this);
                that.addClass("show-all");
                $(".pull-top > i", that).removeClass("fc-direction-up").addClass("fc-direction-down");
                var height = $(window).height() - 70;
                that.animate({ height: height }, 300);
            }
            function showSelectedInNormal() {
                var that = $(this);
                that.removeClass("show-all");
                $(".pull-top > i", that).removeClass("fc-direction-down").addClass("fc-direction-up");
                that.animate({ height: 54 }, 300);
            }
        }

        var bindEvent = function () {
            if (useWebSolution) {
                bindHTMLButtonEvent()
            }
            else {
                bindAppButtonEvent();
            }
            bindShowAllResult();
        }

        var bindHTMLButtonEvent = function () {
            $(".TreeList-btn-ok", container).click(function () {
                onOpickerOkHandle(options, getOKResult());
                that.empty();
                that.hide();
            });
            $(".TreeList-btn-close", container).click(function () {
                that.empty();
                that.hide();
            });
        }

        var bindAppButtonEvent = function () {
            BM.appointment.webview.addTextToolbar("TreeList-btn-ok", "确定(0)", function () {
                BM.appointment.webview.closePopup(getOKResult());
            })

        }

        var toggleCheckbox = function (checkbox, checked) {
            if (checked) {
                checkbox.removeClass("fc-circle").addClass("fc-circle-right-filled").addClass("blue");
            }
            else {
                checkbox.removeClass("fc-circle-right-filled").removeClass("blue").addClass("fc-circle");
            }
        }

        var getSelectedData = function () {
            var selectedList = $(".TreeList-selected-container > ul > li", container);
            var result = selectedList.map(function () {
                return {
                    text: $(this).attr("text"),
                    value: $(this).attr("value")
                };
            }).toArray();
            return result;
        }

        var getOKResult = function () {
            var selectedList = $(".TreeList-selected-container > ul > li", container);
            var names = selectedList.map(function () {
                return $(this).attr("text");
            }).toArray();
            var values = selectedList.map(function () {
                return $(this).attr("value");
            }).toArray();
            var nodeData = selectedList.map(function () {
                return $(this).data("node").data;
            }).toArray();
            return {
                name: names.join(options.splitChar),
                value: values.join(options.splitChar),
                names: names,
                values: values,
                nodes: nodeData
            };
        }

        var that = this;

        var defaultSelect = getDefaultSelect(options);

        options.objects = options.objects || [];
        var objects = options.objects;
        if (options.objectCodes) {
            $.each(options.objectCodes, function (i, code) {
                objects.push({ code: code });
            });
        }

        if (objects.length == 0) {
            throw new Error(getRegional().notSetObjectCode);
        }
        var single = options.selectMode == 1;
        var services = opicker.getService(options.objects[0].code);
        var serviceObject = options.objects[0];
        serviceObject.config = $.extend(true, {}, services.config, serviceObject.config);
        var dataSource = convertZTreeDataToData(services.getStaticDataSource(serviceObject.config, serviceObject));

        var container = $("#" + options.id);
        if (container.length <= 0) {
            container = renderHtml(options);
            $("body").append(container);
            bindEvent();
        }
        setTitle(options.title);

        that.hide = function () {
            container.remove();
        }

        that.empty = function () {
            $(".TreeList-body", container).empty();
            $(".TreeList-selected-container > ul", container).empty();
            updateSelectedTotal();
        }

        that.setTitle = function (title) {
            setTitle(title);
        };

        //初始化选中数据
        for (var i = 0; i < defaultSelect.length; i++) {
            addSelected(defaultSelect[i], single);
        }


        var treeOptions = {
            target: $(".TreeList-body", container),
            url: services.getUrl(serviceObject.config, services.url),//获取数据的URL
            data: {},//获取数据时的参数
            dataType: "jsonp",
            rootCode: services.config.rootOrgCode,
            source: dataSource,
            event: {
                onLoadData: function (data, optionData) {
                    var result = {};
                    result[B.Tenant.ACCESS_TOKEN_IDENTITY] = B.Tenant.getCurrentAccessToken();
                    if (options.excludedUsers) {
                        result[g_FilterArgmentName.excludedUsers] = options.excludedUsers;
                    }
                    if (options.excludedOrgs) {
                        result[g_FilterArgmentName.excludedOrgs] = options.excludedOrgs;
                    }
                    if (data) {
                        services.setParam(data, result);
                    }
                    return result
                },
                onBindItem: function (item) {
                    var newItem = services.dataFilter(item, serviceObject.config);
                    return services.nodeDataConvert(newItem);
                },
                onAppendNodeComplete: function (itemHtml, data) {
                    if (!data.canSelected) {
                        return;
                    }
                    var inSelectedData = false;
                    var selectedData = getSelectedData();
                    for (var i = 0; i < selectedData.length; i++) {
                        var item = selectedData[i];
                        if (item.text == data.text && item.value == data.value) {
                            inSelectedData = true;
                            break;
                        }
                    }
                    if (inSelectedData) {
                        toggleCheckbox($(".node-check", itemHtml.eq(0)), true);
                    }
                },
                onItemClick: function (data, tree) {
                    if (data.hasChildren && !data.canSelected) {
                        BM.Controls.Tree.toggleNode.call(tree, data);
                        return;
                    }
                    var checkbox = $(".node-check", this);
                    if (checkbox.length < 0) {
                        return;
                    }

                    var checked = checkbox.is(".fc-circle");
                    toggleCheckbox(checkbox, checked);
                    if (checked) {
                        addSelected(data, single);
                    }
                    else {
                        removeSelected(data);
                    }
                }
            },
            handle: {
                renderItemHtml: function (data) {
                    var checkHtml = "";
                    if (data.canSelected) {
                        checkHtml = '<span class="pull-right">\
                                            <i class="node-check fc fc-circle" text="{0}" value="{1}"></i>\
                                    </span>'.bformat(data.text, data.value);
                    }
                    return '<h4>\
                                <span class="text-ellipsis span-container">{0}</span>{1}\
                            </h4>'.bformat(data.text, checkHtml);
                }
            }
        };
        BM.Controls.Tree.create(treeOptions).show();
        container.show();
    }

    var onOpickerOkHandle = function (options, result) {
        if (options.associatedNameControl) {
            options.associatedNameControl.val(result.name);
        }
        if (options.associatedValueControl) {
            options.associatedValueControl.val(result.value);
        }
        if (options.onSelectedValue) {
            options.onSelectedValue(result);
        }
    }

    var convertSelectedDataToInnerData = function (selectedData) {
        var result = new Array();
        for (var i = 0; i < selectedData.length; i++) {
            result.push({
                text: selectedData[i].data.name,
                value: selectedData[i].data.value
            });
        }
        return result;
    }

    function convertZTreeDataToData(ztreeData) {
        var data = [];
        if (!ztreeData) {
            return data;
        }

        $.each(ztreeData, function (index, item) {
            var newItem = convertZTreeDataItemToDataItem(item);
            var parentId = item.parentId;
            var parentData = findParentData(parentId, data);
            if (parentData) {
                parentData.isParent = true;
                parentData.nodes.push(newItem);
            } else {
                data.push(newItem);
            }
        });

        return data;
    };

    function convertZTreeDataItemToDataItem(item) {
        item.nodes = [];
        item.parentId = item.parentId || 0;
        if (!item.id) {
            item.id = BM.getIdentity();
        }
        return item;
    };

    function findParentData(parentId, data) {
        var resultData = null;

        $.each(data, function (index, item) {
            if (item.id == parentId) {
                resultData = item;
            }
            else {
                if (item.nodes && item.nodes.length > 0) {
                    resultData = findParentData(parentId, item.nodes);
                }
            }

            if (resultData) {
                return false
            }
        });

        return resultData;
    }

})(jQuery, BM);

(function ($, B) {


    var _defaultServiceHost = "http://192.168.6.11:1020/Portal/SharedService";
    // _defaultServiceHost = "http://localhost:2109";

    function getEntireServiceUrl(url) {
        if (url.indexOf("http://") == 0) {
            return url;
        }
        return (window.SharedServiceHost || _defaultServiceHost) + url;
    }


    var opicker = B.registerNameSpace("OPicker");

    opicker.regional["zh-CN"].services = {
        orgUser: {
            title: "按部门"
        },
        roleUser: {
            title: "按角色"
        },
        org: {
            title: "部门"
        },
        role: {
            title: "角色"
        },
        source: {
            title: "选择"
        },
        orgDeputy: {
            title: "选择机构代表",
            notConfigHierarchyCode: "没有配置hierarchyCode参数"
        }
    };

    function getRegional() {
        return opicker.regional[B.CultureInfo.Current.get()];
    }

    // #region 注册系统默认提供服务

    /**
     * 按部门选择用户服务
     * @class OrgUserService
     *
     */
    opicker.registerService({
        code: "orguser",
        /**
		  * 标题
		  * @property title
		  * @type String
		  * @default "按部门"
		  */
        title: getRegional().services.orgUser.title,
        /**
         * 配置
         * @property config
         * @type json
         */
        config: {
            /**
             * 是否显示根元素
             * @property config.isShowRoot
             * @type Boolean
             * @default false
             */
            isShowRoot: false,
            /**
             * 根部门Code
             * @property config.rootOrgCode
             * @type String
             */
            rootOrgCode: null
        },
        searchUrl: getEntireServiceUrl("/api/OrgAndUserQuery"),
        url: getEntireServiceUrl("/api/OrgAndUser"),
        dataFilter: function (item, config) {
            if (config.isShowRoot == true) {
                item.open = true;
            }
            if (item.isParent || (item.nodes != null && item.nodes.length > 0)) {
                item.nocheck = true;
            };
            return item;
        },
        getUrl: function (config, url) {
            var url = new B.Url(url || this.url);

            if (config.rootOrgCode) {
                url.appendKey("rootCode", config.rootOrgCode);
            }
            if (config.isShowRoot == true) {
                url.appendKey("isIncludeRoot", config.isShowRoot);
            }

            return url.toString();
        }
    });

    /**
     * 按角色选择用户服务
     * @class RoleUserService
     *
     */
    opicker.registerService({
        code: "roleuser",
        /**
		  * 标题
		  * @property title
		  * @type String
		  * @default "按角色"
		  */
        title: getRegional().services.roleUser.title,
        /**
         * 配置
         * @property config
         * @type json
         */
        config: {
            /*
             * 是否显示根元素
             * @property config.isShowRoot
             * @type Boolean
             * @default false
             */
            isShowRoot: false,
            /**
             * 指定的角色Code
             * @property config.code
             * @type String
             */
            code: null,
            /**
             * 指定的App Code
             * @property config.appCode
             * @type String
             */
            appCode: null
        },
        url: getEntireServiceUrl("/api/RoleAndUser"),
        dataFilter: function (item, config) {
            if (item.isParent || (item.nodes != null && item.nodes.length > 0)) {
                item.nocheck = true;
            };
            return item;
        },
        getUrl: function (config, url) {
            var url = new B.Url(url || this.url);
            if (config.code) {
                url.appendKey("code", config.code);
            }
            if (config.appCode) {
                url.appendKey("appCode", config.appCode);
            }
            return url.toString();
        }
    });

    /**
     * 选择部门服务
     * @class OrgService
     *
     */
    opicker.registerService({
        code: "org",
        /**
        * 标题
        * @property title
        * @type String
        * @default "部门"
        */
        title: getRegional().services.org.title,
        /**
         * 配置
         * @property config
         * @type json
         */
        config: {
            /*
             * 是否显示根元素
             * @property config.isShowRoot
             * @type Boolean
             * @default false
             */
            isShowRoot: false,
            /**
             * 根部门Code
             * @property config.rootOrgCode
             * @type String
             */
            rootOrgCode: null
        },
        url: getEntireServiceUrl("/api/Org"),
        showIcon: function (item) {
            return false;
        },
        dataFilter: function (item, config) {
            if (config.isShowRoot == true) {
                item.open = true;
            }
            return item;
        },
        getUrl: function (config, url) {
            var url = new B.Url(url || this.url);

            if (config.rootOrgCode) {
                url.appendKey("rootCode", config.rootOrgCode);
            }
            if (config.isShowRoot == true) {
                url.appendKey("isIncludeRoot", config.isShowRoot);
            }

            return url.toString();
        }
    });


    /**
     * 选择角色服务
     * @class RoleService
     *
     */
    opicker.registerService({
        code: "role",
        /**
          * 标题
          * @property title
          * @type String
          * @default "按角色"
          */
        title: getRegional().services.role.title,
        /**
         * 配置
         * @property config
         * @type json
         */
        config: {
            /**
             * 指定的App Code
             * @property config.appCode
             * @type String
             */
            appCode: null
        },
        url: getEntireServiceUrl("/api/Role"),
        getUrl: function (config, url) {
            var url = new B.Url(url || this.url);

            if (config.appCode) {
                url.appendKey("appCode", config.appCode);
            }

            return url.toString();
        }
    });

    /**
	  * 自定义数据源选择服务
	  * @class SourceService
	  *
	  */
    opicker.registerService({
        code: "source",
        title: getRegional().services.source.title,
        /**
          * 数据源
          * @property source
          * @type Array[Node]
          * @default []
          */
        source: [],
        /*
          * 配置
          * @property config
          * @type json
          */
        config: {

        },
        getStaticDataSource: function (config, object) {
            return object.source;
        }
    });

    // #endregion


    // #region 机构代表服务

    opicker.registerService({
        code: "orgdeputy",
        title: getRegional().services.orgDeputy.title,
        url: getEntireServiceUrl("/OrgDeputy/Org"),
        config: {
            hierarchyCode: null
        },
        showIcon: function (item) {
            return false;
        },
        dataFilter: function (item, config) {
            if (config.isShowRoot == true) {
                item.open = true;
            }
            return item;
        },
        getUrl: function (config) {
            var url = new B.Url(this.url);

            if (!config.hierarchyCode) {
                throw Error(getRegional().services.orgDeputy.notConfigHierarchyCode);
            }
            url.appendKey("hierarchyCode", config.hierarchyCode);

            if (config.rootOrgCode) {
                url.appendKey("rootCode", config.rootOrgCode);
            }
            if (config.isShowRoot == true) {
                url.appendKey("isIncludeRoot", config.isShowRoot);
            }

            return url.toString();
        }
    })

    // #endregion

})(jQuery, BM);
(function () {

    /**
     * Position 位置信息
     * @class Position
     * @module BM
     * @static
     */

    function Position() {

        /**
         * 选择位置
         * @method select
         * @param {JSON} options 选项
         * @param {Function} options.onClose 关闭回调方法
         * @param {Function} options.onOk  确定回调方法
         */
		this.select = function (options) {
			BM.appointment.webview.popup({
				id: "selectAddress",
				title: "选择地址",
				url: BM.Config.position.url,
				onClose: options.onClose,
				onOk: options.onOk
			});
		};

        /**
         * 确定选择位置
         * @method ok
         * @param {object} 返回的数据
         */
		this.ok = function (data) {
		    BM.appointment.webview.closePopup(data);
		};

        /**
         * 关闭选择位置
         * @method close
         */
		this.close = function () {
		    BM.appointment.webview.closePopup();
		};


	};


	function getPopup() {
	    return BM.appointment.webview.findPopup("selectAddress");
	}

	BM.Position = new Position();
})();
(function () {

    /**
     * 选择视图
     * @class SelectView
     * @module BM
     * @static
     */

    function SelectView() {
        var that = this;

        this.options = null;

        var defaultOptions = {
            /**
             * 总可选择元素数量
             * @property totalCount
             * @type Number
             */
            totalCount: 0,
            /**
             * 选择按钮的方向. left 或 right
             * @property direction
             * @type String
             * @default left
             */
            direction: null,
            /**
              * 选择视图已经打开准备好的事件
              * @event onReady
              */
            onReady: null,
            /**
              * 确定方式关闭视图事件
              * @event onOk
              * @param {JSON} data 调用ok方法返回的数据
              */
            onOk: null,
            /**
              * 取消方式关闭视图事件
              * @event onCancel
              * @param {JSON} data 调用cancel方法返回的数据
              */
            onCancel: null,
            /**
              * 关闭视图事件
              * @event onClose
              * @param {String} code 关闭的方式
              * @param {JSON} data 调用cancel方法返回的数据
              */
            onClose: null,
            /**
              * 点击了全选按钮后事件
              * @event onAllSelected
              */
            onAllSelected: null,
            /**
              * 点击了取消全选按钮后事件
              * @event onAllSelected
              */
            onAllUnSelected: null
        };


        /**
         * 显示选择视图
         * @method show
         * @param {JSON} options 参考options选项
         */
        this.show = function (options) {

            var options = this.options = $.extend(true, {}, defaultOptions, options);

            options.onClosed = function (event) {
                var code = event.data.code;
                var data = event.data.data;
                if (data) {
                    data = JSON.parse(data);
                }

                if (code == "ok") {
                    options.onOk && options.onOk.call(that, data);
                }

                if (code == "cancel") {
                    options.onCancel && options.onCancel.call(that, data);
                }

                options.onClose && options.onClose.call(that, code, data);
            };

            var names = {
                "ready": "onReady",
                "closed": "onClosed",
                "allSelected": "onAllSelected",
                "allUnselected": "onAllUnSelected"
            };

            BM.appointment.selectView.registerEventHandler(function (event) {
                var callbackName = names[event.name];
                options[callbackName] && options[callbackName].call(that, event);
            });

            BM.appointment.selectView.show({
                totalCount: options.totalCount,
                direction: options.direction
            });
        };

        /*
         * 设置已选择的数量. 当selectedCount == totalCount 的值，"全选"按钮会变成"取消全选"按钮，当selectedCount < totalCount "取消全选"按钮会变成"全选"按钮
         * @method setSelectedCount
         * @param {Number} count 数量
         */
        this.setSelectedCount = function (count) {
            BM.appointment.selectView.setSelectedCount(count);
        };


        /**
         * 设置总共能选择的数量，当变更数量时，当selectedCount == totalCount 的值，"全选"按钮会变成"取消全选"按钮，当selectedCount < totalCount "取消全选"按钮会变成"全选"按钮
         * @method setTotalCount
         * @param {Number} count 总数量
         */
        this.setTotalCount = function (count) {
            BM.appointment.selectView.setTotalCount(count);
        }

        /**
         * 确定关闭视图，将出发onOk事件
         * @method ok
         * @param {JSON} data 返回的数据
         */
        this.ok = function (data) {
            this.close("ok", data);
        };

        /**
         * 取消关闭视图，将出发onCancel事件
         * @method cancel
         * @param {JSON} data 返回的数据
         */
        this.cancel = function (data) {
            this.close("cancel", data);
        }

        /**
         * 关闭选择视图，将触发onClose事件
         * @method close
         * @param {String} code 关闭的code
         * @param {JSON} data 关闭传递的数据
         */
        this.close = function (code,data) {
            BM.appointment.selectView.close(code, data);
            BM.appointment.selectView.unRegisterEventHandler();
        };


    };


    function getPopup() {
        return BM.appointment.webview.findPopup("selectAddress");
    }

    BM.SelectView = new SelectView();
})();
(function ($) {

    var shadow = BM.registerNameSpace("Shadow");

    shadow.coverFlash = {
        enabled: false,
        blankUrl: "/blank.html"
    };

    shadow.renderJElement = function () {
        var html = $('<div class="shadow"></div>');

        if (shadow.coverFlash.enabled) {
            html.append('<iframe src="{0}" frameborder="0"></iframe>'.bformat(shadow.coverFlash.blankUrl));
        }

        return html;
    }

})(jQuery);
(function ($, B) {

    var tenant = B.registerNameSpace("Tenant");

    tenant.ACCESS_TOKEN_IDENTITY = "AccessToken";

    tenant.getCurrentAccessToken = function () {
        var $ACCESSUSERTOKEN = $("#TENANT_ACCESSTOKEN");
        if ($ACCESSUSERTOKEN.length > 0) {
            return $ACCESSUSERTOKEN.val();
        }
    };

})(jQuery, BM);
(function ($) {
    /**
     * Url相关
     * @module BM
     * @main BM
     * @class Url
     * @example
     *
     *
     */

    var Url;

    /**
      * Url实例
      * @class Url
      * @constructor
      * @param {String} [url=window.location.href] url字符串，默认为当前请求URL
      * @example
      *
      *     var url = BM.Url();
      *     var urlBeyondbit = BM.Url("http://www.beyondbit.com/");
      *
      */
    BM.Url = Url = function (url) {

        var url = url || window.location.href;

        var uri = parseUri(url);

        expandProperty(this, uri);


        /**
          * 获取Url中所有请求的键值对集合
          * @property request
          * @readOnly
          * @type JSON
          */
        this.request = GetRequest(url);

        /**
          * 获取Url中的键值
          * @method queryString
          * @param {string} key 换取Url中请求的键名
          * @example
          *
          *     var url = new Beyondbit.Url("http://www.baidu.com/?id=1&key=2");
          *     var value = url.queryString("key");
          *
          */
        this.queryString = function (key) {
            if (!key) {
                return "";
            }
            return this.request[key.toLowerCase()];
        };

       /**
         * 移除一个键值, 返回删除后的Url
         * @method removeKey
         * @param {String} key 要移除的键
         * @returns {String}
         */
        this.removeKey = function (key) {
            if (!key) {
                return "";
            }
            var removeRegex = new RegExp("([?&]){0}=[^&]*".bformat(key), "ig");
            url = url.replace(removeRegex, "$1");
            return url;
        };

        /**
         * 追加一个键值，返回追加完后的URL
         * @method appendKey
         * @param {String} key 增加的键
         * @param {String} value 增加的值
         * @returns {String}
         */
        this.appendKey = function (key, value) {
            if (!key) {
                return url;
            }
            var isHaveQuestion = url.indexOf("?") > -1;
            var partialUrl = "{0}{1}={2}".bformat(isHaveQuestion ? "&" : "?", key, value);
            url = url + partialUrl;
            return url;
        }



        /**
         * 输出Url的string 地址
         */
        this.toString = function () {
            return url;
        }
    };


    /**
      * 获取当前Url对象
      * @property current
      * @static
      * @public
      * @example
      *
      *     var currentUrl = BM.Url.current;
      *
      */
    Url.current = new BM.Url();

    /**
      * 返回到上一页
      * @method back
      * @static
      * @public
      * @example
      *
      *     BM.Url.back();
      *
      */
    Url.back = function () {
        window.history.back();
        return false;
    }

   /**
     * 返回到上一页并刷新
     * @method back
     */
    Url.backAndRefresh = function () {
        var referrer = document.referrer;
        if (referrer) {
            window.location.href = referrer;
        } else {
            Url.back();
        }
        return false;
    }

    /**
      * 刷新当前页面
      * @method refresh
      * @static
      * @public
      * @example
      *
      *     BM.Url.refresh();
      *
      */
    Url.refresh = function () {
        window.location.reload();
    }

    /**
      * 跳转页面
      * @method redirect
      * @param {String} url 要跳转的Url
      * @static
      * @public
      * @example
      *
      *     BM.Url.redirect("http://www.beyondbit.com");
      *
      */
    Url.redirect = function (url) {

        window.location.href = url;
    }

    /*
     * 获取Request请求键值集合
     * @param {string} url url字符串
     */
    function GetRequest(url) {
        var request = {};
        var index = url.indexOf("?");
        if (index != -1) {
            var str = url.substring(index + 1);
            strs = str.split("&");
            for (var i = 0; i < strs.length; i++) {
                var eqs = strs[i].split("=");
                var key = eqs[0].toLowerCase();
                request[key] = eqs[1] || "";
            }
        }
        return request;
    }

    function expandProperty(obj, property) {
        $.each(property, function (key, value) {
            obj[key] = value;
        });
    }

    function parseUri(url) {
        validate(url);

        url = fix(url);

        var uri = {};
        var parts = url.split('/');

        uri.scheme = parts[0].substring(0, parts[0].length - 1).toLowerCase();

        var hostAndPort = getHostAndPort(parts[2], uri.scheme == "http" ? 80 : 443);
        uri.host = hostAndPort.host;
        uri.port = hostAndPort.port;

        uri.pathAndQuery = getPathAndQuery(parts);

        var questionMarkIndex = uri.pathAndQuery.indexOf("?");
        if (questionMarkIndex == -1) {
            uri.absolutePath = uri.pathAndQuery;
        } else {
            uri.absolutePath = uri.pathAndQuery.substring(0, questionMarkIndex);
        }

        return uri;
    }

    function getPathAndQuery(parts) {
        return "/" + $.grep(parts, function (n, i) {
            return i > 2;
        }).join("/");
    }

    function getHostAndPort(hostAndPortStr, defaultPort) {
        var colonIndex = hostAndPortStr.indexOf(':');
        if (colonIndex == -1) {
            return {
                host: hostAndPortStr,
                port: defaultPort
            }
        }

        return {
            host: hostAndPortStr.substring(0, colonIndex),
            port: hostAndPortStr.substring(colonIndex + 1)
        }
    }

    function fix(url) {
        var index = url.indexOf("/");
        if (valid(url)) {
            return url;
        }

        if (index != 0) {
            url = "/" + url;
        }

        return "http://unkowndomain" + url;
    }

    function validate(url) {
        if (!url) {
            throw Error("无效的url");
        }
    }

    function valid(url) {
        return url && url.indexOf("http") > -1;
    }


})(jQuery);
(function () {
    /**
    * 相关 Web 界面的类集合
    * @module Beyondbit.Web
    * @submodule Web
    */
    var Web = BM.registerNameSpace("Web");

    var globalZindex = 100;
    /**
      * 获取ZIndex自增标识
      */
    Web.get_zIndex = function (step) {

        globalZindex = globalZindex + (step || 1);

        return globalZindex;
    };
})();
(function () {

    /**
     * 弹出窗口
     * @module BM
     * @class Window
     */


    function Window(options) {
        var _navigates = [];

        var options = $.extend({
            /**
             * 弹出窗口的标识，唯一，如果标识不唯一，则返回之前已经创建过的Window对象
             * @property id
             * @type String
             * @required
             */
            id: "",
            /**
             * 是否需要阴影遮挡层
             * @property shadow
             * @type Boolean
             * @default false
             */
            shadow: false,
            /**
             * 是否可拖动，【注意：设置为ture后，需要配合jQuery UI 实现】
             * @property draggable
             * @type Boolean
             * @default true
             */
            draggable: true,
            /**
             * 加载页面时，loading的效果. 可选的值有三种:none[无效果]、away[一直]、normal[只显示一次]
             * @property loading
             * @type String
             * @default "none"
             */
            loading: "normal",
            /**
             * 窗口的宽度，单位px，如果宽度大小超过当前浏览器可视窗口，则显示浏览器可视窗口大小
             * @property width
             * @type Number
             * @default 400
             */
            width: 400,
            /**
             * 窗口的高度，单位px，如果高度大小超过当前浏览器可视窗口，则显示浏览器可视窗口大小
             * @property height
             * @type Number
             * @default 100
             */
            height: 100,
            /**
             * 窗口显示的内容，此属性和url属性只能有一个起作用，当url为null时，此属性才有作用;
             *
             * 支持异步协议：[ajax:]/demo/details.html 则将/demo/details.html用Ajax方式加载到window 的内容div中
             *
             * @property content
             * @type jQuery
             * @example
             *
             *     // 显示文本
             *     Beyondbit.Web.WindowManager.create({
             *          id:"dialog",
             *          content:"<div>显示的内容</div>"
             *     })
             *
             *     <html>
             *          <div id="box">
             *              标题：<input type="text" />
             *          </div>
             *     </html>
             *
             *     <script>
             *         Beyondbit.Web.WindowManager.create({
             *             id:"dialogMulpex",
             *             content:$("#box").detach()
             *         });
             *
             *         // Beyondbit.Web.WindowManager.create({
             *         //    id:"dialogMulpex",
             *         //    content: [ajax:]/demo/details.html
             *         // });
             *     </script>
             */
            content: null, 		// 内容，如果此不为空，则为文本内容显示，否则为Ifame方式显示
            /**
             * 显示的标题
             * @property title
             * @type String
             */
            title: "",
            /**
             * 显示的Url
             * @property url
             * @type String
             * @example
             *
             *     Beyondbit.Web.WindowManager.create({
             *          id:"dialogUrl",
             *          url:"http://www.beyondbit.com"
             *     })
             */
            url: "", 			// iframe url
            /**
            * url 是否ajax的请求
            * @property isAjax
            * @type boolean
            *
            */
            isAjax: false,
            /**
             * 按钮集合
             * @property buttons
             * @type Array
             * @example
             *
             *     Beyondbit.Web.WindowManager.create({
             *         id:"dialog",
             *         button:[{
             *            text: "保存",
             *            icon: "save",
             *            events:{
             *              click:function(){
             *                 alert("保存了");
             *              }
             *            }
             *         }]
             *     })
             */
            buttons: [],
            data: {},
            /**
             * 水平对齐 "left,center,right"
             * @param horizontalAlign
             * @type String
             * @default center
             */
            horizontalAlign: "center",
            /**
            * 垂直对齐 "top,center,bottom"
            * @param verticalAlign
            * @type String
            * @default center
            */
            verticalAlign: "center",
            requestData: {},
            /**
             * 窗口调用show方法后，触发的事件
             * @event onShow
             * @param {jQuery} [windowRootNode] window根元素jQuery对象
             */
            onShow: null,
            /**
             * 窗口调用ok([data])方法后，返回resultCode==OK时触发的事件
             * @event onOk
             * @param {object} [data] 调用window.ok时传递的数据
             */
            onOk: null,
            /**
             * 窗口调用close([data])方法后触发的事件
             * @event onClose
             * @param {String} resultCode 调用时返回的状态码，调用ok方法，返回"ok",调用cancel返回"cancel"，其它自定义
             * @param {object} [data] 调用window.close时传递的数据
             */
            onClose: null,
            /**
             * 窗口调用cancel([data])方法后，返回resultCode==cancel时触发的事件
             * @event onCancel
             * @param {object} [data] 调用window.close时传递的数据
             */
            onCancel: null,
            /**
             * 显示动画
             * @event showAnimation
             * @param {jQuery} [element] 窗口的根Html jQuery对象
             * @param {json} [position] jQuery对象的物理空间位置及大小
             * @param {function} [complete] 动画完事件
             */
            showAnimation: null,
            /**
             * 关闭动画
             * @event closeAnimation
             * @param {jQuery} [element] 窗口的根Html jQuery对象
             * @param {json} [position] jQuery对象的物理空间位置及大小
             * @param {function} [complete] 动画完事件
             */
            closeAnimation: null,
            /**
             * ajax成功事件
             * @event onSuccess
             */
            onSuccess: null,
            /**
             * 关闭回调ID
             */
            closeCallbackId: null
        }, options);

        var loader = this;
        this.id = getWindowID(options.id);
        this.closeCallbackId = options.closeCallbackId;
        this.data = options.data;

        this._inner = { options: options };

        this.init(options);

        var $rootElement = $("#" + this.id);
        $rootElement.css("z-index", BM.Web.get_zIndex());

        this.show = function () {
            setContent($rootElement, options, options.url);

            $rootElement.show();
        };

        this.navigate = function (url, direction) {
            _navigates.push(url);
            this.showBackButton();
            setContent($rootElement, options, url)
        }

        this.back = function () {
            var url = "";
            _navigates.pop();
            if (_navigates > 0) {
                url = _navigates[_navigates.length - 1];
                setContent($rootElement, options, url);
            }
            else {
                url = options.url;
                this.showCloseButton();
                setContent($rootElement, options, url);
            }
            return url;
        }

        this.setHeadVisible = function (isVisibility) {
            if (isVisibility) {
                $rootElement.removeClass("window-nohead");
            } else {
                $rootElement.addClass("window-nohead");
            }
        }

        this.hide = function () {
            $rootElement.hide();
            return loader;
        };

        this.close = function (data) {
            if (options.onClose) {
                options.onClose.call(this, data);
            }

            this.hide();
            return this;
        };

        this.destroy = function () {
            BM.WindowManager.remove(this.id);
            $rootElement.remove();
            _navigates = null;
        };

        this.showCloseButton = function () {
            $("#window-close", $rootElement).show();
            $("#window-back", $rootElement).hide();
        }

        this.hideCloseButton = function () {
            $("#window-close", $rootElement).hide();
        }

        this.showBackButton = function () {
            $("#window-back", $rootElement).show();
            $("#window-close", $rootElement).hide();
        }

        this.hideBackButton = function () {
            $("#window-back", $rootElement).hide();
        }

        bindDefaultEvent.call(this, $rootElement);
    };


    Window.prototype.init = function () {
        var options = getOptions.call(this._inner);
        renderHtml.call(this, options);

    };

    function setContent($rootElement, options, url) {
        setTitle($rootElement, options.title);
        var isAjax = options.isAjax;
        if (isAjax) {
            var iframe = $rootElement.find("iframe");
            $(iframe).one("load", function () {
                if (!options.title || options.title == "") {
                    setTitle($rootElement, this.contentWindow.document.title);
                }
            });
            iframe.attr("src", url).show().siblings().hide();
        }
        else {
            var $container = $rootElement.find(".window-container");

            $.ajax({
                type: "GET",
                cache: false,
                url: url,
                success: function (html) {
                    $container.html(html);
                }
            });
            $container.show().siblings().hide();
        }
    }

    function setTitle($rootElement, title) {
        $("div.window-head> h1", $rootElement).html(title);
    }

    function renderHtml(options) {
        var html = '<section class="window" style="display: none;" id="{0}">\
                        <div class="window-head">\
                            <div class="window-head-left">\
                                <span id="window-close">\
                                    <i class="fc fc-close"></i>\
                                </span>\
                                <span id="window-back" style="display:none;">\
                                    <i class="fc fc-direction-left"></i>\
                                </span>\
                            </div>\
                            <h1 class="text-ellipsis"></h1>\
                        </div>\
                        <div href="#" class="window-toolbars window-toolbars-left hide"><a href="#"><i class="fa fa-chevron-left"></i></a></div>\
                        <div href="#" class="window-toolbars window-toolbars-right hide"><a href="#"><i class="fa fa-remove"></i></a></div>\
                        <div class="window-body">\
                            <iframe src="javascript:\'\'" frameborder="0" scrolling="auto"></iframe>\
                            <section class="window-container"></section>\
                        </div>\
                    </section>'.bformat(this.id);

        $("body").append(html);
    }

    function bindDefaultEvent($rootElement) {
        var that = this;
        $("#window-close", $rootElement).one("click", function () {
            that.close();
        });
        $("#window-back", $rootElement).on("click", function () {
            that.back();
        });
    }

    function getOptions() {
        return this.options;
    }

    function getWindowID(suffix) {
        return "window_" + suffix;
    }

    BM.Window = Window;
})();


(function () {

    function WindowManager() {
        var _queue = {};

        this.create = function (options) {
            var dialog = this.findByID(options.id);
            if (dialog) {
                return dialog;
            }

            dialog = new BM.Window(options);

            addWindow(options.id, dialog);

            return dialog;
        }

        this.remove = function (id) {
            delete _queue[id];
        };

        this.findByID = function (id) {
            var dialog = _queue[id];
            if (dialog) {
                return dialog;
            }
            return null;
        }

        function addWindow(id, dialog) {
            _queue[id] = dialog;
        }
    }

    BM.WindowManager = new WindowManager;
})();
(function () {
    /**
      * 扩展类集合
      * @module Extensions
      */

    /**
     * Date扩展
     * @class DateEx
     */

    /**
      * 对Date的扩展，将 Date 转化为指定格式的String
      * 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，
      * 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)
      *
      * @method bformat
      * @param {String} format 时间格式化字符串，时间Format语法
      * @example
      *
      *     (new Date()).bformat("yyyy-MM-dd hh:mm:ss.S"); //==> 2014-11-15 08:09:04.423
      *     (new Date()).bformat("yyyy-M-d h:m:s.S");      //==> 2014-11-15 8:9:4.18
      */
    Date.prototype.bformat = function (fmt, isOutputUtc) { //author: meizz

        if (isOutputUtc === true) {
            var utcDate = this.setMinutes(this.getMinutes() + this.getTimezoneOffset());
            return this.bformat(fmt, false);
        }

        var o = {
            "M+": this.getMonth() + 1, //月份
            "d+": this.getDate(), //日
            "h+": this.getHours(), //小时
            "m+": this.getMinutes(), //分
            "s+": this.getSeconds(), //秒
            "q+": Math.floor((this.getMonth() + 3) / 3), //季度
            "S": this.getMilliseconds() //毫秒
        };
        if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
        for (var k in o)
            if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
        return fmt;
    }
})();
(function ($) {

    var KBCount = 1024;
    var MBCount = KBCount * 1024;
    var GBCount = MBCount * 1024;
    var TBCount = GBCount * 1024;

    $.extend({
        GetAutoSizeString: function GetAutoSizeString(size, roundCount) {
            if (KBCount > size) {
                return size + "B";
            }
            else if (MBCount > size) {
                return (size / KBCount).toFixed(roundCount) + "KB";
            }
            else if (GBCount > size) {
                return (size / MBCount).toFixed(roundCount) + "MB";
            }
            else if (TBCount > size) {
                return (size / GBCount).toFixed(roundCount) + "GB";
            }
            else {
                return (size / TBCount).toFixed(roundCount) + "TB";
            }
        }
    });
})(jQuery);

(function () {


    /**
      * 扩展类集合
      * @module Extensions
      */

    /**
     * String扩展
     * @class StringEx
     */

    /**
      * 字符串格式化方法
      * @method bformat
      * @param {JSON|any} 参数，可以为JSON，也可以为String
      * @example
      *
      *     // string 模式
      *     "Hello，{0}！".bformat("luolong");
      *     "Hello，{0}！Welcome to {1}.".bformat("luolong","shanghai");
      *     // json 模式
      *     "Hello，{name}！Welcome to {address}.".bformat({name: "luolong",address: "shanghai"});
      */
    String.prototype.bformat = function (args) {
        var result = this;
        if (arguments.length > 0) {
            if (arguments.length == 1 && typeof (args) == "object") {
                for (var key in args) {
                    var reg = new RegExp("({" + key + "})", "g");
                    result = result.replace(reg, args[key] || "");
                }
            }
            else {
                for (var i = 0; i < arguments.length; i++) {
                    var reg = new RegExp("({[" + i + "]})", "g");
                    var value = arguments[i];
                    result = result.replace(reg, (value == null || value == undefined) ? "" : value);
                }
            }
        }
        return result;
    }

    /**
      * 转换Date字符串为日期类型
      *     解决MvcJsonResut后时间类型字符串转换为"/Date(1415787137527)/"这种格式后，转换JS日期;
      *
      * @method parseMvcDate
      * @example
      *
      *     var date = "/Date(1415787137527)/".parseToDate();
      *     var date2 = "2014-11-12".parseToDate();
      *
      */
    String.prototype.parseToDate = function () {
        var date = this;
        var index = date.indexOf("/Date");
        if (index == 0) {
            date = date.substring(6, date.length - 2);
            return new Date(date - 0);
        }

        var tIndex = date.indexOf("T");
        if (tIndex > -1) {
            date = date.replace(/-/g, "/");
            date = date.replace(/T/g, " ");
        } else {
            date = date.replace(/-/g, "/");
        }
        return new Date(date);
    }

    /**
	  * 用于把一个字符串分割成字符串数组
	  * @method splitRemoveEmptys
	  * @param {String} separator 字符串或正则表达式，从该参数指定的地方分割 stringObject
	  * @param {Number} [howmany] 该参数可指定返回的数组的最大长度
	  * @param {Boolean} [isRemoveEmptys] 可选。是否删除空字符串
	  * @returns Array
	  */
    String.prototype.splitRemoveEmptys = function (separator, howmany, isRemoveEmptys) {
        var strArray = this.split(separator, howmany || 1000);
        if (isRemoveEmptys != false) {
            isRemoveEmptys = true;
        }
        if (isRemoveEmptys) {
            for (var index in strArray) {
                if (strArray[index] != 0 && strArray[index] - 0 == 0) {
                    strArray.splice(index, 1);
                }
            }
        }
        return strArray;
    }

    String.prototype.trim = function () {
        return this.replace(/(^\s*)|(\s*$)/g, "");
    }
    String.prototype.ltrim = function () {
        return this.replace(/(^\s*)/g, "");
    }
    String.prototype.rtrim = function () {
        return this.replace(/(\s*$)/g, "");
    }
})();


(function ($) {
    var Components = BM.registerNameSpace("Components");

    var CACHE_KEY = "BM.Components.LoadMore";
    var LOAD_MORE_ROW_CONTAINER_CLASS = "loadmore-uptoloadmore";

    var HttpMethod = { Get: "get", Post: "post" };

    function getDefaultOptions() {
        return {
            pageSize: 15,
            url: "",
            urlData: null,
            data: null,
            autoLoad: false,
            panel: null,
            minDisplayItemCount: 6,
            emptyRow: defaultEmptyRow(),
            noMoreRow: defaultNoMoreRow(),
            loadMoreRow: defaultLoadMoreRow(),
            currentPageIndex: 0,
            pageIndexParamName: "pageIndex",
            pageSizeParamName: "pageSize",
            success: null,
            pageIndexChanging: null,
            /**
             * @method onResponseData
             * @param {Object} data
             * @param {Object} options
             */
            onResponseData: null,
            empty: function (options) { options.panel.empty(); },
            type: HttpMethod.Get,
            dataType: "html",
            postForm: $("form:first"),
            oAuth: {
                enabled: false
            }
        };
    }
    function defaultEmptyRow() {
        var emptyRowHtml = '<div class="list-item loadmore-emptyRow" style="text-align:center;margin-top:10%"><img src="../staticHtml/images/no-results.svg"/><p><span style="color:#666;line-height:40px">暂无数据</span></p></div>';
        return $(emptyRowHtml);
    }

    function defaultNoMoreRow() {
        var noMoreRowHtml = '<div class="list-item loadmore-noMoreData">没有更多</div>';
        return $(noMoreRowHtml);
    }

    function defaultLoadMoreRow() {
        var loadMoreRowHtml = '<div class="list-item loadmore-loadRoreRow">上拉加载更多</div>';
        return $(loadMoreRowHtml)
    }

    function makePagingUrl(options) {
        var url = new BM.Url(options.url);
        var map = {};


        for (var name in map) {
            url.appendKey(name, map[name]);
        }

        return url.toString();
    }

    Components.LoadMore = function (elem, options) {
        var that = this;
        var $target = $(elem);
        var _loding = false;
        var pagingOptions = $.extend(true,{}, getDefaultOptions(), options);
        pagingOptions.noMoreRow.hide();
        that.lastPage = false;
        this.setOptions = function (value) {
            $(pagingOptions.panel[0]).unbind("panup");
            pagingOptions = $.extend(true, {}, pagingOptions, value);
            $target.off();
            $target.on("click", that.next);
            that.lastPage = false;
            that.removeNoMoreRow();
            that.removeLoadMoreRow();
            that.hideEmptyRow();

            pagingOptions.panel.addClass("BM-LoadMore-PanUp");
            new Hammer(pagingOptions.panel[0], { domEvents: true });
            $(pagingOptions.panel[0]).on("panup", function (e) {
                var panel = this;
                if (panel.scrollTop + panel.clientHeight >= panel.scrollHeight - 20 && !_loding) {
                    that.next();
                }
            });

            if (pagingOptions.autoLoad) {
                $target.hide();
                that.doPage(0);
            }
        }

        this.getOptions = function () {
            return pagingOptions;
        }

        this.next = function () {
            if (that.lastPage) {
                return;
            }
            var newPageIndex = pagingOptions.currentPageIndex + 1;
            that.doPage(newPageIndex);
        }

        this.showEmptyRow = function () {
            var $emptyRow = $(".loadmore-emptyRow", pagingOptions.panel);
            that.removeNoMoreRow();
            that.removeLoadMoreRow();
            if (pagingOptions.emptyRow && $emptyRow.length <= 0) {
                $emptyRow = pagingOptions.emptyRow.clone();
                $emptyRow.removeClass("hidden");
                pagingOptions.panel.append($emptyRow);
            }
            $emptyRow.show();
        }

        this.hideEmptyRow = function () {
            $(".loadmore-emptyRow", pagingOptions.panel).remove();
        }


        var loadDataCompleted = function () {
            that.hideEmptyRow();
            that.removeLoadMoreRow();
        };

        this.showNoMoreRow = function () {
            loadDataCompleted();
            pagingOptions.panel.append(pagingOptions.noMoreRow);
            pagingOptions.noMoreRow.show();
            that.lastPage = true;
        }

        this.showLoadMoreRow = function () {
            loadDataCompleted();

            var loadMoreContainer = $('<div class="{0}"></div>'.bformat(LOAD_MORE_ROW_CONTAINER_CLASS));
            loadMoreContainer.append(pagingOptions.loadMoreRow);
            loadMoreContainer.on("click", function () {
                that.next();
            });
            pagingOptions.panel.append(loadMoreContainer)
        }

        this.removeLoadMoreRow = function () {
            $("." + LOAD_MORE_ROW_CONTAINER_CLASS, pagingOptions.panel).remove();
        }

        this.removeNoMoreRow = function () {
            $(".loadmore-noMoreData", pagingOptions.panel).remove();
        }

        this.updatePager = function (pageindex, pagesize, totalCount) {
            if (typeof pageindex === "object") {
                var splitResult = pageindex;
                pagesize = splitResult.pageSize;
                totalCount = splitResult.totalCount;
                pageindex = splitResult.pageIndex;
            }
            var currentPage = pageindex + 1;

            if (totalCount == 0 ) {
                that.showEmptyRow();
                that.lastPage = true;
            } else {
                that.hideEmptyRow();
                if ((pagesize * currentPage) < totalCount) {
                    $target.show();
                }
                else {
                    if (this.getOptions().minDisplayItemCount < totalCount) {
                        that.showNoMoreRow();
                    } else {
                        loadDataCompleted();
                        that.lastPage = true;
                    }
                }
            }
        }


        this.doPage = function (newPageIndex) {
            var result = that.onPageIndexChanging(newPageIndex);

            if (result === true) {
                return;
            }
            _loding = true;

            if (newPageIndex < 1) {
                if ($.isFunction(pagingOptions.empty)) {
                    pagingOptions.empty(pagingOptions);
                }
                that.lastPage = false;
            }

            pagingOptions.currentPageIndex = newPageIndex;

            var pagingUrl = makePagingUrl(pagingOptions);
            var data = $.extend(pagingOptions.urlData, pagingOptions.data);

            if (!data || $.isEmptyObject(data)) {
                data = pagingOptions.postForm.serialize();
            }
            data = data || {};

            data[pagingOptions.pageIndexParamName] = pagingOptions.currentPageIndex;
            data[pagingOptions.pageSizeParamName] = pagingOptions.pageSize;

            $target.hide();
            that.removeLoadMoreRow();
            BM.load(pagingOptions.panel, {
                url: pagingUrl,
                loadMode: "Append",
                oAuth: pagingOptions.oAuth,
                type: pagingOptions.type,
                dataType: pagingOptions.dataType,
                data: data,
                cache: false,
                beforeSend: function () {
                    BM.Web.MessageBox.loading(true);
                },
                onResponseData: function (data) {
                    if ($.isFunction(pagingOptions.onResponseData)) {
                        return pagingOptions.onResponseData.call(that, data, pagingOptions);
                    }
                },
                success: function (response) {
                    //var pagerOptions = pagingOptions.panel.find(".pager-options");
                    //var pagesize = pagerOptions.data("pagesize");
                    //var pageIndex = pagerOptions.data("currentpageindex");
                    //var totalCount = pagerOptions.data("count");
                    //pagerOptions.remove();
                    //that.updatePager(pageIndex, pagesize, totalCount);
                    that.onSuccess();
                },
                complete: function () {
                    BM.Web.MessageBox.loading(false);

                    _loding = false;
                    if (!that.lastPage) {
                        that.showLoadMoreRow();
                    }
                }
            });
        }

        this.onSuccess = function () {
            var success = pagingOptions.success;

            if ($.isFunction(success)) {
                success.call(that);
            }
        }

        this.onPageIndexChanging = function (newPageIndex) {
            var pageIndexChanging = pagingOptions.pageIndexChanging;

            if ($.isFunction(pageIndexChanging)) {
                return pageIndexChanging.call(that, pagingOptions, newPageIndex);
            }
        }
    }

    Components.LoadMore.create = function (elem, options) {
        var loadMore = new Components.LoadMore(elem, options);
        loadMore.setOptions(options);

        return loadMore;
    }

    $.fn.loadMore = function (options) {
        var $that = this;

        if ($that.length == 0) {
            return null;
        }

        var $elem = $that.eq(0);
        var component = $elem.data(CACHE_KEY);

        if (!component) {
            component = Components.LoadMore.create($elem[0], options);
            $elem.data(CACHE_KEY, component);
        }

        return component;
    }
})(jQuery);

(function ($, B) {

    var controls = B.registerNameSpace("Controls");

    var hideDropDownBox = function (box, option) {
        if (option && $.isFunction(option.onclick)) {
            option.onclick.call(option.button, false);
        }
        box.removeClass("dropdownbox-hover").hide();
        if (option.scrollBox) {
            var overflow = option.scrollBox.data(DROPDOWN_BOX_OVERFLOW_CACHE);
            option.scrollBox.css("overflow", overflow);
        }
    }

    /*
     * option:{
     *   button:object,
     *   box:object,
     *   onclick:function(isExpand){},
     *   scrollBox:object
     * }
     */
    controls.dropdownbox = function (option) {
        var that = this;
        that._option = $.extend({ button: null, box: null, onclick: null, scrollBox: null }, option);
        if (that._option.scrollBox) {
            that._option.scrollBox.data(DROPDOWN_BOX_OVERFLOW_CACHE, that._option.scrollBox.css("overflow"));
        }
        that.close = function () {
            var $targetButton = $(that._option.button);
            var isPageHasNoFootCss = getButtonIsPageHasNotFootCss($targetButton);
            if (!isPageHasNoFootCss) {
                $("body").removeClass("nofoot");
            }


            hideDropDownBox(that._option.box, that._option);
        }
        if (!that._option.button || !that._option.box) {
            throw "dropdownbox参数设置不正确";
        }

        var $targetButton = $(that._option.button);
        $targetButton.on("click", function (e) {


            if (that._option.box.is(".dropdownbox-hover")) {
                that.close();
            }
            else {
                var isPageHasNoFootCss = getButtonIsPageHasNotFootCss($targetButton);

                $(".dropdownbox-hover").each(function () {
                    hideDropDownBox($(this));
                });
                that._option.box.addClass("dropdownbox-hover").show();
                var boxOffsetTop = that._option.box.offset().top;
                that._option.box.css("height", $(window).height() - boxOffsetTop)
                                .css("overflow", "auto");
                if (that._option.scrollBox) {
                    that._option.scrollBox.css("overflow", "hidden");
                }
                if (option && $.isFunction(option.onclick)) {
                    option.onclick.call(option.button, true);
                }

                if (!isPageHasNoFootCss) {
                    $("body").addClass("nofoot");
                }
            }
        });

        var shadow = $(".shadow", that._option.box);
        if (shadow.length <= 0) {
            shadow = BM.Shadow.renderJElement();;
            that._option.box.append(shadow);
            shadow.on("click", function (e) {
                that.close();
            });
        }
        that._option.box.hide();

        that._option.box.css("z-index", BM.Web.get_zIndex());

        return that;
    };

    function getButtonIsPageHasNotFootCss($button) {
        var isPageHasNoFootCss = false;
        if ($button.data("init") == true) {
            isPageHasNoFootCss = $button.data("isPageHasNoFootCss");
        } else {
            isPageHasNoFootCss = $("body").hasClass("nofoot");
            $button.data("isPageHasNoFootCss", isPageHasNoFootCss);
            $button.data("init", true);
        }
        return isPageHasNoFootCss;
    }

    var DROPDOWN_BOX_CACHE = "dropdownbox_Cache";
    var DROPDOWN_BOX_OVERFLOW_CACHE = "dropdownbox_Overflow_cache";
    $.fn.dropdownbox = function (box, onclick, scrollBox) {
        var that = $(this);
        var dropdownbox = that.data(DROPDOWN_BOX_CACHE);
        if (!dropdownbox) {
            dropdownbox = new BM.Controls.dropdownbox({ button: that, box: box, onclick: onclick, scrollBox: scrollBox });
            that.data(DROPDOWN_BOX_CACHE, dropdownbox);
        }
        return dropdownbox;
    };
})(jQuery, BM);
(function ($, BM) {
    var controls = BM.registerNameSpace("Controls");

    var DATEPICKER_MODE = {
        Date: "date",
        DateTime: "datetime"
    };
    var DATEPICKER_INPUT_TYPE = {
        date: "date",
        datetimeLocal: "datetime-local"
    };

    var getDefaultOptions = function () {
        var options = {
            mode: DATEPICKER_MODE.Date,
            onSelect: null
        };
        return options;
    }

    controls.datepicker = function ($target, options) {
        options = $.extend(getDefaultOptions(), options);

        var mode = null
        if (options.mode == DATEPICKER_MODE.Date) {
            mode = DATEPICKER_INPUT_TYPE.date;
        }
        else {
            mode = DATEPICKER_INPUT_TYPE.datetimeLocal;
        }

        BM.ready(function () {
            BM.appointment.driver.getLaster(function (driver) {
                if (driver.platform == "web") {
                    webDatepicker($target, options, mode);
                } else {
                    appDatepicker($target, options, mode);
                }
            });

        }, function () {
            webDatepicker($target, options);
        });

    };

    function webDatepicker($target, options, mode) {
        if ($target.is("input")) {

            $target.attr("type", mode);
            $target.on("change", function (event) {
                if ($.isFunction(options.onSelect)) {
                    options.onSelect(arguments);
                }
            });
        }
    }

    function appDatepicker($target, options, mode) {
        //debugger
        var $date = $target.data("datepickerinput");

        if (!$date) {

            $date = $('<input type="{0}" style="width: 1px; height: 1px; overflow: hidden; border: none; -webkit-appearance: none; background: rgba(0,0,0,0); outline: 0; background: #fff; color: #fff;" />'.bformat(mode));
            if ($target.css("text-align") == "right") {
                $target.before($date);
            } else {
                $target.after($date);
            }


            $target.data("datepickerinput", $date);

            if ($target.is("input")) {
                $target.prop("readonly", true);
                var value = $target.val();
                if (value) {
                    //alert("v:" + value);
                    //alert("noT4:" + "2017-12-15 18:00".parseToDate());


                   // alert("haveT:" + "2017-12-15T18:00".parseToDate());
                    var date = value.parseToDate();

                    var formatValue;
                    if (mode === DATEPICKER_INPUT_TYPE.datetimeLocal) {
                        var f = date.bformat("yyyy-MM-dd hh:mm");
                        $target.val(f);
                        formatValue = date.bformat("yyyy-MM-ddThh:mm");
                    } else {
                        $target.val(date.bformat("yyyy-MM-dd"));
                        formatValue = date.bformat("yyyy-MM-dd");
                    }



                    $date.val(formatValue);
                }
            }


            //$target.attr("type", mode);
            $date.on("change", function (event) {


                var format = "yyyy-MM-dd";
                if (mode === DATEPICKER_INPUT_TYPE.datetimeLocal) {
                    format = "yyyy-MM-dd hh:mm";
                }


                //alert($date.val());

                var value = $date.val().parseToDate().bformat(format);

                $target.val(value);

                $target[0].dispatchEvent(new Event('input'));

                if ($.isFunction(options.onSelect)) {
                    options.onSelect(arguments);
                }
            });
        }

        $target.on("click", function () {
            $date.trigger("focus");
            $date.trigger("click");
        });
    }

    $.fn.DateSelector = function (options) {
        if (this.length == 0) { return this; }
        options = $.extend(true, {}, {}, options);
        this.each(function (index, item) {
            var $this = $(item);
            BM.Controls.datepicker($this, options);
        });
    };
})(jQuery, BM);
(function ($, BM) {
    var controls = BM.registerNameSpace("Controls");
    var getDefaultOption = function () {
        return {
            groupTitle: null,
            box: null,
            onCurrentChange: function (currentTitle) { }
        };
    }
    var GROUP_LIST_MARK = "belovly_groupList";

    var isIOS = false;

    BM.ready(function () {
        BM.appointment.driver.getLaster(function (data) {
            isIOS = data.platform == "ios";
        });
    });

    controls.groupList = function (option) {
        var _option = $.extend(getDefaultOption(), option);
        if (!_option.groupTitle || _option.groupTitle.length <= 0) {
            throw "必须指定分组标题对象";
        }
        if (!_option.box) {
            throw "必须指定滚动容器box";
        }
        if (isIOS) {
            _option.groupTitle.addClass("sticky");
        }
        var currentIndex = 0;
        var box = _option.box;
        var stop = getBoxTop(box);
        var groupTitleList = new Array();
        _option.groupTitle.each(function () {
            var title = $(this);
            var offset = title.offset();
            var data = {
                title: title,
                triggerPoint: offset.top - stop
            };
            groupTitleList.push(data);
        });
        var titleContainer = initContainer(_option);
        var lastIndex = -1;

        $(box).attr(GROUP_LIST_MARK, "").bind("touchmove scroll", function () {
            var boxScroll = box.scrollTop();
            var currentIndex = getCurrentTitleIndex(boxScroll, groupTitleList);
            if (!isIOS) {
                pinTitle(titleContainer, groupTitleList, currentIndex, boxScroll);
            }
            if (currentIndex != lastIndex) {
                lastIndex = currentIndex;
                if (currentIndex != -1) {
                    _option.onCurrentChange(groupTitleList[currentIndex].title);
                }
            }
        });
    };

    var getBoxTop = function (box) {
        switch ($.type(box)) {
            case "object":
                return $(box).offset().top;
            case "number":
                return box;
            default:
                return 0;
        }
    }

    var getCurrentTitleIndex = function (scroll, source) {
        if (source.length == 1) {
            if (scroll > source[0].triggerPoint) {
                return 0;
            }
            return -1;
        }

        var index = 0;
        for (; index < source.length; index++) {
            var current = source[index];
            if (scroll > current.triggerPoint && index < source.length - 1 && scroll < source[index + 1].triggerPoint) {
                return index;
            }
        }
        if (index == 0 && source.length > 1) {
            return source.length - 1;
        }
        else {
            return -1;
        }
    }

    var initContainer = function (option) {
        var firstTitle = option.groupTitle.eq(0);
        var stop = getBoxTop(option.box);
        var titleContainer = firstTitle.clone();
        unpinTitle(titleContainer);
        var div = $("<div></div>");
        div.css("position", "fixed")
			.css("top", stop)
            .css("left", firstTitle.offset().left)
            .css("height", firstTitle.height())
            .css("width", firstTitle[0].clientWidth)
            .css("overflow", "hidden");
        titleContainer
            .css("position", "absolute")
            .css("width", firstTitle[0].clientWidth);
        firstTitle.before(titleContainer);
        titleContainer.wrap(div);
        return titleContainer;
    }

    var pinTitle = function (titleContainer, groupTitleList, currentIndex, scroll) {
        if (currentIndex < 0) {
            unpinTitle(titleContainer);
            return;
        }
        var current = groupTitleList[currentIndex];
        titleContainer.html(current.title.html());
        if (currentIndex + 1 < groupTitleList.length) {
            var next = groupTitleList[currentIndex + 1];
            var nextTriggerPoint = scroll + current.title.height();
            if (nextTriggerPoint > next.triggerPoint) {
                var newTitleTop = 0 - (nextTriggerPoint - next.triggerPoint);
                titleContainer.css("top", newTitleTop);
            }
            else {
                titleContainer.css("top", 0);
            }
        }
        titleContainer.show();
    }

    var unpinTitle = function (titleContainer) {
        titleContainer.hide().empty();
    }

})(jQuery, BM);
(function ($, BM) {
	/**
     * 相关 Web 界面的类集合
     * @module Beyondbit.Controls
     * @submodule Controls
     */
    var controls = BM.registerNameSpace("Controls");

	var c = controls;

	/*
	* @description 封装Jquery Val方法封装
	* @private
	* @param {jQuery对象|HtmlElement} jElement
	* @param {Object} value 设置的value
	*/
	controls.val = function (jElement, value) {
		if (!jElement) {
			return;
		}
		if (value || $.type(value) == "string") {
			if (jElement.is("div,span")) {
				jElement.html(value);
			} else {
				jElement.val(value);
			}
			return jElement;
		} else {
			if (jElement.is("div,span")) {
				return jElement.html();
			} else {
				return jElement.val();
			}
		}
	}


	controls.makeText =
	{
        /*
         * 获取控件的文本
         */
		get: function () {
			return (c.val( this.options.selectTextToControl ) || "")
					  .splitRemoveEmptys(this.options.splitChar, null, true);
		},
        /*
         * 设置控件的文本值
         */
		set: function (value) {
			if (this.options.selectTextToControl) {
				c.val(this.options.selectTextToControl, value.name || value.text);
			}
		}
	};

	controls.makeValue =
	{
        /*
         * 获取控件的值
         */
	    get: function () {
	        var value = c.val(this.options.selectValueToControl || this.options.target);
	        if(!value && value != 0) {
                value = ""
	        }
	        return value
					.splitRemoveEmptys(this.options.splitChar, null, true);
		},
        /*
         * 设置控件的值
         */
		set: function (value) {
			c.val(this.options.target, value.value);
			if (this.options.selectValueToControl) {
				c.val(this.options.selectValueToControl, value.value);
			}
		}
	}

})(jQuery, BM);
(function ($, BM) {
    var controls = BM.registerNameSpace("Controls");
    var SCROLL_LOCK_MARK = 'belvoly_scrollLock';

    controls.scrollLock = function ($targets, box) {
        if (!box) {
            throw "必须指定滚动容器box";
        }
        var stop = getBoxTop(box);
        var triggerPoint = $targets.offset().top - stop;
        var offset = $targets.offset();
        var original = {
            position: $targets.css("position"),
            top: $targets.css("top"),
            left: $targets.css("left")
        };
        var placeholder = $("<div></div>");
        placeholder.css("width", $targets.width())
                   .css("height", $targets.height())
                   .css("position", original.position)
                   .css("top", original.top)
                   .css("left", original.left);
        placeholder.hide();
        $targets.before(placeholder);

        $(box).attr(SCROLL_LOCK_MARK, "").bind("touchmove scroll", function () {
            if (box.scrollTop() >= triggerPoint) {
                $targets.css("position", "fixed")
                        .css("top", stop)
                        .css("left", offset.left);
                placeholder.show();
            }
            else {
                $targets.css("position", original.position)
                        .css("top", original.top)
                        .css("left", original.left);
                placeholder.hide();
            }
        });
    };

    var getBoxTop = function (box) {
        switch ($.type(box)) {
            case "object":
                return $(box).offset().top;
            case "number":
                return box;
            default:
                return 0;
        }
    }

    $.fn.scrollLock = function (box) {
        if (this.length == 0) { return this; }

        this.each(function (index, item) {
            var $this = $(item);
            new BM.Controls.scrollLock($this, box);
        });
    };
})(jQuery, BM);
/*
 * Node={
 *   id:"",
 *   text:"",
 *   value:"",
 *   opened:false,
 *   canSelected:true,
 *   hasChildren:false,
 *   selected:false,
 *   childrens:[{Node}]
 * }
 */
(function ($) {
    var nodeStatus = {
        opened: "open",
        closed: "close"
    };
    var TREE_CONST = {
        TREE_DATA_KEY: {
            Tree: "Belvoly_Tree",
            Node: "Belvoly_Tree_Node"
        },
        NODE_ICON: {
            opened: "fc-arrow-down",
            closed: "fc-arrow-right"
        },
        TREE_CONTAINER_CLASS: "treeList-box",
        ASYNC_DATA_LOAD_MARK: "treelist_load"
    };
    var tree = BM.registerNameSpace("Controls.Tree");

    var getDefaultOptions = function () {
        return {
            target: null,//绑定的容器元素
            cascadeLoad: false,
            rootCode: "",//根结点Code
            data: {},//获取数据时的参数
            dataType: "json",
            type: "post",
            url: null,//获取数据的URL
            source: null,//树的数据
            event: getDefaultEvents(),
            handle: getDefaultHandle()
        };
    }
    var getDefaultEvents = function () {
        return {
            /**
             * 当载入数据时
             * @method onLoadData
             */
            onLoadData: null,
            /*
             * 当载入数据时，开启数据处理
             */
            onFilterData: function (data) {
                return data
            },
            /**
             * 当载入一个元素时
             */
            onBindItem: function(item){
                return item;
            },
            /**
             * 当数据载入完成时
             */
            onLoadDataComplete: null,
            /**
             * 当载入子节点数据时
             * @method onLoadChildNode(currentNodeData){ }
             */
            onLoadChildNode: null,
            /**
             * 当添加结点完成时
             * @method onAppendNodeComplete(itemHtml, data)
             */
            onAppendNodeComplete: null,
            /**
             * 当构建树结点内容前
             */
            onRenderItemHtml: null,
            /**
             * 当构建树结点内容完成
             */
            onRenderItemHtmlComplete: null,
            /**
             * 当显示/隐藏子项时
             */
            onToogleNode: null,
            /**
             * 当点击某项时
             */
            onItemClick: null,
        };
    }
    var getDefaultHandle = function () {
        return {
            /**
             * 构建树容器
             */
            renderHtml: renderHtml,
            /**
             * 将数据添加到容器中
             */
            appendNode: appendNode,
            /**
             * 载入数据
             */
            loadData: loadData,
            /**
             * 获取树结点头部图标
             */
            getIcon: getIcon,
            /**
             * 构建树结点内容
             */
            renderItemHtml: renderItemHtml,
            bindEvent: bindEvent
        }
    };

    var getItemKey = function (data) {
        return "{0}-{1}".bformat(TREE_CONST.TREE_CONTAINER_CLASS, data.id);
    }
    var getChildContainerKey = function (data) {
        return "{0}-{1}-container".bformat(TREE_CONST.TREE_CONTAINER_CLASS, data.id);
    }

    var renderHtml = function () {
        this._options.target.html('<div class="list-box flex {0}"></div>'.bformat(TREE_CONST.TREE_CONTAINER_CLASS));
    }

    var renderItemHtml = function (data) {
        if ($.isFunction(this._options.event.onRenderItemHtml)) {
            if (this._options.event.onRenderItemHtml.call(this._options, data) === false) {
                return;
            }
        }
        var html = '<h4>\
                        <span class="text-ellipsis span-container">{0}</span>\
                    </h4>'.bformat(data.text);
        if ($.isFunction(this._options.event.onRenderItemHtmlComplete)) {
            this._options.event.onRenderItemHtmlComplete.call(this._options, html, data);
        }
        return html;
    }

    var bindEvent = function (item) {
        var that = this;
        $(" > dl > dt", item).click(function () {//绑定箭头事件
            var data = $(this).data(TREE_CONST.TREE_DATA_KEY.Node)
            toggleNode.call(that, data);
        });
        $(" > dl > dd", item).click(function () {
            var data = $(this).siblings("dt").data(TREE_CONST.TREE_DATA_KEY.Node)
            if (data.hasChildren) return;
            if ($.isFunction(that._options.event.onItemClick)) {
                that._options.event.onItemClick.call(this, data, that);
            }
        });
    }

    var getIcon = function (data, options) {
        if (data.hasChildren) {
            var iconClass;
            if (data.opened && ((data.childrens && data.childrens.length > 0) || options.cascadeLoad)) {
                iconClass = TREE_CONST.NODE_ICON.opened;
            }
            else {
                iconClass = TREE_CONST.NODE_ICON.closed;
            }
            return $('<span><i class="fc {0} text-assistant" ></i></span>'.bformat(iconClass));
        }
        else {
            return $('<span style="width:16px;display:block;"></span>');
        }
    }

    var appendNode = function (node, data) {
        var that = this;
        var container = null;
        var options = that._options;
        var childContainerKey = getChildContainerKey(data);
        if (!node) {
            container = $(".{0}".bformat(TREE_CONST.TREE_CONTAINER_CLASS), that._options.target);
        }
        else {
            container = $(".{0}".bformat(getChildContainerKey(node)), that._options.target);
        }
        var level = container.attr("level") - 0 || 0;
        var item = $('<div class="list-item {0}">\
                          <dl>\
                              <dt></dt>\
                              <dd></dd>\
                          </dl>\
                      </div>\
                      <div class="{1}" level="{2}"></div>'
                   .bformat(getItemKey(data), childContainerKey, (level + 1)));

        container.append(item);
        var itemDataHtml = $("." + getItemKey(data).replace("@", "\\@"), container);
        itemDataHtml.css("padding-left", (12 + level * 20) + 'px');

        //创建箭头部分的html
        var arrow = $("dt", item);
        arrow.append(getIcon(data, options));
        if (data.opened && ((data.childrens && data.childrens.length > 0) || options.cascadeLoad)) {
            that._options.handle.loadData.call(that, data);
        }
        else {
            arrow.attr(TREE_CONST.ASYNC_DATA_LOAD_MARK, "");
            data.opened = false;
        }
        arrow.data(TREE_CONST.TREE_DATA_KEY.Node, data);

        //创建内容部分html
        $("> dl > dd", item).html(that._options.handle.renderItemHtml.call(that, data));

        that._options.handle.bindEvent.call(that, itemDataHtml);
        if ($.isFunction(that._options.event.onAppendNodeComplete)) {
            that._options.event.onAppendNodeComplete.call(that._options, item, data);
        }
    };

    var removeAsyncLoadMark = function (node) {
        $(".{0} > dl > dt".bformat(getItemKey(node)), this.target).removeAttr(TREE_CONST.ASYNC_DATA_LOAD_MARK);
    }

    var toggleNode = function (node) {
        var that = this;
        var _options = that._options;
        var childContainerKey = getChildContainerKey(node);
        var arrow = $(".{0} > dl > dt".bformat(getItemKey(node)), _options.target);
        var childContainer = $("." + childContainerKey, _options.target);

        if ($.isFunction(_options.event.onToogleNode)) {
            if (_options.event.onToogleNode.call(_options, node, !node.opened) === false) {
                return;
            }
        }

        if (node.opened) {
            node.opened = false;
            $("i", arrow).addClass(TREE_CONST.NODE_ICON.closed)
                            .removeClass(TREE_CONST.NODE_ICON.opened);
            childContainer.hide();
        }
        else {
            node.opened = true;
            $("i", arrow).addClass(TREE_CONST.NODE_ICON.opened)
                            .removeClass(TREE_CONST.NODE_ICON.closed);
            if (arrow.is("[treelist_load]")) {
                if ($.isFunction(_options.event.onLoadChildNode)) {
                    var result = _options.event.onLoadChildNode.call(_options, node);
                    if (result === false) {
                        return;
                    }
                }
                removeAsyncLoadMark.call(_options, node);
                _options.handle.loadData.call(that, node);
            }
            childContainer.show();
        }
    }

    var loadData = function (node) {
        if (node && !node.hasChildren) {
            return;
        }

        var that = this;
        var _options = that._options;

        if (node && $.isArray(node.childrens) && node.childrens.length > 0) {//如果有同步数据则加载同步数据
            var datas = node.childrens;
            if ($.isFunction(_options.event.onBindData)) {
                datas = _options.event.onBindData(datas)
            }
            for (var i = 0; i < datas.length; i++) {
                var data = _options.event.onBindItem(datas[i]);
                _options.handle.appendNode.call(that, node, data);
            }
            if ($.isFunction(_options.event.onLoadDataComplete)) {
                _options.event.onLoadDataComplete.call(_options, node, datas);
            }
            return;
        }

        //加载异步数据
        var id = _options.rootCode;
        if (node) {
            id = node.id;
        }
        var queryparam = $.extend({ id: id }, _options.data)
        if ($.isFunction(_options.event.onLoadData)) {
            var data = _options.event.onLoadData.call(_options, node, _options.data);
            if (data === false) {
                return;
            }
            queryparam = data;
        }
        $.ajax({
            url: _options.url,
            type: _options.type,
            dataType: _options.dataType,
            data: queryparam,
            beforeSend: function () {
                BM.Web.MessageBox.loading(true);
            },
            success: function (result) {
                var datas = _options.event.onFilterData(result);


                if ($.isFunction(_options.event.onBindData)) {
                    datas = _options.event.onBindData(datas)
                }

                for (var i = 0; i < datas.length; i++) {
                    var data = _options.event.onBindItem(datas[i]);
                    _options.handle.appendNode.call(that, node, data);
                }

                if ($.isFunction(_options.event.onLoadDataComplete)) {
                    _options.event.onLoadDataComplete.call(_options, node, datas);
                }
            },
            complete: function () {
                BM.Web.MessageBox.loading(false);
            }
        });
    }

    var buildTree = function (options) {
        var that = this;
        that._options = $.extend(true, getDefaultOptions(), options);

        that.setOptions = function (options) {
            $.extend(that._options, options);
        }

        that.show = function () {
            var source = that._options.source;
            if (source && $.isArray(source) && source.length > 0) {
                for (var i = 0; i < source.length; i++) {
                    var data = that._options.event.onBindItem(source[i]);
                    that._options.handle.appendNode.call(that, null, data);
                }
            }
            else {
                that._options.handle.loadData.call(that);
            }
            $(".{0}".bformat(TREE_CONST.TREE_CONTAINER_CLASS), that._options.target).show();
        }

        that.hide = function () {
            $(".{0}".bformat(TREE_CONST.TREE_CONTAINER_CLASS), that._options.target).hide();
        }

        that.empty = function () {
            $(".{0}".bformat(TREE_CONST.TREE_CONTAINER_CLASS), that._options.target).empty();
        }
        if (!that._options.target) {
            throw "options.target is null";
        }
        that._options.handle.renderHtml.call(that);
        that.hide();

        return that;
    }

    tree.create = function (options) {
        var tree = options.target.data(TREE_CONST.TREE_DATA_KEY.Tree)
        if (tree) {
            return tree;
        }
        tree = new buildTree(options);
        return tree;
    }

    tree.toggleNode = toggleNode;
})(jQuery);
/// <reference path="Beyondbit.Controls.js" />
(function ($, B) {

    /**
     * 扩展jQuery对象集合
     * @module jQuery
     *
     */

    /**
      * 上传组件
      * @class Upload
      *
      */

    /**
     * 相关 Web 界面的类集合
     * @module Beyondbit.Controls
     * @submodule Controls
     */
    var controls = B.registerNameSpace("Controls");

    // 已经存在的文件ID前缀
    var EXISTS_ITEM_ID_PREVFIX = "exists_file_";

    var UPLOAD_ERROR_TYPE = {
        TIMEOUT: "timeout",
        ERROR: "error"
    };

    var UPLOAD_MODE = {
        FILE: 1,
        PICTURE: 2
    };
    var platform = "";

    BM.ready(function () {
        BM.appointment.driver.getLaster(function (driver) {
            platform = driver.platform;
        });
    });

    var c = controls;

    c.Uploader = function (options) {
        options = initOptions(options);
        var $itemscontainer = renderHtml(options);
        var $container = options.container;
        if ($container) {
            $container.append($itemscontainer);
        }
        var that = this;
        that.platform = platform;
        initUploader.call(that, options, $container, $itemscontainer);
    }

    function initUploader(options, $container, $itemscontainer) {
        var that = this;
        var webUploader;

        if (that.platform == "web" && options.isEditable == true) {
            webUploader = createBaiduUploader(options, $itemscontainer);
        }

        bindEvent.call(that, options, webUploader, $container, $itemscontainer);

        that.upload = function () {
            webUploader.upload();
        };

        that.stop = function () {
            webUploader.stop();
        }
    }


    c.Uploader.regional = [];

    c.Uploader.regional[""] = c.Uploader.regional["zh-CN"] = {
        errorMessage: {
            Q_EXCEED_NUM_LIMIT: "上传超过了最大能上传的文件数量, 最多能上传{0}个.",
            F_DUPLICATE: "文件重复上传",
            F_EXCEED_SIZE: "文件[{0}]上传失败，单个文件超过了上传文件大小限制，最大只能上传: {1}",
            Q_EXCEED_SIZE_LIMIT: "文件[{0}]上传失败，所有文件总共大小超过了允许上传大小限制，最大只能上传: {1}",
            Q_TYPE_DENIED: "文件[{0}]上传失败，上传的文件格式不支持，只允许上传后缀名为: {1}",
            OTHER: "上传出错了, 原因类型：{0}"
        },
        uploadErrorTextFormat: "上传失败：{0}",
        uploadFailText: "[失败]",
        uploadSuccessText: "上传成功",
        uploadProgressText: "上传中，当前进度: {0}%",
        uploadButtonDefaultText: "上传",
        uploadWarningTitle: "上传文件警告"

    };

    function getRegional() {
        return B.CultureInfo.Current.getRegional(c.Uploader.regional);
    }

    /**
      * 创建一个实例
      * @method create
      * @example
      *
      *     <html>
      *         <div class="uploader" id="uploader">
      *         </div>
      *     </html>
      *
      *     <script>
      *     B.Controls.Uploader.create({
      *        isEditable: true,
      *         container: $("#uploader"),
      *         swf: '../../lib/webuploader/0.1.5/Uploader.swf',
      *        server: 'http://localhost:15994/Upload/upload',
      *        items: [{
      *            name: "12345中中中中中中中中中中中中中中中中中中中我是中国中中中中中中中中中中中中中中中.docx",
      *            identity: "1",
      *            size: "12312312"
      *        }, {
      *            name: "123456.docx",
      *            identity: "2",
      *            size: "1231233123"
      *        }],
      *        accept:[{
      *            title: '图片文件',
      *            extensions: 'gif,jpg,jpeg,bmp,png',
      *            mimeTypes: 'image/*'
      *        }, {
      *            title: 'OFFICE文件',
      *            extensions: 'doc,docx,pptx,ppt,xls,xlsx',
      *            mimeTypes: 'application/*'
      *        }],
      *        fileSizeLimit: 1024000,
      *        fileSingleSizeLimit: 512000,
      *        fileNumLimit: 3,
      *        buttonText: "浏览",
      *        onRemoveFile: function (identity) {
      *            if (identity) {
      *                alert("删除文件，标识:" + identity);
      *            }
      *        }
      *     })
      *     </script>
      */
    c.Uploader.create = function (options) {
        return new c.Uploader(options);
    }

    c.Uploader.MODE = UPLOAD_MODE;

    function getWebUploaderObject() {

        if (!window.WebUploader && window.require) {
            return require('webuploader');
        }

        return WebUploader;
    }

    function createBaiduUploader(options, $itemscontainer) {

        var baiUploadConfig = createBaiduUploadConfig(options);

        var webUploader = getWebUploaderObject().create(baiUploadConfig);

        webUploader.on("error", function (type) {
            switch (type) {
                case "Q_EXCEED_NUM_LIMIT":
                    error.call(options, getRegional().errorMessage.Q_EXCEED_NUM_LIMIT.bformat(baiUploadConfig.fileNumLimit), arguments)
                    break;
                case "F_DUPLICATE": //重复文件上传
                    error.call(options, getRegional().errorMessage.F_DUPLICATE, arguments);
                    break;
                case "F_EXCEED_SIZE":
                    var fileSizeLimit = arguments[1];
                    var file = arguments[2];
                    error.call(options, getRegional().errorMessage.F_EXCEED_SIZE.bformat(file.name, formatSize(fileSizeLimit)), arguments);
                    break;
                case "Q_EXCEED_SIZE_LIMIT":
                    var fileSizeLimit = arguments[1];
                    var file = arguments[2];
                    error.call(options, getRegional().errorMessage.Q_EXCEED_SIZE_LIMIT.bformat(file.name, formatSize(fileSizeLimit)), arguments);
                    break;
                case "Q_TYPE_DENIED":
                    var file = arguments[1];

                    var acceptMessage = $.map(baiUploadConfig.accept, function (n) {
                        return "{0}[{1}]".bformat(n.title, n.extensions);
                    }).join(",");

                    error.call(options, getRegional().errorMessage.Q_TYPE_DENIED.bformat(file.name, acceptMessage), arguments);
                    break;
                default:
                    error.call(options, getRegional().errorMessage.OTHER.bformat(type), arguments);
            }

            return false;
        });

        webUploader.on("uploadError", function (file, reason) {
            uploadError(options, file, reason);

            return false;
        });

        webUploader.on("fileQueued", function (file) {
            uploadFileQueued(options, $itemscontainer, file);

            return false;
        });

        webUploader.on("filesQueued", function (files) {

            return false;
        });

        webUploader.on("uploadSuccess", function (file, response) {
            if (response.Flag == 1 || response.flag == 1) {
                uploadSuccess(options, file, response);
            } else {
                uploadError(options, file, response.Message);
            }

            return false;
        });

        webUploader.on("fileDequeued", function (file) {
            getFileJQuery(file).remove();

            return false;
        });

        webUploader.on("uploadProgress", function (file, percentage) {
            uploadProgress(options, file, percentage);

            return false;
        });

        return webUploader;
    }


    //#region 事件


    function uploadSuccess(options, file, response) {
        var identity = response.identity || response.id;
        if (!identity && response.Data) {
            identity = response.Data.identity || response.Data.id;
        }
        if (options.onUploadSuccess) {
            var flag = options.onUploadSuccess(file, identity, response);
            if (flag) {
                return;
            }
        }

        var $li = getFileJQuery(file);
        $li.data("identity", identity);
        $li.addClass("uploader-item-success").attr("title", getRegional().uploadSuccessText);
        $(".uploader-item-tip", $li).html('<i class="fc fc-circle-right-filled green"></i>');
    }

    function error(message) {
        if (this.onError) {
            this.onError(message, arguments);
            return false;
        }

        tips(message);
    }

    function uploadError(options, file, reason) {
        if (options.onUploadError) {
            options.onUploadError(file, reason);
            return;
        }
        handleFileUploadError(file, reason);
    }

    function uploadFileQueued(options, $itemscontainer, file) {
        if (options.onUploadFileQueued) {
            options.onUploadFileQueued(file);
            return;
        }
        appendFileItem.call(options, $itemscontainer, file);
    }

    function uploadProgress(options, file, percentage) {
        if (options.onUploadProgress) {
            options.onUploadProgress(file, percentage);
            return;
        }

        var percentageVal = (percentage * 100).toFixed(2);
        if (percentage == 1) {
            percentageVal = 99;
        }

        var $li = getFileJQuery(file);

        if (percentageVal <= 50) {
            $('.progress-circle > .pie_left', $li).css("background", "#fff")
                                                  .css('transform', 'rotate(0deg)')
                                                  .css("z-index", "1");
            $('.progress-circle > .pie_right').css('transform', 'rotate(' + (percentageVal * 3.6 + 180) + 'deg)')
                                              .css("z-index", "0");
        }
        else {
            $('.progress-circle > .pie_right').css('transform', 'rotate(0deg)')
                                              .css("z-index", "1");
            $('.progress-circle > .pie_left').css("background", "")
                                             .css('transform', 'rotate(' + ((percentageVal - 50) * 3.6 + 180) + 'deg)')
                                             .css("z-index", "0");
        }
    }


    //#endregion


    //#region 初始化选项

    function initOptions(options) {
        var newOptions = $.extend(true, {
            accessToken: BM.Tenant.getCurrentAccessToken(),
            /**
              * 容器
              * @property container
              */
            container: null,
            /**
              * 指定上传按钮 和 container只能用其一
              * 使用button模式，将只有上传按钮，没有其它的表现层内容
              * @property button
              */
            button: null,
            /**
             * 附件元素的容器，配合button模式使用
             * @property itemContainer
             */
            itemContainer: null,
            swf: null,
            server: null,
            auto: true,
            multiple: true,
            /**
              * 最大能上传多少大小
              * @property fileSizeLimit
              * @type number
              */
            fileSizeLimit: null,
            /**
              * 最多能上传多少文件
              * @property fileNumLimit
              * @type number
              */
            fileNumLimit: null,
            /**
              * 单个文件最大大小
              * @property fileSingleSizeLimit
              * @type number
              */
            fileSingleSizeLimit: null,
            /**
             * 上传按钮的文本
             * @property buttonText
             * @type string
             * @default 上传附件
             */
            buttonText: getRegional().uploadButtonDefaultText,
            onUploadFileQueued: null,
            onUploadSuccess: null,
            onUploadProgress: null,
            onUploadError: null,
            onUploadAccept: null,
            onUploadComplete: null,
            onError: null,
            /**
              * 删除附件事件
              * @event onRemoveFile
              * @param identity
              */
            onRemoveFile: null,
            /**
             * 获取附件事件
             * @event onGetFile
             * @param {String} identity
             * @param {String} filename
             * @param {Object} file
             */
            onGetFile: null,
            /**
             * 添加一个文件事件
             * @event onAppendFile
             * @param file
             * @param identity
             */
            onAppendFile: null,
            /**
              * 已经存在的附件
              * @property items
              * @type Array
              */
            items: [],
            /**
              * 是否可编辑
              * @property isEditable
              * @type Boolean
              * @default true
              */
            isEditable: true,
            /**
             * 上传模式（影响移动端） 1:上传文件  2:上传图片
             * @property mode
             * @type Boolean
             * @default 1
             */
            mode: UPLOAD_MODE.FILE,
            /**
             * 可选数量(0为不限制)
             * @property maxTotal
             * @type int
             * @default 0
             */
            maxTotal: 0
        }, {}, options);

        validateOptions(newOptions);

        var serverUrl = new BM.Url(newOptions.server);
        serverUrl.appendKey(BM.Tenant.ACCESS_TOKEN_IDENTITY, newOptions.accessToken);
        newOptions.server = serverUrl.toString();

        return newOptions;
    }

    function validateOptions(options) {
        //validateOption(options, "container", null);
        validateOption(options, "swf", null);
        validateOption(options, "server", null);
    }

    function validateOption(options, key, notExpect) {
        if (options[key] == notExpect) {
            throw new Error("参数配置不正确");
        }
    }


    function createBaiduUploadConfig(options) {
        var newOptions = $.extend(true, {}, {}, options);

        var container = newOptions.container;
        if (container) {
            newOptions.dnd = "#{0} > .uploader-picker".bformat(container.attr("id"));
        }
        newOptions.pick = options.button;

        newOptions.disableGlobalDnd = true;

        //newOptions.runtimeOrder = "flash";
        return newOptions;
    }


    //#endregion

    function renderHtml(options) {
        if (options.container || options.itemContainer) {
            return renderContainerHtml(options);
        }
    }

    function renderContainerHtml(options) {

        var $itemsContainer = $('<div></div>');
        $itemsContainer.addClass("uploader-items");
        $itemsContainer.append("<ul></ul>");

        var container = options.container;
        if (container) {
            if (options.isEditable == true) {
                var html = '<div class="uploader-picker"></div>';
                container.html(html);
            }

            var identity = B.getIdentity();
            if (!container.attr("id")) {
                container.attr("id", "uploader" + identity);
            };

            container.addClass("uploader").append($itemsContainer);
        } else if (options.itemContainer) {
            options.itemContainer.addClass("uploader").append($itemsContainer);
        }

        if (options.items && options.items.length > 0) {
            $.each(options.items, function (i, item) {
                item.identity = item.id;
                item.id = EXISTS_ITEM_ID_PREVFIX + item.identity;
                appendFileItem.call(options, $itemsContainer, item, item.identity);
            });
        }
        return $itemsContainer;
    }

    function bindEvent(options, webUploader, $container, $itemscontainer) {
        var that = this;
        if (!$itemscontainer) {
            return;
        }

        var $ul = $itemscontainer;

        if (options.isEditable == false) {
            $(".uploader-item-remove", $ul).remove();
        }

        if (options.button && that.platform != "web") {
            if (options.mode == UPLOAD_MODE.FILE) {
                options.button.on("click", function () {

                    var maxTotal = options.multiple ? options.maxTotal : 1;

                    BM.appointment.file.getFiles(maxTotal, function (data) {
                        if ($.isArray(data)) {
                            for (var i = 0; i < data.length; i++) {
                                var item = data[i];
                                if (item.fileURI) {
                                    var file = {
                                        id: makeFileId(),
                                        name: getFileName(item.fileURI),
                                        size: item.fileSize || 0,
                                    };
                                    clientUploadFile(item.fileURI, file, options, $itemscontainer, BM.appointment.file.uploadFile);
                                }
                            }
                        }
                        else {
                            alert("服务器未响应预期数据");
                        }
                    });
                });
            }
            else {
                options.button.on("click", function () {
                    BM.appointment.camera.getPicture(function (data) {
                        if (data.imgURI) {
                            var file = {
                                id: makeFileId(),
                                name: getFileName(data.imgURI),
                                size: data.fileSize || 0,
                            };
                            clientUploadFile(data.imgURI, file, options, $itemscontainer, BM.appointment.camera.uploadPicture);
                        }
                    });
                });
            }
        }

        $ul.click(function (event) {
            var $target = $(event.target);
            if ($target.is("i.fa-times-circle")) {
                var $li = $target.parent().parent();
                var file = $li.data("file");
                var fileIdentity = $li.data("identity");

                if (options.onRemoveFile) {
                    if (options.onRemoveFile(fileIdentity) == false) {
                        return;
                    }
                }

                if (file.id.indexOf(EXISTS_ITEM_ID_PREVFIX) == -1 && webUploader) {
                    webUploader.removeFile(file, true);
                }
                else {
                    getFileJQuery(file).remove();
                }
            }

        });
    }

    function clientUploadFile(url, file, options, $itemscontainer, uploadFileFunction) {
        if (url && file) {
            uploadFileQueued(options, $itemscontainer, file);

            if (options.fileSingleSizeLimit && file.size > options.fileSingleSizeLimit) {

                uploadError(options, file, "文件[{0}]上传失败，单个文件超过了上传文件大小限制，最大只能上传: {1}".bformat(file.name, formatSize(options.fileSingleSizeLimit)));
                return;
            }


            uploadFileFunction(url, options.server, function (data) {
                switch (data.state) {
                    case 0://准备
                        break;
                    case 1://上传中
                        uploadProgress(options, file, data.progressPercentage);
                        break;
                    case 2://成功
                        if (!data.result || data.result == "") {
                            uploadError(options, file, "服务器没有返回预期返回值");
                            break;
                        }

                        var result = data.result;
                        if ($.type(result) === "string") {
                            result = JSON.parse(result);
                        }
                        uploadSuccess(options, file, result);

                        break;
                    case 3://失败
                        data.state = UPLOAD_ERROR_TYPE.ERROR;
                        uploadError(options, file, "上传失败");
                        break;
                    case 4://超时
                        data.state = UPLOAD_ERROR_TYPE.TIMEOUT;
                        uploadError(options, file, "上传超时");
                        break;
                    default:
                        break;
                }
            });
        }
    }

    // 添加文件
    function appendFileItem($itemscontainer, file, identity) {
        if ($itemscontainer == null) {
            return;
        }
        file.sizefriendy = formatSize(file.size);
        var $ul = $("ul", $itemscontainer);
        var $li = $('<li class="uploader-item"></li>');
        $li.append('<span class="uploader-item-tip"></span><a href="#" id="{id}" class="text-ellipsis file-name">{name}</a><em class="file-size text-assistant">{sizefriendy}</em>'.bformat(file));
        $li.append('<span class="uploader-item-remove pull-right" title="删除"><i class="fa fa-times-circle fa-red icon-size-20"></i></span>');

        appendFileItemProgress(file, $li);

        $li.data("file", file);
        $li.data("identity", identity);

        $ul.append($li);

        var options = this;

        $li.find("a").click(function (event) {
            if (options.isEditable == true) {
                //return;
            }
            var $this = $(this);
            var $li = $this.parent();
            var file = $li.data("file");
            var fileIdentity = $li.data("identity");

            event.preventDefault();

            if (options.onGetFile) {
                return options.onGetFile(fileIdentity, file.name, file);
            }
        });

        if (options.onAppendFile) {
            options.onAppendFile(file, identity);
        }
    }

    function formatSize(size) {
        return getWebUploaderObject().formatSize(size);
    }

    // 处理文件上传失败
    function handleFileUploadError(file, message) {
        var $li = getFileJQuery(file);
        $li.addClass("uploader-item-error");
        $(".uploader-item-tip", $li).html('<i class="fc fc-warning-filled red"></i>');
        BM.MessageBox.cue(message, "ERROR");
    }

    // 获取文件的JQuery对象
    function getFileJQuery(file) {
        return $("#" + file.id).parent();
    }

    // 提示
    function tips(message) {
        BM.Web.MessageBox.alert(getRegional().uploadWaringTitle, message, null, "WARNING");
    }

    // 删除文件的进度
    function removeFileProgress(file) {
        var $li = getFileJQuery(file);
        $(".uploader-item-progress", $li).remove();
    }

    // 添加文件的上传进度
    function appendFileItemProgress(file, $item) {
        if (file.id.indexOf(EXISTS_ITEM_ID_PREVFIX) == -1) {
            $(".uploader-item-tip", $item)
                .html('<span class="progress-circle uploader-item-progress">\
                           <span class="pie_left">\
                               <span class="left"></span>\
                           </span>\
                           <span class="pie_right">\
                               <span class="right"></span>\
                           </span>\
                       </span>');
        }
    }

    function makeFileId() {
        return new Date().getTime().toString();
    }

    function getFileName(path) {
        var pathArray = path.splitRemoveEmptys(/\/|\\\\/g);
        return pathArray[pathArray.length - 1];
    }

})(jQuery, BM);
/*
 * Node={
 *   id:"",
 *   text:"",
 *   value:"",
 *   opened:false,
 *   canSelected:true,
 *   hasChildren:false,
 *   selected:false,
 *   childrens:[{Node}]
 * }
 */
(function ($) {
    var nodeStatus = {
        opened: "open",
        closed: "close"
    };
    var nodeIcon = {
        opened: "fc-arrow-down",
        closed: "fc-arrow-right"
    };
    var TREELIST_DATA_KEY = {
        TreeList: "TreeList",
        Node: "TreeList_Node"
    };
    var getDefaultOptions = function () {
        return {
            okButtonText: "确定",//确定按钮名称
            cancelButtonText: '<i class="fc fc-close"></i>',//取消按钮名称
            rootCode: "",//根结点Code
            title: "",//树控件标题
            data: {},//获取数据时的参数
            dataType: "json",
            type: "post",
            url: "",//获取数据的URL
            source: null,//树的数据
            onLoadChildNode: null,//当载入子节点数据时 function onLoadChildNode(currentNodeData){ }
            onLoadData: null,//当载入数据时
            onBindData: null,//当数据载入完成，开始绑定时
            onDelete: null,//当选中项被删除时
            onSelected: null,//当选中项时
            onClose: null,//当关闭时
            onOK: null,//当确定时
            single: false,//只选中一个
            selectedData: []//初始化时被选中的值
        };
    }
    var treeList = BM.registerNameSpace("TreeList");

    treeList.create = function (options) {
        var that = this;
        var _options = $.extend(true, getDefaultOptions(), options);

        var renderHtml = function () {
            _options.target.html('<div class="TreeList-container">\
                                    <div class="TreeList-head">\
                                        <div class="TreeList-btn-close">' + _options.cancelButtonText + '</div>\
                                        <h2 class="TreeList-title">'+ _options.title + '</h2>\
                                        <div class="TreeList-btn-ok">\
                                            <span class="TreeList-btn-ok-text">'+ _options.okButtonText + '</span>\
                                            (<span class="TreeList-btn-ok-total">0</span>)\
                                        </div>\
                                    </div>\
                                    <div class="TreeList-body"></div>\
                                    <div class="TreeList-selected">\
                                        <div class="pull-top">\
                                            <i class="fc fc-direction-up"></i>\
                                        </div>\
                                        <div class="TreeList-selected-container">\
                                            <ul></ul>\
                                        </div>\
                                    </div>\
                                 </div>');
        }

        var appendNode = function (node, data) {
            var container;
            if (!node) {
                container = $(".TreeList-body", _options.target);
            }
            else {
                container = $(" > .child-node-container", node);
            }
            var level = container.attr("level") - 0 || 0;
            var ul = container.children("ul");
            if (ul.length <= 0) {
                ul = $("<ul></ul>");
                container.append(ul);
            }

            var item = $('<li>\
                              <div class="node">\
                              </div>\
                              <div class="child-node-container" level="' + (level + 1) + '">\
                              </div>\
                          </li>');
            var item_node = $(".node", item);
            item_node.data(TREELIST_DATA_KEY.Node, data);
            item_node.append('<span class="text-indent-base" style="width:' + (40 + level * 15) + 'px;"></span>')

            if (data.hasChildren) {
                var arrow = $('<span class="node-arrow fc ' + getIcon(data) + '" ></span>');
                if (!_options.source) {
                    arrow.attr("treelist_load", "");
                }
                item_node.append(arrow);
            }

            item_node.append('<span class="node-title">' + data.text + '</span>');

            if (data.canSelected) {
                var checkbox = $('<label class="node-check"><input type="checkbox" id="treeList_node_' + data.id + '" value="' + data.value + '" /><i></i></label>');
                item_node.append(checkbox)
                if (data.selected) {
                    $("input", checkbox).prop("checked", true);
                }
            }

            toggleNode.call(item, data.opened);

            ul.append(item);
            bindItemEvent(item);
            return item;
        };

        var getIcon = function (data) {
            if (data.opened) {
                return nodeIcon.opened;
            }
            else {
                return nodeIcon.closed;
            }
        }

        var bindItemEvent = function (item) {
            event.openNode(item);
            event.select(item);
        }

        var loadData = function (node, data) {
            var id = _options.rootCode;
            if (data) {
                id = data.id;
            }
            var queryparam = $.extend({ id: id }, _options.data)
            if ($.isFunction(_options.onLoadData)) {
                var data = _options.onLoadData(data, _options.data);
                if (data === false) {
                    return;
                }
                queryparam = data;
            }
            $.ajax({
                url: _options.url,
                type: _options.type,
                dataType: _options.dataType,
                data: queryparam,
                beforeSend: function () {
                    BM.Web.MessageBox.loading(true);
                },
                success: function (datas) {
                    if ($.isFunction(_options.onBindData)) {
                        datas = _options.onBindData(datas)
                    }
                    var selectedData = getResult();
                    for (var i = 0; i < datas.length; i++) {
                        var data = datas[i];
                        for (var j = 0; j < selectedData.length; j++) {
                            var selected = selectedData[j];
                            if (data.id == selected.id) {
                                data.selected = true;
                                break;
                            }
                        }
                    }
                    bindData(node, datas);
                    $("> .node > .node-arrow", node).removeAttr("treelist_load");
                },
                complete: function () {
                    BM.Web.MessageBox.loading(false);
                }
            });
        }

        var bindData = function (parantNode, dataArray) {
            if ($.isArray(dataArray)) {
                for (var i = 0; i < dataArray.length; i++) {
                    var data = dataArray[i];
                    var node = appendNode(parantNode, data);
                    if (data.hasChildren) {
                        bindData(node, data.childrens);
                    }
                }
            }
        }

        var toggleNode = function (open) {
            var that = this;
            var node = that.children(".node");
            var arrow = $(".node-arrow", node);
            var childContainer = that.children(".child-node-container");
            if (open) {
                arrow.addClass(nodeIcon.opened);
                arrow.removeClass(nodeIcon.closed);
                if (arrow.is("[treelist_load]")) {
                    var nodeData = node.data(TREELIST_DATA_KEY.Node);

                    if ($.isFunction(_options.onLoadChildNode)) {
                        var result = _options.onLoadChildNode.call(that, nodeData);
                        if (result === false) {
                            return;
                        }
                    }

                    loadData(that, nodeData);
                }
                childContainer.show();
            }
            else {
                arrow.addClass(nodeIcon.closed);
                arrow.removeClass(nodeIcon.opened);
                childContainer.hide();
            }
        }

        var selectItem = function (data, select) {
            var nodeId = 'treeList_node_' + data.id;
            var selectedId = 'treeList_selected_' + data.id;
            var selectedContainer = $(".TreeList-selected-container > ul", _options.target);

            if (select) {
                if (_options.single) {
                    var body = $(".TreeList-body", _options.target);
                    $("input:checked", body).prop("checked", false);
                    selectedContainer.empty();
                }
                var selected = $('<li id="' + selectedId + '">' + data.text + '</li>');
                var checkbox = $('input[id="' + nodeId + '"]', _options.target);
                checkbox.prop("checked", true);
                selected.data(TREELIST_DATA_KEY.Node, data);
                selectedContainer.append(selected);

                event.removeSelect(selected);
            }
            else {
                $('input[id="' + nodeId + '"]', _options.target).prop("checked", false);
                $('li[id="' + selectedId + '"]', selectedContainer).remove();
            }
            updateSelectedTotal();
        }

        var updateSelectedTotal = function () {
            var container = $(".TreeList-btn-ok-total", _options.target);
            var total = $(".TreeList-selected-container li", _options.target).length;
            container.text(total);
        };

        var getResult = function () {
            var result = new Array();
            var selectedItem = $(".TreeList-selected-container li", _options.target);
            selectedItem.each(function () {
                result.push($(this).data(TREELIST_DATA_KEY.Node));
            });
            return result;
        }

        that.setOptions = function (options) {
            $.extend(_options, options);
        }

        that.show = function () {
            if (_options.source && $.isArray(_options.source) && _options.source.length > 0) {
                bindData(null, _options.source);
            }
            else {
                loadData();
            }
            if (_options.selectedData && $.isArray(_options.selectedData) && _options.selectedData.length > 0) {
                for (var i = 0; i < _options.selectedData.length; i++) {
                    selectItem(_options.selectedData[i], true);
                }
            }
            $(".TreeList-container", _options.target).show();
        }

        that.hide = function () {
            $(".TreeList-container", _options.target).hide();
        }

        that.empty = function () {
            $(".TreeList-body", _options.target).empty();
            $(".TreeList-selected-container > ul", _options.target).empty();
            updateSelectedTotal();
        }

        var init = function () {
            renderHtml();
            that.hide();
            event.ok();
            event.cancel();
            event.showAllResult();
        }

        var event = {
            openNode: function (item) {
                $(".node-arrow", item).click(function () {
                    var that = $(this);
                    var li = that.parent().parent();
                    toggleNode.call(li, !that.hasClass(nodeIcon.opened))
                });
            },
            select: function (item) {
                $(".node-check > input:checkbox", item).change(function () {
                    var that = $(this);
                    var container = that.parent().parent();
                    var data = container.data(TREELIST_DATA_KEY.Node);
                    if ($.isFunction(_options.onSelected)) {
                        if (_options.onSelected(data) === false) {
                            return;
                        }
                    }
                    selectItem(data, that.is(":checked"));
                });
            },
            removeSelect: function (item) {
                item.click(function () {
                    var data = $(this).data(TREELIST_DATA_KEY.Node);
                    if ($.isFunction(_options.onDelete)) {
                        if (_options.onDelete(data) === false) {
                            return;
                        }
                    }
                    selectItem(data, false);
                });
            },
            showAllResult: function () {
                var hammer = new Hammer($(".TreeList-selected", _options.target)[0], { domEvents: true });
                hammer.add(new Hammer.Swipe());
                $(".TreeList-selected", _options.target).on("swipeup", function (e) {
                    showSelectedInFullSreen.call(this);
                }).on("swipedown", function (e) {
                    showSelectedInNormal.call(this);
                });
                $(".TreeList-selected > .pull-top", _options.target).click(function () {
                    var that = $(this);
                    var TreeListSelected = that.parent();
                    if ($("> i ", that).is(".fc-direction-up")) {
                        showSelectedInFullSreen.call(TreeListSelected);
                    }
                    else {
                        showSelectedInNormal.call(TreeListSelected);
                    }
                });

                function showSelectedInFullSreen() {
                    var that = $(this);
                    that.addClass("show-all");
                    $(".pull-top > i", that).removeClass("fc-direction-up").addClass("fc-direction-down");
                    var height = $(window).height() - 70;
                    that.animate({ height: height }, 300);
                }
                function showSelectedInNormal() {
                    var that = $(this);
                    that.removeClass("show-all");
                    $(".pull-top > i", that).removeClass("fc-direction-down").addClass("fc-direction-up");
                    that.animate({ height: 54 }, 300);
                }
            },
            ok: function () {
                $(".TreeList-btn-ok", _options.target).click(function () {
                    var data = getResult();
                    if ($.isFunction(_options.onOK)) {
                        if (_options.onOK(data) === false) {
                            return;
                        }
                        that.empty();
                        that.hide();
                    }
                });
            },
            cancel: function () {
                $(".TreeList-btn-close", _options.target).click(function () {
                    if ($.isFunction(_options.onClose)) {
                        if (_options.onClose(data) === false) {
                            return;
                        }
                    }
                    that.empty();
                    that.hide();
                });
            }
        };
        init();
        _options.target.data(TREELIST_DATA_KEY.TreeList, that);
        return that;
    }

    $.fn.treeList = function (options) {
        var tree = $(this).data(TREELIST_DATA_KEY.TreeList);
        if (tree) {
            return tree;
        }
        var _options = $.extend(true, { target: this }, options);
        return new BM.TreeList.create(_options);
    }
})(jQuery);
/*!
 * jQuery Validation Plugin v1.14.0
 *
 * http://jqueryvalidation.org/
 *
 * Copyright (c) 2015 Jörn Zaefferer
 * Released under the MIT license
 */
(function (factory) {
    if (typeof define === "function" && define.amd) {
        define(["jquery"], factory);
    } else {
        factory(jQuery);
    }
}(function ($) {

    $.extend($.fn, {
        // http://jqueryvalidation.org/validate/
        validate: function (options) {

            // if nothing is selected, return nothing; can't chain anyway
            if (!this.length) {
                if (options && options.debug && window.console) {
                    console.warn("Nothing selected, can't validate, returning nothing.");
                }
                return;
            }

            // check if a validator for this form was already created
            var validator = $.data(this[0], "validator");
            if (validator) {
                return validator;
            }

            // Add novalidate tag if HTML5.
            this.attr("novalidate", "novalidate");

            validator = new $.validator(options, this[0]);
            $.data(this[0], "validator", validator);

            if (validator.settings.onsubmit) {

                this.on("click.validate", ":submit", function (event) {
                    if (validator.settings.submitHandler) {
                        validator.submitButton = event.target;
                    }

                    // allow suppressing validation by adding a cancel class to the submit button
                    if ($(this).hasClass("cancel")) {
                        validator.cancelSubmit = true;
                    }

                    // allow suppressing validation by adding the html5 formnovalidate attribute to the submit button
                    if ($(this).attr("formnovalidate") !== undefined) {
                        validator.cancelSubmit = true;
                    }
                });

                // validate the form on submit
                this.on("submit.validate", function (event) {
                    if (validator.settings.debug) {
                        // prevent form submit to be able to see console output
                        event.preventDefault();
                    }
                    function handle() {
                        var hidden, result;
                        if (validator.settings.submitHandler) {
                            if (validator.submitButton) {
                                // insert a hidden input as a replacement for the missing submit button
                                hidden = $("<input type='hidden'/>")
                                    .attr("name", validator.submitButton.name)
                                    .val($(validator.submitButton).val())
                                    .appendTo(validator.currentForm);
                            }
                            result = validator.settings.submitHandler.call(validator, validator.currentForm, event);
                            if (validator.submitButton) {
                                // and clean up afterwards; thanks to no-block-scope, hidden can be referenced
                                hidden.remove();
                            }
                            if (result !== undefined) {
                                return result;
                            }
                            return false;
                        }
                        return true;
                    }

                    // prevent submit for invalid forms or custom submit handlers
                    if (validator.cancelSubmit) {
                        validator.cancelSubmit = false;
                        return handle();
                    }
                    if (validator.form()) {
                        if (validator.pendingRequest) {
                            validator.formSubmitted = true;
                            return false;
                        }
                        return handle();
                    } else {
                        validator.focusInvalid();
                        return false;
                    }
                });
            }

            return validator;
        },
        // http://jqueryvalidation.org/valid/
        valid: function () {
            var valid, validator, errorList;

            if ($(this[0]).is("form")) {
                valid = this.validate().form();
            } else {
                errorList = [];
                valid = true;
                validator = $(this[0].form).validate();
                this.each(function () {
                    valid = validator.element(this) && valid;
                    errorList = errorList.concat(validator.errorList);
                });
                validator.errorList = errorList;
            }
            return valid;
        },

        // http://jqueryvalidation.org/rules/
        rules: function (command, argument) {
            var element = this[0],
                settings, staticRules, existingRules, data, param, filtered;

            if (command) {
                settings = $.data(element.form, "validator").settings;
                staticRules = settings.rules;
                existingRules = $.validator.staticRules(element);
                switch (command) {
                    case "add":
                        $.extend(existingRules, $.validator.normalizeRule(argument));
                        // remove messages from rules, but allow them to be set separately
                        delete existingRules.messages;
                        staticRules[element.name] = existingRules;
                        if (argument.messages) {
                            settings.messages[element.name] = $.extend(settings.messages[element.name], argument.messages);
                        }
                        break;
                    case "remove":
                        if (!argument) {
                            delete staticRules[element.name];
                            return existingRules;
                        }
                        filtered = {};
                        $.each(argument.split(/\s/), function (index, method) {
                            filtered[method] = existingRules[method];
                            delete existingRules[method];
                            if (method === "required") {
                                $(element).removeAttr("aria-required");
                            }
                        });
                        return filtered;
                }
            }

            data = $.validator.normalizeRules(
            $.extend(
                {},
                $.validator.classRules(element),
                $.validator.attributeRules(element),
                $.validator.dataRules(element),
                $.validator.staticRules(element)
            ), element);

            // make sure required is at front
            if (data.required) {
                param = data.required;
                delete data.required;
                data = $.extend({ required: param }, data);
                $(element).attr("aria-required", "true");
            }

            // make sure remote is at back
            if (data.remote) {
                param = data.remote;
                delete data.remote;
                data = $.extend(data, { remote: param });
            }

            return data;
        }
    });

    // Custom selectors
    $.extend($.expr[":"], {
        // http://jqueryvalidation.org/blank-selector/
        blank: function (a) {
            return !$.trim("" + $(a).val());
        },
        // http://jqueryvalidation.org/filled-selector/
        filled: function (a) {
            return !!$.trim("" + $(a).val());
        },
        // http://jqueryvalidation.org/unchecked-selector/
        unchecked: function (a) {
            return !$(a).prop("checked");
        }
    });

    // constructor for validator
    $.validator = function (options, form) {
        this.settings = $.extend(true, {}, $.validator.defaults, options);
        this.currentForm = form;
        this.init();
    };

    // http://jqueryvalidation.org/jQuery.validator.format/
    $.validator.format = function (source, params) {
        if (arguments.length === 1) {
            return function () {
                var args = $.makeArray(arguments);
                args.unshift(source);
                return $.validator.format.apply(this, args);
            };
        }
        if (arguments.length > 2 && params.constructor !== Array) {
            params = $.makeArray(arguments).slice(1);
        }
        if (params.constructor !== Array) {
            params = [params];
        }
        $.each(params, function (i, n) {
            source = source.replace(new RegExp("\\{" + i + "\\}", "g"), function () {
                return n;
            });
        });
        return source;
    };

    $.extend($.validator, {

        defaults: {
            messages: {},
            groups: {},
            rules: {},
            errorClass: "error",
            validClass: "valid",
            errorElement: "label",
            focusCleanup: false,
            focusInvalid: true,
            errorContainer: $([]),
            errorLabelContainer: $([]),
            onsubmit: true,
            ignore: ":hidden",
            ignoreTitle: false,
            onfocusin: function (element) {
                this.lastActive = element;

                // Hide error label and remove error class on focus if enabled
                if (this.settings.focusCleanup) {
                    if (this.settings.unhighlight) {
                        this.settings.unhighlight.call(this, element, this.settings.errorClass, this.settings.validClass);
                    }
                    this.hideThese(this.errorsFor(element));
                }
            },
            onfocusout: function (element) {
                if (!this.checkable(element) && (element.name in this.submitted || !this.optional(element))) {
                    this.element(element);
                }
            },
            onkeyup: function (element, event) {
                // Avoid revalidate the field when pressing one of the following keys
                // Shift       => 16
                // Ctrl        => 17
                // Alt         => 18
                // Caps lock   => 20
                // End         => 35
                // Home        => 36
                // Left arrow  => 37
                // Up arrow    => 38
                // Right arrow => 39
                // Down arrow  => 40
                // Insert      => 45
                // Num lock    => 144
                // AltGr key   => 225
                var excludedKeys = [
                    16, 17, 18, 20, 35, 36, 37,
                    38, 39, 40, 45, 144, 225
                ];

                if (event.which === 9 && this.elementValue(element) === "" || $.inArray(event.keyCode, excludedKeys) !== -1) {
                    return;
                } else if (element.name in this.submitted || element === this.lastElement) {
                    this.element(element);
                }
            },
            onclick: function (element) {
                // click on selects, radiobuttons and checkboxes
                if (element.name in this.submitted) {
                    this.element(element);

                    // or option elements, check parent select in that case
                } else if (element.parentNode.name in this.submitted) {
                    this.element(element.parentNode);
                }
            },
            highlight: function (element, errorClass, validClass) {
                if (element.type === "radio") {
                    this.findByName(element.name).addClass(errorClass).removeClass(validClass);
                } else {
                    $(element).addClass(errorClass).removeClass(validClass);
                }
            },
            unhighlight: function (element, errorClass, validClass) {
                if (element.type === "radio") {
                    this.findByName(element.name).removeClass(errorClass).addClass(validClass);
                } else {
                    $(element).removeClass(errorClass).addClass(validClass);
                }
            }
        },

        // http://jqueryvalidation.org/jQuery.validator.setDefaults/
        setDefaults: function (settings) {
            $.extend($.validator.defaults, settings);
        },

        messages: {
            required: "This field is required.",
            remote: "Please fix this field.",
            email: "Please enter a valid email address.",
            url: "Please enter a valid URL.",
            date: "Please enter a valid date.",
            dateISO: "Please enter a valid date ( ISO ).",
            number: "Please enter a valid number.",
            digits: "Please enter only digits.",
            creditcard: "Please enter a valid credit card number.",
            equalTo: "Please enter the same value again.",
            maxlength: $.validator.format("Please enter no more than {0} characters."),
            minlength: $.validator.format("Please enter at least {0} characters."),
            rangelength: $.validator.format("Please enter a value between {0} and {1} characters long."),
            range: $.validator.format("Please enter a value between {0} and {1}."),
            max: $.validator.format("Please enter a value less than or equal to {0}."),
            min: $.validator.format("Please enter a value greater than or equal to {0}.")
        },

        autoCreateRanges: false,

        prototype: {

            init: function () {
                this.labelContainer = $(this.settings.errorLabelContainer);
                this.errorContext = this.labelContainer.length && this.labelContainer || $(this.currentForm);
                this.containers = $(this.settings.errorContainer).add(this.settings.errorLabelContainer);
                this.submitted = {};
                this.valueCache = {};
                this.pendingRequest = 0;
                this.pending = {};
                this.invalid = {};
                this.reset();

                var groups = (this.groups = {}),
                    rules;
                $.each(this.settings.groups, function (key, value) {
                    if (typeof value === "string") {
                        value = value.split(/\s/);
                    }
                    $.each(value, function (index, name) {
                        groups[name] = key;
                    });
                });
                rules = this.settings.rules;
                $.each(rules, function (key, value) {
                    rules[key] = $.validator.normalizeRule(value);
                });

                function delegate(event) {
                    var validator = $.data(this.form, "validator"),
                        eventType = "on" + event.type.replace(/^validate/, ""),
                        settings = validator.settings;
                    if (settings[eventType] && !$(this).is(settings.ignore)) {
                        settings[eventType].call(validator, this, event);
                    }
                }

                $(this.currentForm)
                    .on("focusin.validate focusout.validate keyup.validate",
                        ":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], " +
                        "[type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], " +
                        "[type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], " +
                        "[type='radio'], [type='checkbox']", delegate)
                    // Support: Chrome, oldIE
                    // "select" is provided as event.target when clicking a option
                    .on("click.validate", "select, option, [type='radio'], [type='checkbox']", delegate);

                if (this.settings.invalidHandler) {
                    $(this.currentForm).on("invalid-form.validate", this.settings.invalidHandler);
                }

                // Add aria-required to any Static/Data/Class required fields before first validation
                // Screen readers require this attribute to be present before the initial submission http://www.w3.org/TR/WCAG-TECHS/ARIA2.html
                $(this.currentForm).find("[required], [data-rule-required], .required").attr("aria-required", "true");
            },

            // http://jqueryvalidation.org/Validator.form/
            form: function () {
                this.checkForm();
                $.extend(this.submitted, this.errorMap);
                this.invalid = $.extend({}, this.errorMap);
                if (!this.valid()) {
                    $(this.currentForm).triggerHandler("invalid-form", [this]);
                }
                this.showErrors();
                return this.valid();
            },

            checkForm: function () {
                this.prepareForm();
                for (var i = 0, elements = (this.currentElements = this.elements()) ; elements[i]; i++) {
                    this.check(elements[i]);
                }
                return this.valid();
            },

            // http://jqueryvalidation.org/Validator.element/
            element: function (element) {
                var cleanElement = this.clean(element),
                    checkElement = this.validationTargetFor(cleanElement),
                    result = true;

                this.lastElement = checkElement;

                if (checkElement === undefined) {
                    delete this.invalid[cleanElement.name];
                } else {
                    this.prepareElement(checkElement);
                    this.currentElements = $(checkElement);

                    result = this.check(checkElement) !== false;
                    if (result) {
                        delete this.invalid[checkElement.name];
                    } else {
                        this.invalid[checkElement.name] = true;
                    }
                }
                // Add aria-invalid status for screen readers
                $(element).attr("aria-invalid", !result);

                if (!this.numberOfInvalids()) {
                    // Hide error containers on last error
                    this.toHide = this.toHide.add(this.containers);
                }
                this.showErrors();
                return result;
            },

            // http://jqueryvalidation.org/Validator.showErrors/
            showErrors: function (errors) {
                if (errors) {
                    // add items to error list and map
                    $.extend(this.errorMap, errors);
                    this.errorList = [];
                    for (var name in errors) {
                        this.errorList.push({
                            message: errors[name],
                            element: this.findByName(name)[0]
                        });
                    }
                    // remove items from success list
                    this.successList = $.grep(this.successList, function (element) {
                        return !(element.name in errors);
                    });
                }
                if (this.settings.showErrors) {
                    this.settings.showErrors.call(this, this.errorMap, this.errorList);
                } else {
                    this.defaultShowErrors();
                }
            },

            // http://jqueryvalidation.org/Validator.resetForm/
            resetForm: function () {
                if ($.fn.resetForm) {
                    $(this.currentForm).resetForm();
                }
                this.submitted = {};
                this.lastElement = null;
                this.prepareForm();
                this.hideErrors();
                var i, elements = this.elements()
                    .removeData("previousValue")
                    .removeAttr("aria-invalid");

                if (this.settings.unhighlight) {
                    for (i = 0; elements[i]; i++) {
                        this.settings.unhighlight.call(this, elements[i],
                            this.settings.errorClass, "");
                    }
                } else {
                    elements.removeClass(this.settings.errorClass);
                }
            },

            numberOfInvalids: function () {
                return this.objectLength(this.invalid);
            },

            objectLength: function (obj) {
                /* jshint unused: false */
                var count = 0,
                    i;
                for (i in obj) {
                    count++;
                }
                return count;
            },

            hideErrors: function () {
                this.hideThese(this.toHide);
            },

            hideThese: function (errors) {
                errors.not(this.containers).text("");
                this.addWrapper(errors).hide();
            },

            valid: function () {
                return this.size() === 0;
            },

            size: function () {
                return this.errorList.length;
            },

            focusInvalid: function () {
                if (this.settings.focusInvalid) {
                    try {
                        $(this.findLastActive() || this.errorList.length && this.errorList[0].element || [])
                        .filter(":visible")
                        .focus()
                        // manually trigger focusin event; without it, focusin handler isn't called, findLastActive won't have anything to find
                        .trigger("focusin");
                    } catch (e) {
                        // ignore IE throwing errors when focusing hidden elements
                    }
                }
            },

            findLastActive: function () {
                var lastActive = this.lastActive;
                return lastActive && $.grep(this.errorList, function (n) {
                    return n.element.name === lastActive.name;
                }).length === 1 && lastActive;
            },

            elements: function () {
                var validator = this,
                    rulesCache = {};

                // select all valid inputs inside the form (no submit or reset buttons)
                return $(this.currentForm)
                .find("input, select, textarea")
                .not(":submit, :reset, :image, :disabled")
                .not(this.settings.ignore)
                .filter(function () {
                    if (!this.name && validator.settings.debug && window.console) {
                        console.error("%o has no name assigned", this);
                    }

                    // select only the first element for each name, and only those with rules specified
                    if (this.name in rulesCache || !validator.objectLength($(this).rules())) {
                        return false;
                    }

                    rulesCache[this.name] = true;
                    return true;
                });
            },

            clean: function (selector) {
                return $(selector)[0];
            },

            errors: function () {
                var errorClass = this.settings.errorClass.split(" ").join(".");
                return $(this.settings.errorElement + "." + errorClass, this.errorContext);
            },

            reset: function () {
                this.successList = [];
                this.errorList = [];
                this.errorMap = {};
                this.toShow = $([]);
                this.toHide = $([]);
                this.currentElements = $([]);
            },

            prepareForm: function () {
                this.reset();
                this.toHide = this.errors().add(this.containers);
            },

            prepareElement: function (element) {
                this.reset();
                this.toHide = this.errorsFor(element);
            },

            elementValue: function (element) {
                var val,
                    $element = $(element),
                    type = element.type;

                if (type === "radio" || type === "checkbox") {
                    return this.findByName(element.name).filter(":checked").val();
                } else if (type === "number" && typeof element.validity !== "undefined") {
                    return element.validity.badInput ? false : $element.val();
                }

                val = $element.val();
                if (typeof val === "string") {
                    return val.replace(/\r/g, "");
                }
                return val;
            },

            check: function (element) {
                element = this.validationTargetFor(this.clean(element));

                var rules = $(element).rules(),
                    rulesCount = $.map(rules, function (n, i) {
                        return i;
                    }).length,
                    dependencyMismatch = false,
                    val = this.elementValue(element),
                    result, method, rule;

                for (method in rules) {
                    rule = { method: method, parameters: rules[method] };
                    try {

                        result = $.validator.methods[method].call(this, val, element, rule.parameters);

                        // if a method indicates that the field is optional and therefore valid,
                        // don't mark it as valid when there are no other rules
                        if (result === "dependency-mismatch" && rulesCount === 1) {
                            dependencyMismatch = true;
                            continue;
                        }
                        dependencyMismatch = false;

                        if (result === "pending") {
                            this.toHide = this.toHide.not(this.errorsFor(element));
                            return;
                        }

                        if (!result) {
                            this.formatAndAdd(element, rule);
                            return false;
                        }
                    } catch (e) {
                        if (this.settings.debug && window.console) {
                            console.log("Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.", e);
                        }
                        if (e instanceof TypeError) {
                            e.message += ".  Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.";
                        }

                        throw e;
                    }
                }
                if (dependencyMismatch) {
                    return;
                }
                if (this.objectLength(rules)) {
                    this.successList.push(element);
                }
                return true;
            },

            // return the custom message for the given element and validation method
            // specified in the element's HTML5 data attribute
            // return the generic message if present and no method specific message is present
            customDataMessage: function (element, method) {
                return $(element).data("msg" + method.charAt(0).toUpperCase() +
                    method.substring(1).toLowerCase()) || $(element).data("msg");
            },

            // return the custom message for the given element name and validation method
            customMessage: function (name, method) {
                var m = this.settings.messages[name];
                return m && (m.constructor === String ? m : m[method]);
            },

            // return the first defined argument, allowing empty strings
            findDefined: function () {
                for (var i = 0; i < arguments.length; i++) {
                    if (arguments[i] !== undefined) {
                        return arguments[i];
                    }
                }
                return undefined;
            },

            defaultMessage: function (element, method) {
                return this.findDefined(
                    this.customMessage(element.name, method),
                    this.customDataMessage(element, method),
                    // title is never undefined, so handle empty string as undefined
                    !this.settings.ignoreTitle && element.title || undefined,
                    $.validator.messages[method],
                    "<strong>Warning: No message defined for " + element.name + "</strong>"
                );
            },

            formatAndAdd: function (element, rule) {
                var message = this.defaultMessage(element, rule.method),
                    theregex = /\$?\{(\d+)\}/g;
                if (typeof message === "function") {
                    message = message.call(this, rule.parameters, element);
                } else if (theregex.test(message)) {
                    message = $.validator.format(message.replace(theregex, "{$1}"), rule.parameters);
                }
                this.errorList.push({
                    message: message,
                    element: element,
                    method: rule.method
                });

                this.errorMap[element.name] = message;
                this.submitted[element.name] = message;
            },

            addWrapper: function (toToggle) {
                if (this.settings.wrapper) {
                    toToggle = toToggle.add(toToggle.parent(this.settings.wrapper));
                }
                return toToggle;
            },

            defaultShowErrors: function () {
                var i, elements, error;
                for (i = 0; this.errorList[i]; i++) {
                    error = this.errorList[i];
                    if (this.settings.highlight) {
                        this.settings.highlight.call(this, error.element, this.settings.errorClass, this.settings.validClass);
                    }
                    this.showLabel(error.element, error.message);
                }
                if (this.errorList.length) {
                    this.toShow = this.toShow.add(this.containers);
                }
                if (this.settings.success) {
                    for (i = 0; this.successList[i]; i++) {
                        this.showLabel(this.successList[i]);
                    }
                }
                if (this.settings.unhighlight) {
                    for (i = 0, elements = this.validElements() ; elements[i]; i++) {
                        this.settings.unhighlight.call(this, elements[i], this.settings.errorClass, this.settings.validClass);
                    }
                }
                this.toHide = this.toHide.not(this.toShow);
                this.hideErrors();
                this.addWrapper(this.toShow).show();
            },

            validElements: function () {
                return this.currentElements.not(this.invalidElements());
            },

            invalidElements: function () {
                return $(this.errorList).map(function () {
                    return this.element;
                });
            },

            showLabel: function (element, message) {
                var place, group, errorID,
                    error = this.errorsFor(element),
                    elementID = this.idOrName(element),
                    describedBy = $(element).attr("aria-describedby");
                if (error.length) {
                    // refresh error/success class
                    error.removeClass(this.settings.validClass).addClass(this.settings.errorClass);
                    // replace message on existing label
                    error.html(message);
                } else {
                    // create error element
                    error = $("<" + this.settings.errorElement + ">")
                        .attr("id", elementID + "-error")
                        .addClass(this.settings.errorClass)
                        .html(message || "");

                    // Maintain reference to the element to be placed into the DOM
                    place = error;
                    if (this.settings.wrapper) {
                        // make sure the element is visible, even in IE
                        // actually showing the wrapped element is handled elsewhere
                        place = error.hide().show().wrap("<" + this.settings.wrapper + "/>").parent();
                    }
                    if (this.labelContainer.length) {
                        this.labelContainer.append(place);
                    } else if (this.settings.errorPlacement) {
                        this.settings.errorPlacement(place, $(element));
                    } else {
                        place.insertAfter(element);
                    }

                    // Link error back to the element
                    if (error.is("label")) {
                        // If the error is a label, then associate using 'for'
                        error.attr("for", elementID);
                    } else if (error.parents("label[for='" + elementID + "']").length === 0) {
                        // If the element is not a child of an associated label, then it's necessary
                        // to explicitly apply aria-describedby

                        errorID = error.attr("id").replace(/(:|\.|\[|\]|\$)/g, "\\$1");
                        // Respect existing non-error aria-describedby
                        if (!describedBy) {
                            describedBy = errorID;
                        } else if (!describedBy.match(new RegExp("\\b" + errorID + "\\b"))) {
                            // Add to end of list if not already present
                            describedBy += " " + errorID;
                        }
                        $(element).attr("aria-describedby", describedBy);

                        // If this element is grouped, then assign to all elements in the same group
                        group = this.groups[element.name];
                        if (group) {
                            $.each(this.groups, function (name, testgroup) {
                                if (testgroup === group) {
                                    $("[name='" + name + "']", this.currentForm)
                                        .attr("aria-describedby", error.attr("id"));
                                }
                            });
                        }
                    }
                }
                if (!message && this.settings.success) {
                    error.text("");
                    if (typeof this.settings.success === "string") {
                        error.addClass(this.settings.success);
                    } else {
                        this.settings.success(error, element);
                    }
                }
                this.toShow = this.toShow.add(error);
            },

            errorsFor: function (element) {
                var name = this.idOrName(element),
                    describer = $(element).attr("aria-describedby"),
                    selector = "label[for='" + name + "'], label[for='" + name + "'] *";

                // aria-describedby should directly reference the error element
                if (describer) {
                    selector = selector + ", #" + describer.replace(/\s+/g, ", #");
                }
                return this
                    .errors()
                    .filter(selector);
            },

            idOrName: function (element) {
                return this.groups[element.name] || (this.checkable(element) ? element.name : element.id || element.name);
            },

            validationTargetFor: function (element) {

                // If radio/checkbox, validate first element in group instead
                if (this.checkable(element)) {
                    element = this.findByName(element.name);
                }

                // Always apply ignore filter
                return $(element).not(this.settings.ignore)[0];
            },

            checkable: function (element) {
                return (/radio|checkbox/i).test(element.type);
            },

            findByName: function (name) {
                return $(this.currentForm).find("[name='" + name + "']");
            },

            getLength: function (value, element) {
                switch (element.nodeName.toLowerCase()) {
                    case "select":
                        return $("option:selected", element).length;
                    case "input":
                        if (this.checkable(element)) {
                            return this.findByName(element.name).filter(":checked").length;
                        }
                }
                return value.length;
            },

            depend: function (param, element) {
                return this.dependTypes[typeof param] ? this.dependTypes[typeof param](param, element) : true;
            },

            dependTypes: {
                "boolean": function (param) {
                    return param;
                },
                "string": function (param, element) {
                    return !!$(param, element.form).length;
                },
                "function": function (param, element) {
                    return param(element);
                }
            },

            optional: function (element) {
                var val = this.elementValue(element);
                return !$.validator.methods.required.call(this, val, element) && "dependency-mismatch";
            },

            startRequest: function (element) {
                if (!this.pending[element.name]) {
                    this.pendingRequest++;
                    this.pending[element.name] = true;
                }
            },

            stopRequest: function (element, valid) {
                this.pendingRequest--;
                // sometimes synchronization fails, make sure pendingRequest is never < 0
                if (this.pendingRequest < 0) {
                    this.pendingRequest = 0;
                }
                delete this.pending[element.name];
                if (valid && this.pendingRequest === 0 && this.formSubmitted && this.form()) {
                    $(this.currentForm).submit();
                    this.formSubmitted = false;
                } else if (!valid && this.pendingRequest === 0 && this.formSubmitted) {
                    $(this.currentForm).triggerHandler("invalid-form", [this]);
                    this.formSubmitted = false;
                }
            },

            previousValue: function (element) {
                return $.data(element, "previousValue") || $.data(element, "previousValue", {
                    old: null,
                    valid: true,
                    message: this.defaultMessage(element, "remote")
                });
            },

            // cleans up all forms and elements, removes validator-specific events
            destroy: function () {
                this.resetForm();

                $(this.currentForm)
                    .off(".validate")
                    .removeData("validator");
            }

        },

        classRuleSettings: {
            required: { required: true },
            email: { email: true },
            url: { url: true },
            date: { date: true },
            dateISO: { dateISO: true },
            number: { number: true },
            digits: { digits: true },
            creditcard: { creditcard: true }
        },

        addClassRules: function (className, rules) {
            if (className.constructor === String) {
                this.classRuleSettings[className] = rules;
            } else {
                $.extend(this.classRuleSettings, className);
            }
        },

        classRules: function (element) {
            var rules = {},
                classes = $(element).attr("class");

            if (classes) {
                $.each(classes.split(" "), function () {
                    if (this in $.validator.classRuleSettings) {
                        $.extend(rules, $.validator.classRuleSettings[this]);
                    }
                });
            }
            return rules;
        },

        normalizeAttributeRule: function (rules, type, method, value) {

            // convert the value to a number for number inputs, and for text for backwards compability
            // allows type="date" and others to be compared as strings
            if (/min|max/.test(method) && (type === null || /number|range|text/.test(type))) {
                value = Number(value);

                // Support Opera Mini, which returns NaN for undefined minlength
                if (isNaN(value)) {
                    value = undefined;
                }
            }

            if (value || value === 0) {
                rules[method] = value;
            } else if (type === method && type !== "range") {

                // exception: the jquery validate 'range' method
                // does not test for the html5 'range' type
                rules[method] = true;
            }
        },

        attributeRules: function (element) {
            var rules = {},
                $element = $(element),
                type = element.getAttribute("type"),
                method, value;

            for (method in $.validator.methods) {

                // support for <input required> in both html5 and older browsers
                if (method === "required") {
                    value = element.getAttribute(method);

                    // Some browsers return an empty string for the required attribute
                    // and non-HTML5 browsers might have required="" markup
                    if (value === "") {
                        value = true;
                    }

                    // force non-HTML5 browsers to return bool
                    value = !!value;
                } else {
                    value = $element.attr(method);
                }

                this.normalizeAttributeRule(rules, type, method, value);
            }

            // maxlength may be returned as -1, 2147483647 ( IE ) and 524288 ( safari ) for text inputs
            if (rules.maxlength && /-1|2147483647|524288/.test(rules.maxlength)) {
                delete rules.maxlength;
            }

            return rules;
        },

        dataRules: function (element) {
            var rules = {},
                $element = $(element),
                type = element.getAttribute("type"),
                method, value;

            for (method in $.validator.methods) {
                value = $element.data("rule" + method.charAt(0).toUpperCase() + method.substring(1).toLowerCase());
                this.normalizeAttributeRule(rules, type, method, value);
            }
            return rules;
        },

        staticRules: function (element) {
            var rules = {},
                validator = $.data(element.form, "validator");

            if (validator.settings.rules) {
                rules = $.validator.normalizeRule(validator.settings.rules[element.name]) || {};
            }
            return rules;
        },

        normalizeRules: function (rules, element) {
            // handle dependency check
            $.each(rules, function (prop, val) {
                // ignore rule when param is explicitly false, eg. required:false
                if (val === false) {
                    delete rules[prop];
                    return;
                }
                if (val.param || val.depends) {
                    var keepRule = true;
                    switch (typeof val.depends) {
                        case "string":
                            keepRule = !!$(val.depends, element.form).length;
                            break;
                        case "function":
                            keepRule = val.depends.call(element, element);
                            break;
                    }
                    if (keepRule) {
                        rules[prop] = val.param !== undefined ? val.param : true;
                    } else {
                        delete rules[prop];
                    }
                }
            });

            // evaluate parameters
            $.each(rules, function (rule, parameter) {
                rules[rule] = $.isFunction(parameter) ? parameter(element) : parameter;
            });

            // clean number parameters
            $.each(["minlength", "maxlength"], function () {
                if (rules[this]) {
                    rules[this] = Number(rules[this]);
                }
            });
            $.each(["rangelength", "range"], function () {
                var parts;
                if (rules[this]) {
                    if ($.isArray(rules[this])) {
                        rules[this] = [Number(rules[this][0]), Number(rules[this][1])];
                    } else if (typeof rules[this] === "string") {
                        parts = rules[this].replace(/[\[\]]/g, "").split(/[\s,]+/);
                        rules[this] = [Number(parts[0]), Number(parts[1])];
                    }
                }
            });

            if ($.validator.autoCreateRanges) {
                // auto-create ranges
                if (rules.min != null && rules.max != null) {
                    rules.range = [rules.min, rules.max];
                    delete rules.min;
                    delete rules.max;
                }
                if (rules.minlength != null && rules.maxlength != null) {
                    rules.rangelength = [rules.minlength, rules.maxlength];
                    delete rules.minlength;
                    delete rules.maxlength;
                }
            }

            return rules;
        },

        // Converts a simple string to a {string: true} rule, e.g., "required" to {required:true}
        normalizeRule: function (data) {
            if (typeof data === "string") {
                var transformed = {};
                $.each(data.split(/\s/), function () {
                    transformed[this] = true;
                });
                data = transformed;
            }
            return data;
        },

        // http://jqueryvalidation.org/jQuery.validator.addMethod/
        addMethod: function (name, method, message) {
            $.validator.methods[name] = method;
            $.validator.messages[name] = message !== undefined ? message : $.validator.messages[name];
            if (method.length < 3) {
                $.validator.addClassRules(name, $.validator.normalizeRule(name));
            }
        },

        methods: {

            // http://jqueryvalidation.org/required-method/
            required: function (value, element, param) {
                // check if dependency is met
                if (!this.depend(param, element)) {
                    return "dependency-mismatch";
                }
                if (element.nodeName.toLowerCase() === "select") {
                    // could be an array for select-multiple or a string, both are fine this way
                    var val = $(element).val();
                    return val && val.length > 0;
                }
                if (this.checkable(element)) {
                    return this.getLength(value, element) > 0;
                }
                return value.length > 0;
            },

            // http://jqueryvalidation.org/email-method/
            email: function (value, element) {
                // From https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address
                // Retrieved 2014-01-14
                // If you have a problem with this implementation, report a bug against the above spec
                // Or use custom methods to implement your own email validation
                return this.optional(element) || /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(value);
            },

            // http://jqueryvalidation.org/url-method/
            url: function (value, element) {

                // Copyright (c) 2010-2013 Diego Perini, MIT licensed
                // https://gist.github.com/dperini/729294
                // see also https://mathiasbynens.be/demo/url-regex
                // modified to allow protocol-relative URLs
                return this.optional(element) || /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(value);
            },

            // http://jqueryvalidation.org/date-method/
            date: function (value, element) {
                return this.optional(element) || !/Invalid|NaN/.test(new Date(value).toString());
            },

            // http://jqueryvalidation.org/dateISO-method/
            dateISO: function (value, element) {
                return this.optional(element) || /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(value);
            },

            // http://jqueryvalidation.org/number-method/
            number: function (value, element) {
                return this.optional(element) || /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(value);
            },

            // http://jqueryvalidation.org/digits-method/
            digits: function (value, element) {
                return this.optional(element) || /^\d+$/.test(value);
            },

            // http://jqueryvalidation.org/creditcard-method/
            // based on http://en.wikipedia.org/wiki/Luhn_algorithm
            creditcard: function (value, element) {
                if (this.optional(element)) {
                    return "dependency-mismatch";
                }
                // accept only spaces, digits and dashes
                if (/[^0-9 \-]+/.test(value)) {
                    return false;
                }
                var nCheck = 0,
                    nDigit = 0,
                    bEven = false,
                    n, cDigit;

                value = value.replace(/\D/g, "");

                // Basing min and max length on
                // http://developer.ean.com/general_info/Valid_Credit_Card_Types
                if (value.length < 13 || value.length > 19) {
                    return false;
                }

                for (n = value.length - 1; n >= 0; n--) {
                    cDigit = value.charAt(n);
                    nDigit = parseInt(cDigit, 10);
                    if (bEven) {
                        if ((nDigit *= 2) > 9) {
                            nDigit -= 9;
                        }
                    }
                    nCheck += nDigit;
                    bEven = !bEven;
                }

                return (nCheck % 10) === 0;
            },

            // http://jqueryvalidation.org/minlength-method/
            minlength: function (value, element, param) {
                var length = $.isArray(value) ? value.length : this.getLength(value, element);
                return this.optional(element) || length >= param;
            },

            // http://jqueryvalidation.org/maxlength-method/
            maxlength: function (value, element, param) {
                var length = $.isArray(value) ? value.length : this.getLength(value, element);
                return this.optional(element) || length <= param;
            },

            // http://jqueryvalidation.org/rangelength-method/
            rangelength: function (value, element, param) {
                var length = $.isArray(value) ? value.length : this.getLength(value, element);
                return this.optional(element) || (length >= param[0] && length <= param[1]);
            },

            // http://jqueryvalidation.org/min-method/
            min: function (value, element, param) {
                return this.optional(element) || value >= param;
            },

            // http://jqueryvalidation.org/max-method/
            max: function (value, element, param) {
                return this.optional(element) || value <= param;
            },

            // http://jqueryvalidation.org/range-method/
            range: function (value, element, param) {
                return this.optional(element) || (value >= param[0] && value <= param[1]);
            },

            // http://jqueryvalidation.org/equalTo-method/
            equalTo: function (value, element, param) {
                // bind to the blur event of the target in order to revalidate whenever the target field is updated
                // TODO find a way to bind the event just once, avoiding the unbind-rebind overhead
                var target = $(param);
                if (this.settings.onfocusout) {
                    target.off(".validate-equalTo").on("blur.validate-equalTo", function () {
                        $(element).valid();
                    });
                }
                return value === target.val();
            },

            // http://jqueryvalidation.org/remote-method/
            remote: function (value, element, param) {
                if (this.optional(element)) {
                    return "dependency-mismatch";
                }

                var previous = this.previousValue(element),
                    validator, data;

                if (!this.settings.messages[element.name]) {
                    this.settings.messages[element.name] = {};
                }
                previous.originalMessage = this.settings.messages[element.name].remote;
                this.settings.messages[element.name].remote = previous.message;

                param = typeof param === "string" && { url: param } || param;

                if (previous.old === value) {
                    return previous.valid;
                }

                previous.old = value;
                validator = this;
                this.startRequest(element);
                data = {};
                data[element.name] = value;
                $.ajax($.extend(true, {
                    mode: "abort",
                    port: "validate" + element.name,
                    dataType: "json",
                    data: data,
                    context: validator.currentForm,
                    success: function (response) {
                        var valid = response === true || response === "true",
                            errors, message, submitted;

                        validator.settings.messages[element.name].remote = previous.originalMessage;
                        if (valid) {
                            submitted = validator.formSubmitted;
                            validator.prepareElement(element);
                            validator.formSubmitted = submitted;
                            validator.successList.push(element);
                            delete validator.invalid[element.name];
                            validator.showErrors();
                        } else {
                            errors = {};
                            message = response || validator.defaultMessage(element, "remote");
                            errors[element.name] = previous.message = $.isFunction(message) ? message(value) : message;
                            validator.invalid[element.name] = true;
                            validator.showErrors(errors);
                        }
                        previous.valid = valid;
                        validator.stopRequest(element, valid);
                    }
                }, param));
                return "pending";
            }
        }

    });

    // ajax mode: abort
    // usage: $.ajax({ mode: "abort"[, port: "uniqueport"]});
    // if mode:"abort" is used, the previous request on that port (port can be undefined) is aborted via XMLHttpRequest.abort()

    var pendingRequests = {},
        ajax;
    // Use a prefilter if available (1.5+)
    if ($.ajaxPrefilter) {
        $.ajaxPrefilter(function (settings, _, xhr) {
            var port = settings.port;
            if (settings.mode === "abort") {
                if (pendingRequests[port]) {
                    pendingRequests[port].abort();
                }
                pendingRequests[port] = xhr;
            }
        });
    } else {
        // Proxy ajax
        ajax = $.ajax;
        $.ajax = function (settings) {
            var mode = ("mode" in settings ? settings : $.ajaxSettings).mode,
                port = ("port" in settings ? settings : $.ajaxSettings).port;
            if (mode === "abort") {
                if (pendingRequests[port]) {
                    pendingRequests[port].abort();
                }
                pendingRequests[port] = ajax.apply(this, arguments);
                return pendingRequests[port];
            }
            return ajax.apply(this, arguments);
        };
    }





    jQuery.extend(jQuery.validator.messages, {
        required: "不能为空",
        remote: "请修正该值",
        email: "请输入正确格式的电子邮件",
        url: "请输入合法的网址",
        date: "请输入合法的日期",
        dateISO: "请输入合法的日期 (ISO).",
        number: "请输入合法的数字",
        digits: "只能输入整数",
        creditcard: "请输入合法的信用卡号",
        equalTo: "请再次输入相同的值",
        accept: "请输入拥有合法后缀名的字符串",
        maxlength: jQuery.validator.format("请输入一个长度最多是 {0} 的字符串"),
        minlength: jQuery.validator.format("请输入一个长度最少是 {0} 的字符串"),
        rangelength: jQuery.validator.format("请输入一个长度介于 {0} 和 {1} 之间的字符串"),
        range: jQuery.validator.format("请输入一个介于 {0} 和 {1} 之间的值"),
        max: jQuery.validator.format("请输入一个最大为 {0} 的值"),
        min: jQuery.validator.format("请输入一个最小为 {0} 的值")
    });


    function GetErrorContainer($form) {
        var $formErros = $form.find(">div.forms-errors");
        if ($formErros.length == 0) {
            $formErros = $("<div class='forms-errors'></div>");
            $formErros.html('<a href="#" title="关闭" class="forms-errors-close" onclick="$(this).parent().hide(); return false;"><i class="fa fa-times-circle"></i></a><ul></ul>');
            $form.prepend($formErros);
        }
        return $formErros;
    }

    BM.validate = function ($form, options) {
        var oldInvalidHandler = options.invalidHandler;
        var oldSubmitHandler = options.submitHandler;

        var config = $.extend(true, {
            errorClass: "validate-error"
        }, options, {});

        config.highlight = function (element, errorClass, validClass) {
            var $element = $(element);
            if (element.type === "radio") {
                this.findByName(element.name).addClass(errorClass).removeClass(validClass);
            } else {
                $element.addClass(errorClass).removeClass(validClass);
            }
            var belvolyName = $element.data("belvoly-name");
            if (belvolyName) {
                var $formErros = GetErrorContainer($form);
                var $li = $formErros.find("li[data-belvoly-name='" + belvolyName + "']");
                if ($li.length == 0) {
                    $li = $("<li data-belvoly-name='{0}'></li>".bformat(belvolyName));
                    $formErros.find("ul").append($li);
                }
                var message = this.errorMap[$element.attr("name")];
                $li.show().html("<strong>{0}：</strong>{1}".bformat(belvolyName, message));
                $formErros.show();
            }
        };
        config.unhighlight = function (element, errorClass, validClass) {
            var $element = $(element);
            if (element.type === "radio") {
                this.findByName(element.name).removeClass(errorClass).addClass(validClass);
            } else {
                $element.removeClass(errorClass).addClass(validClass);
            }
            var belvolyName = $element.data("belvoly-name");
            if (belvolyName) {
                var $formErros = GetErrorContainer($form);
                $formErros.find("li[data-belvoly-name='" + belvolyName + "']").hide();
                if ($formErros.find("li:visible").length == 0) {
                    $formErros.hide();
                }
            }

        };


        config.invalidHandler = function (event, validator) {
            var $form = $(validator.currentForm);
            var errorNums = validator.numberOfInvalids();
            if (errorNums) {
                // 'this' refers to the form
                var error = validator.errorList[0];
                BM.MessageBox.cue("{0}{1}".bformat($(error.element).addClass("validate-error").data("belvoly-name"), error.message), "ERROR");
                $form.addClass("form-validate-failed");
            } else {
                $form.find(".validate-error").removeClass("validate-error");
                $form.removeClass("form-validate-failed");
            }
            if (!oldInvalidHandler) {
                return;
            }
            return oldInvalidHandler(event, validator);
        };
        config.submitHandler = function (form) {
            var $form = $(form);
            $form.find(">div.forms-errors").hide();
            $form.removeClass("form-validate-failed");
            if (!oldSubmitHandler) {
                return;
            }
            return oldSubmitHandler.apply(this, arguments);
        }

        return $form.validate(config);
    };

}));


